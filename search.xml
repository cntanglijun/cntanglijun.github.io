<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue 与 react 之间的对比</title>
      <link href="/2021/04/10/vue-react-comparison/"/>
      <url>/2021/04/10/vue-react-comparison/</url>
      
        <content type="html"><![CDATA[<p>vue 和 react 是前端主流的两款框架，文本主要来聊聊他们之间的共同点和不同点</p><a id="more"></a><h3 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h3><ul><li>使用 Virtual DOM</li><li>提供了响应式（Reactive）和组件化（Composable）的视图组件</li><li>将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库</li></ul><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><h4 id="渲染优化"><a href="#渲染优化" class="headerlink" title="渲染优化"></a>渲染优化</h4><p>react 组件的状态发生变化时会以该组件为根重新渲染整个组件子树。一般为了避免不必要的子组件的重新渲染，需要使用 <code>PureComponent</code> 或者手动实现 <code>shouldComponentUpdate</code> 方法</p><p>vue 组件的依赖是在渲染过程中自动追踪的，所以系统能精确知晓哪个组件确实需要被重新渲染</p><p>vue 相比 react 在渲染优化方面开发者无需有过多的考虑</p><h4 id="HTML-amp-CSS"><a href="#HTML-amp-CSS" class="headerlink" title="HTML &amp; CSS"></a>HTML &amp; CSS</h4><p>react 中一切都是 javascript，HTML 也好、CSS 也好都可以在 javascript 中处理</p><p>vue 的整体思想是拥抱经典的 web 技术，并进行相应扩展</p><h4 id="JSX-vs-Templates"><a href="#JSX-vs-Templates" class="headerlink" title="JSX vs Templates"></a>JSX vs Templates</h4><p>react 中使用 JSX（一种使用 XML 语法编写 javascript 的语法糖），JSX 的优势如下</p><ul><li>可以使用完整的 javascript 语言来构建视图页面，例如变量、流程控制、作用域等</li><li>开发工具对 JSX 的支持较 vue 模版更成熟（例如 linting、类型检查、自动补充等）</li></ul><p>vue 默认推荐使用模版（vue 本身提供了渲染函数，甚至支持 JSX），使用 vue 模版的优势如下</p><ul><li>对于习惯 HTML 的开发者，vue 模版比 JSX 读写更自然。虽然这有主观偏好的因素，但如果这种差异能导致开发效率的提升，那么它就有客观的价值存在</li><li>基于 HTML 的模版使得将已有的应用逐步迁移到 vue 更加容易</li><li>对于设计师以及刚入门的开发者能够更容易的理解和参与到项目中</li><li>vue 模版支持第三方的模版预处理器（例如 pug、ejs）</li></ul><p>vue 官方认为组件有两类：</p><ul><li>偏视图表现的（presentational）</li><li>偏逻辑的（logical）</li></ul><p>对于偏视图表现的组件推荐使用模版，对于偏逻辑的组件推荐使用 JSX 或渲染函数，总的来看表现类组件是要多余逻辑类组件的</p><h4 id="组件作用域内的-css"><a href="#组件作用域内的-css" class="headerlink" title="组件作用域内的 css"></a>组件作用域内的 css</h4><p>react 通过 css-in-js 实现 css 作用域，vue 是通过 style 标签</p><p>相比之下 vue 的方式更加自然和灵活</p><h4 id="向上扩展"><a href="#向上扩展" class="headerlink" title="向上扩展"></a>向上扩展</h4><p>vue 和 react 都提供了强大的路由来应对大型应用。react 有 flux、redux，vue 有 vuex（vue 也可以很容易集成 redux）</p><p>vue 的路由库和状态管理库都是由官方维护支持并且与核心库同步更新的。react 则把这些问题交给社区维护，因此创建了一个更分散的生态系统。这也使得 react 的生态系统比 vue 更繁荣</p><p>vue 提供了 vue-cli 工具，可以通过交互式的脚手架引导快速构建项目。react 提供了 create-react-app，由于两者设计理念之间的差异而存在一些局限性</p><ul><li>它不允许在项目生成时进行任何配置，而 vue-cli 运行于可升级的运行时依赖之上，该运行时可以通过插件进行扩展</li><li>它只提供一个构建单页面应用的默认选项，而 vue 提供了各种用途的模版</li><li>它不能用用户自建的预设配置构建项目，这对企业环境下预先建立约定是特别有用的</li></ul><h4 id="向下扩展"><a href="#向下扩展" class="headerlink" title="向下扩展"></a>向下扩展</h4><p>react 学习曲线陡峭，在学习 react 之前需要了解 JSX、ES2015、构建系统。vue 向上扩展好比 react，向下扩展类似 jQuery，只需要引入</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>vue 在起步阶段无需学习 JSX、ES2015 和构建系统，所以开发者可以快速上手</p><h4 id="原生渲染"><a href="#原生渲染" class="headerlink" title="原生渲染"></a>原生渲染</h4><p>react 方面对于原生 app（ios 和 android）可以用 react native。vue 则是和 weex 合作来开发原生 ios 和 android app，单从成熟度来说 react native 要胜过 weex</p><h4 id="mobx"><a href="#mobx" class="headerlink" title="mobx"></a>mobx</h4><p>mobx 在 react 社区很流行，而 vue 实际上也采用了几乎相同的反映系统。react + mobx 也可看作是更繁琐的 vue</p><h4 id="preact-和其他类-react-库"><a href="#preact-和其他类-react-库" class="headerlink" title="preact 和其他类 react 库"></a>preact 和其他类 react 库</h4><p>类 react 库往往尽可能地与 react 共享 api 和生态，因此上述比较对它们同样适用。它们与 react 的不同在于更小的生态，由于无法 100% 兼容 react 生态中的全部，一些工具和辅助库可能无法使用，或多或少会出现兼容问题</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://cn.vuejs.org/v2/guide/comparison.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/comparison.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> architect </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 处理文本溢出</title>
      <link href="/2020/02/24/how-to-handle-text-overflow-with-css/"/>
      <url>/2020/02/24/how-to-handle-text-overflow-with-css/</url>
      
        <content type="html"><![CDATA[<p>日常开发中，我们经常会遇到文本超出容器的情况。通常我们会考虑限制文字字数，通过 JS 截取指定字符数，当然也可以通过 CSS 来处理文本溢出。</p><a id="more"></a><h1 id="单行文本溢出"><a href="#单行文本溢出" class="headerlink" title="单行文本溢出"></a>单行文本溢出</h1><p>相关样式</p><pre class=" language-css"><code class="language-css"><span class="token selector">p </span><span class="token punctuation">{</span>  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>效果演示：</p><div style="padding-right:20px;padding-left:20px;border:1px solid #eee"><p style="overflow:hidden;text-overflow:ellipsis;white-space:nowrap">那时我懂了，我们尽管是再合适不过的旅伴，但归根结蒂仍不过是描绘各自轨迹的两个孤独的金属块儿。远看如流星一般美丽，而实际上我们不外乎是被幽禁在里面的、哪里也去不了的囚徒。当两颗卫星的轨道偶尔交叉时，我们便这样相会了。也可能两颗心相碰，但不过一瞬之间。下一瞬间就重新陷入绝对的孤独中。总有一天会化为灰烬。</p></div><h1 id="多行文本溢出"><a href="#多行文本溢出" class="headerlink" title="多行文本溢出"></a>多行文本溢出</h1><p>相关样式</p><pre class=" language-css"><code class="language-css"><span class="token selector">p </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>  <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span>  <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>效果演示：</p><div style="width:100%;padding-right:20px;padding-left:20px;border:1px solid #eee"><p style="display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:2;overflow:hidden">那时我懂了，我们尽管是再合适不过的旅伴，但归根结蒂仍不过是描绘各自轨迹的两个孤独的金属块儿。远看如流星一般美丽，而实际上我们不外乎是被幽禁在里面的、哪里也去不了的囚徒。当两颗卫星的轨道偶尔交叉时，我们便这样相会了。也可能两颗心相碰，但不过一瞬之间。下一瞬间就重新陷入绝对的孤独中。总有一天会化为灰烬。</p></div><h1 id="兼容-IE"><a href="#兼容-IE" class="headerlink" title="兼容 IE"></a>兼容 IE</h1><p>相关样式</p><pre class=" language-css"><code class="language-css"><span class="token selector">p </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.4</span>em<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">2.8</span>em<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p > span </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> <span class="token property">absolute</span><span class="token punctuation">:</span>  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url('./ellipsis.png')</span><span class="token punctuation">;</span>  <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>  <span class="token property">background-position</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意：行高与高度的比例；span 元素需要一个渐变背景图片过渡。</p></blockquote><p>效果演示：</p><div style="width:100%;padding-right:20px;padding-left:20px;border:1px solid #eee"><p style="position:relative;line-height:1.4em;height:2.8em;overflow:hidden">那时我懂了，我们尽管是再合适不过的旅伴，但归根结蒂仍不过是描绘各自轨迹的两个孤独的金属块儿。远看如流星一般美丽，而实际上我们不外乎是被幽禁在里面的、哪里也去不了的囚徒。当两颗卫星的轨道偶尔交叉时，我们便这样相会了。也可能两颗心相碰，但不过一瞬之间。下一瞬间就重新陷入绝对的孤独中。总有一天会化为灰烬。<span style="position:absolute;right:0;bottom:0;display:block;padding-left:40px;background-image:url(ellipsis.png);background-size:cover;background-position:center">...</span></p></div><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-line-clamp" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-line-clamp</a></li><li><a href="https://segmentfault.com/a/1190000008921613" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008921613</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 cypress 做 E2E 测试</title>
      <link href="/2020/01/20/e2e-test-by-cypress/"/>
      <url>/2020/01/20/e2e-test-by-cypress/</url>
      
        <content type="html"><![CDATA[<p>E2E 测试即 End to End，也就是端到端测试，属于黑盒测试。通过编写测试用例，自动化模拟用户操作，确保应用程序能够如期运行。以 <a href="https://github.com/cntanglijun/web-building-boilerplates/tree/master/react-multi-page" target="_blank" rel="noopener">react-multi-page</a> 模版为例，谈谈如何使用 cypress 做 E2E 测试</p><a id="more"></a><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li>cypress[3.8.2]</li><li>eslint-plugin-cypress[2.8.1]</li></ul><h2 id="如何配置"><a href="#如何配置" class="headerlink" title="如何配置"></a>如何配置</h2><p>安装 cypress</p><pre><code>npm i cypress eslint-plugin-cypress -D</code></pre><p>设置 npm 脚本命令</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test:e2e"</span><span class="token operator">:</span> <span class="token string">"cypress open"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行 cypress</p><pre><code>node_modules/.bin/cypress open</code></pre><p><img src="./1.png"></p><p>cypress 启动后，会在根目录看到 <code>cypress</code> 目录，里面存放了运行 <code>cypress</code> 相关的配置资料，为了分类处理目录结构，可以约定将测试相关的资料统一放在 <code>test</code> 目录中。那么在根目录建立 <code>test/e2e</code> 目录用于存放 E2E 测试相关资料，并把 <code>cypress</code> 目录中的资料转移到 <code>test/e2e</code> 目录中</p><pre class=" language-txt"><code class="language-txt"><root>  |__ test    |__ e2e      |__ fixtures      |__ integration      |__ plugins      |__ support</code></pre><p>在根目录创建 <code>cypress.json</code>，配置相关目录指向 <code>test/e2e</code> 文件夹</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"http://localhost:3000/"</span><span class="token punctuation">,</span>  <span class="token property">"fixturesFolder"</span><span class="token operator">:</span> <span class="token string">"test/e2e/fixtures"</span><span class="token punctuation">,</span>  <span class="token property">"integrationFolder"</span><span class="token operator">:</span> <span class="token string">"test/e2e/integration"</span><span class="token punctuation">,</span>  <span class="token property">"pluginsFile"</span><span class="token operator">:</span> <span class="token string">"test/e2e/plugins/index.js"</span><span class="token punctuation">,</span>  <span class="token property">"screenshotsFolder"</span><span class="token operator">:</span> <span class="token string">"test/e2e/screenshots"</span><span class="token punctuation">,</span>  <span class="token property">"supportFile"</span><span class="token operator">:</span> <span class="token string">"test/e2e/support/index.js"</span><span class="token punctuation">,</span>  <span class="token property">"videosFolder"</span><span class="token operator">:</span> <span class="token string">"test/e2e/videos"</span><span class="token punctuation">,</span>  <span class="token property">"video"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><blockquote><p>其中 <code>baseUr</code> 根据实际网站域名端口自行配置，<code>video</code> 默认是启用状态，我这里设置关闭即不保存测试录屏文件</p></blockquote><h2 id="编写测试用例"><a href="#编写测试用例" class="headerlink" title="编写测试用例"></a>编写测试用例</h2><p>现在我们可以来编写一些简单的测试用例，来测试我们的 APP 的运行是否按预期执行</p><p><img src="./2.png"></p><p>假设我们的测试点有：</p><ul><li>首页包含 <code>Index</code> 文字</li><li>首页包含 <code>Link To Home</code> 文字</li><li>可以点击 <code>Link To Home</code> 文字</li><li>点击 <code>Link To Home</code> 文字后进入新页面，新页面 url 中包含 <code>home</code> 文字</li></ul><p>编写成对应的 E2E 测试用例如下：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// test/e2e/integration/Index.spec.js</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'The Home Page'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'successfully loads'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cy<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>    cy<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">'Index'</span><span class="token punctuation">)</span>    cy<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">'Link To Home'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    cy<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">'include'</span><span class="token punctuation">,</span> <span class="token string">'home'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>重新启动 <code>cypress</code>，选择 <code>Index.spec.js</code>，可以看到完整的测试流程，并显示测试已经通过</p><p><img src="./3.png"></p><h2 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h2><p>上面我们通过 <code>cypress open</code> 命令手动测试，但在实际工作中可能需要在持续集成环境中运行 E2E 测试，可以使用 <code>cypress run</code> 命令</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test:e2e"</span><span class="token operator">:</span> <span class="token string">"npm run serve &amp;&amp; cypress run"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>但是很快就发现问题了，执行 <code>npm run serve</code> 后终端被服务器进程挂起，无法执行后面的 <code>cypress run</code> 命令，于是我引入 <a href="https://github.com/bahmutov/start-server-and-test" target="_blank" rel="noopener">start-server-and-test</a> 来处理 <code>npm run serve</code> 的阻塞问题，也可以使用官方文档中的 <a href="https://github.com/jeffbski/wait-on" target="_blank" rel="noopener">wait-on</a></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"cypress:open"</span><span class="token operator">:</span> <span class="token string">"cypress open"</span><span class="token punctuation">,</span>    <span class="token property">"cypress:run"</span><span class="token operator">:</span> <span class="token string">"cypress run"</span><span class="token punctuation">,</span>    <span class="token property">"serve"</span><span class="token operator">:</span> <span class="token string">"node prod.server.js"</span><span class="token punctuation">,</span>    <span class="token property">"test:e2e"</span><span class="token operator">:</span> <span class="token string">"start-server-and-test serve http://localhost:3000 cypress:open"</span><span class="token punctuation">,</span>    <span class="token property">"test-ci:e2e"</span><span class="token operator">:</span> <span class="token string">"start-server-and-test serve http://localhost:3000  cypress:run"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>现在 <code>npm run serve</code> 不会阻塞后面的任务了，终端运行结果如下</p><pre class=" language-txt"><code class="language-txt">====================================================================================================  (Run Starting)  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐  │ Cypress:    3.8.2                                                                              │  │ Browser:    Electron 78 (headless)                                                             │  │ Specs:      1 found (Index.spec.js)                                                            │  └────────────────────────────────────────────────────────────────────────────────────────────────┘────────────────────────────────────────────────────────────────────────────────────────────────────  Running:  Index.spec.js                                                                   (1 of 1)undefined  The Home Page    √ successfully loads (1395ms)undefinedundefined  1 passing (2s)undefined  (Results)  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐  │ Tests:        1                                                                                │  │ Passing:      1                                                                                │  │ Failing:      0                                                                                │  │ Pending:      0                                                                                │  │ Skipped:      0                                                                                │  │ Screenshots:  0                                                                                │  │ Video:        false                                                                            │  │ Duration:     1 second                                                                         │  │ Spec Ran:     Index.spec.js                                                                    │  └────────────────────────────────────────────────────────────────────────────────────────────────┘====================================================================================================  (Run Finished)       Spec                                              Tests  Passing  Failing  Pending  Skipped  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐  │ √  Index.spec.js                            00:01        1        1        -        -        - │  └────────────────────────────────────────────────────────────────────────────────────────────────┘    √  All specs passed!                        00:01        1        1        -        -        -</code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.cypress.io/zh-cn/guides/overview/why-cypress.html" target="_blank" rel="noopener">https://docs.cypress.io/zh-cn/guides/overview/why-cypress.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> architect </category>
          
      </categories>
      
      
        <tags>
            
            <tag> e2e test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE 单元测试</title>
      <link href="/2020/01/03/vue-unit-test/"/>
      <url>/2020/01/03/vue-unit-test/</url>
      
        <content type="html"><![CDATA[<p>养成良好的编码习惯，一个合格的程序员需要掌握一些编写单元测试的能力。单元测试也可以整体上提升我们的代码质量，这里介绍下 VUE 组件的单元测试。</p><a id="more"></a><blockquote><p>如果想直接通过 Demo 学习，可以跳过下面的内容，<a href="https://github.com/cntanglijun/vue-boilerplate/archive/master.zip" target="_blank" rel="noopener">点击这里下载示例</a></p></blockquote><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li>@vue/test-utils[1.0.0-beta.30]</li><li>istanbul-instrumenter-loader[3.0.1]</li><li>karma[4.4.1]</li><li>karma-chrome-launcher[3.1.0]</li><li>karma-mocha[1.3.0]</li><li>karma-sourcemap-loader[0.3.7]</li><li>karma-coverage-istanbul-reporter[2.1.1]</li><li>karma-webpack[4.0.2]</li><li>webpack[4.41.5]</li></ul><h2 id="定义配置文件"><a href="#定义配置文件" class="headerlink" title="定义配置文件"></a>定义配置文件</h2><p><code>karma.conf.js</code> 文件用于 <code>karma</code> 的配置，使用 <code>node_modules/.bin/karma init</code> 命令创建该文件，我们定义如下配置：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Karma configuration</span><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./config/webpack.test.config.js'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>  config<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// base path that will be used to resolve all patterns (eg. files, exclude)</span>    basePath<span class="token punctuation">:</span> <span class="token string">'.'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// frameworks to use</span>    <span class="token comment" spellcheck="true">// available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span>    frameworks<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'mocha'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// list of files / patterns to load in the browser</span>    files<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">'test/**/*.spec.js'</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// preprocess matching files before serving them to the browser</span>    <span class="token comment" spellcheck="true">// available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</span>    preprocessors<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'test/**/*.spec.js'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'webpack'</span><span class="token punctuation">,</span> <span class="token string">'sourcemap'</span> <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// webpack config</span>    webpack<span class="token punctuation">:</span> webpackConfig<span class="token punctuation">,</span>    webpackMiddleware<span class="token punctuation">:</span> <span class="token punctuation">{</span>      stats<span class="token punctuation">:</span> <span class="token string">'errors-only'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// web server port</span>    port<span class="token punctuation">:</span> <span class="token number">9876</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// enable / disable colors in the output (reporters and logs)</span>    colors<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// level of logging</span>    <span class="token comment" spellcheck="true">// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span>    logLevel<span class="token punctuation">:</span> config<span class="token punctuation">.</span>LOG_INFO<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// enable / disable watching file and executing tests whenever any file changes</span>    autoWatch<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// start these browsers</span>    <span class="token comment" spellcheck="true">// available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</span>    browsers<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'Chrome'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Continuous Integration mode</span>    <span class="token comment" spellcheck="true">// if true, Karma captures browsers, runs the tests and exits</span>    singleRun<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Concurrency level</span>    <span class="token comment" spellcheck="true">// how many browser should be started simultaneous</span>    concurrency<span class="token punctuation">:</span> <span class="token number">Infinity</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>设置 <code>frameworks</code> 为 <code>[&#39;mocha&#39;]</code>，即使用 <code>mocha</code> 测试框架</li><li>设置 <code>files</code> 为 <code>[&#39;test/**/*.spec.js&#39;]</code>，即对 <code>test</code> 目录下所有的后缀为 <code>.spec.js</code> 文件测试</li><li>设置 <code>preprocessors</code> 为 <code>{&#39;**/*.spec.js&#39;: [&#39;webpack&#39;, &#39;sourcemap&#39;]}</code>，即使用 <code>webpack</code>，<code>sourcemap</code> 对所有的测试文件进行 webpack 打包</li><li>设置 <code>browsers</code> 为 <code>Chrome</code>，即使用 Chrome 浏览器作为测试浏览器</li></ul><h2 id="编写测试用例"><a href="#编写测试用例" class="headerlink" title="编写测试用例"></a>编写测试用例</h2><p>详细的关于 <code>@vue/test-utils</code> 用法，查看 <a href="https://vue-test-utils.vuejs.org/zh/" target="_blank" rel="noopener">https://vue-test-utils.vuejs.org/zh/</a></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'chai'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> shallowMount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@vue/test-utils'</span><span class="token keyword">import</span> Header <span class="token keyword">from</span> <span class="token string">'../src/components/Header'</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'Header'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shallowMount</span><span class="token punctuation">(</span>Header<span class="token punctuation">)</span>  <span class="token keyword">const</span> header <span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'header'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> h1 <span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'有 header 标签'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'有 h1 标签'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>h1<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'h1 的文案为“VUE 单页模版”'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>h1<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string">'VUE 单页模版'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'h1 标签在 header 标签中'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">expect</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>这里我引用 <a href="https://github.com/cntanglijun/web-building-boilerplates/blob/master/vue-single-page/src/components/Header/index.vue" target="_blank" rel="noopener">vue-single-page</a> 的 <code>Header</code> 组件测试用例</p><ul><li>首先通过 <code>shallowMount</code> 获取 <code>wrapper</code></li><li>使用 <code>chai</code> 断言库编写相关的测试用例</li></ul><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><pre class=" language-txt"><code class="language-txt">i ｢wdm｣: Compiled successfully.15 01 2020 18:28:13.799:INFO [karma-server]: Karma v4.4.1 server started at http://0.0.0.0:9876/15 01 2020 18:28:13.813:INFO [launcher]: Launching browsers Chrome with concurrency unlimited15 01 2020 18:28:13.820:INFO [launcher]: Starting browser Chrome15 01 2020 18:28:17.075:INFO [Chrome 79.0.3945 (Windows 10.0.0)]: Connected on socket PUKPz4iBuFzeVNSsAAAA with id 91716917TOTAL: 4 SUCCESS</code></pre><p>可以看到我们的单元测试已经通过了</p><h2 id="测试覆盖率报告"><a href="#测试覆盖率报告" class="headerlink" title="测试覆盖率报告"></a>测试覆盖率报告</h2><p>测试完成后，我们需要查看测试覆盖率报告。这需要在 <code>webpack.test.config.js</code> 和 <code>karma.conf.js</code> 中做一些配置修改</p><h3 id="webpack-test-config-js"><a href="#webpack-test-config-js" class="headerlink" title="webpack.test.config.js"></a>webpack.test.config.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> webpackCommonConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.common.config'</span><span class="token punctuation">)</span><span class="token keyword">const</span> testConfig <span class="token operator">=</span> <span class="token punctuation">{</span>  devtool<span class="token punctuation">:</span> <span class="token string">'inline-source-map'</span><span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.spec.js$/i</span><span class="token punctuation">,</span>        enforce<span class="token punctuation">:</span> <span class="token string">'pre'</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'istanbul-instrumenter-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              esModules<span class="token punctuation">:</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>webpackCommonConfig<span class="token punctuation">,</span> testConfig<span class="token punctuation">)</span></code></pre><ul><li>添加一个优先执行的编译 <code>.spec.js</code> 文件的 <code>rules</code>，<code>loader</code> 使用 <code>istanbul-instrumenter-loader</code> 并开启 <code>esModules</code> 模式</li></ul><h3 id="karma-conf-js"><a href="#karma-conf-js" class="headerlink" title="karma.conf.js"></a>karma.conf.js</h3><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>  config<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>    coverageIstanbulReporter<span class="token punctuation">:</span> <span class="token punctuation">{</span>      reports<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token string">'text'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>      fixWebpackSourcePaths<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    reporters<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'coverage-istanbul'</span> <span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">//...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ul><li>设置 <code>reporters</code> 为 <code>[ &#39;coverage-istanbul&#39; ]</code>，即使用 <code>coverage-istanbul</code> reporters</li><li><code>coverageIstanbulReporter</code> 配置项用于设置 <code>coverage-istanbul</code> 的参数，详细的参数可以参考 <a href="https://github.com/mattlewis92/karma-coverage-istanbul-reporter#configuration" target="_blank" rel="noopener">这里</a></li></ul><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><p>再次执行单元测试，我们会看到测试覆盖率的相关信息</p><pre class=" language-txt"><code class="language-txt">----------------|----------|----------|----------|----------|-------------------|File            |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Line #s |----------------|----------|----------|----------|----------|-------------------|All files       |      100 |      100 |      100 |      100 |                   | Header.spec.js |      100 |      100 |      100 |      100 |                   |----------------|----------|----------|----------|----------|-------------------|</code></pre><p>也可以通过生成到 <code>coverage</code> 目录下的网页文件，在浏览器中查看</p><p><img src="./coverage.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://vue-test-utils.vuejs.org/zh/" target="_blank" rel="noopener">https://vue-test-utils.vuejs.org/zh/</a></li><li><a href="https://github.com/mattlewis92/karma-coverage-istanbul-reporter" target="_blank" rel="noopener">https://github.com/mattlewis92/karma-coverage-istanbul-reporter</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> architect </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unit test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker In WSL</title>
      <link href="/2019/07/16/docker-in-wsl/"/>
      <url>/2019/07/16/docker-in-wsl/</url>
      
        <content type="html"><![CDATA[<p>WSL 虽说可以让我们在 Windows 中运行 Linux，但是它对 Docker 的支持还并不完美</p><h1 id="Docker-In-WSL"><a href="#Docker-In-WSL" class="headerlink" title="Docker In WSL"></a>Docker In WSL</h1><p>Windows 的 WSL 功能允许在 Windows 中运行 Linux 子系统，但是 WSL 不支持 Docker Daemon，因此虽然 <code>docker -v</code> 可以正常执行，但是 <code>docker run hello-world</code> 报错 <code>docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?.</code></p><p><img src="./1.png"></p><h2 id="安装-Docker-For-Windows"><a href="#安装-Docker-For-Windows" class="headerlink" title="安装 Docker For Windows"></a>安装 Docker For Windows</h2><p>没有办法，那么我们就在宿主机上安装 <a href="https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe" target="_blank" rel="noopener">Docker For Windows</a>，在设置里面勾选 <code>Expose daemon on tcp://localhost:2375 without TLS</code></p><p><img src="./2.png"></p><h2 id="配置-bashrc"><a href="#配置-bashrc" class="headerlink" title="配置 .bashrc"></a>配置 .bashrc</h2><p>为了每次打开 WSL 终端自动连接宿主机上的 Docker，需要在 <code>.bashrc</code> 文件中做相关配置</p><p><img src="./3.png"></p><h2 id="今晚吃鸡"><a href="#今晚吃鸡" class="headerlink" title="今晚吃鸡"></a>今晚吃鸡</h2><p>好了，现在是到了见证奇迹的时候了，打开 Windows Terminal 输入 <code>docker run hello-world</code></p><p><img src="./4.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://my.oschina.net/u/3628490/blog/1865780" target="_blank" rel="noopener">https://my.oschina.net/u/3628490/blog/1865780</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> wsl </tag>
            
            <tag> terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Terminal</title>
      <link href="/2019/07/14/windows-terminal/"/>
      <url>/2019/07/14/windows-terminal/</url>
      
        <content type="html"><![CDATA[<p>Windows Terminal 的采坑记录</p><a id="more"></a><h1 id="Windows-Terminal"><a href="#Windows-Terminal" class="headerlink" title="Windows Terminal"></a>Windows Terminal</h1><p><img src="./2.png"></p><p>Windows Terminal 是一个全新的、流行的、功能强大的命令行终端工具。包含很多来社区呼声很高的特性，例如：多 Tab 支持、富文本、多语言支持、可配置、主题和样式，支持 emoji 和基于 GPU 运算的文本渲染等等</p><p>同时该终端依然符合我们的目标和要求，以确保它保持快速、高效，并且不会消耗大量内存和电源</p><h2 id="安装-Windows-Terminal"><a href="#安装-Windows-Terminal" class="headerlink" title="安装 Windows Terminal"></a>安装 Windows Terminal</h2><p>我们可以通过 Microsoft Store 安装 Windows Terminal，也可以通过官方仓库手动编译 Windows Terminal。我推荐在 Microsoft Store 安装，因为这种方式最方便 (1)</p><p><img src="./3.png"></p><h2 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h2><p>Windows Subsystem for Linux(简称 WSL) 是一个在 Windows 10 上能够运行原生 Linux 二进制可执行文件 (ELF 格式) 的兼容层。它是由微软与 Canonical 公司合作开发，其目标是使纯正的 Ubuntu 14.04 “Trusty Tahr” 映像能下载和解压到用户的本地计算机，并且映像内的工具和实用工具能在此子系统上原生运行 (2)</p><h3 id="开启-WSL-功能"><a href="#开启-WSL-功能" class="headerlink" title="开启 WSL 功能"></a>开启 WSL 功能</h3><p>进入控制面板，添加程序功能 <code>Windows Subsystem for Linux</code> 并重启电脑</p><p><img src="./1.png"></p><h3 id="安装-Ubuntu"><a href="#安装-Ubuntu" class="headerlink" title="安装 Ubuntu"></a>安装 Ubuntu</h3><p>那么我们以 Ubuntu 为例，来演示如何在 Windows 10 中运行 Linux 系统，同样我们在 Microsoft Store 安装 Ubuntu</p><p><img src="./4.png"></p><h2 id="配置-WT"><a href="#配置-WT" class="headerlink" title="配置 WT"></a>配置 WT</h2><p>在 WT 的 Tab 下拉菜单中选择 Setting，打开 profiles.json (3)</p><p><img src="./5.png"></p><p>添加关于 Ubuntu 的配置</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"acrylicOpacity"</span> <span class="token operator">:</span> <span class="token number">0.75</span><span class="token punctuation">,</span>    <span class="token property">"closeOnExit"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"colorScheme"</span> <span class="token operator">:</span> <span class="token string">"One Half Dark"</span><span class="token punctuation">,</span>    <span class="token property">"commandline"</span> <span class="token operator">:</span> <span class="token string">"ubuntu.exe"</span><span class="token punctuation">,</span>    <span class="token property">"cursorColor"</span> <span class="token operator">:</span> <span class="token string">"#FFFFFF"</span><span class="token punctuation">,</span>    <span class="token property">"cursorShape"</span> <span class="token operator">:</span> <span class="token string">"bar"</span><span class="token punctuation">,</span>    <span class="token property">"fontFace"</span> <span class="token operator">:</span> <span class="token string">"Consolas"</span><span class="token punctuation">,</span>    <span class="token property">"fontSize"</span> <span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>    <span class="token property">"guid"</span> <span class="token operator">:</span> <span class="token string">"{f36bcc90-c0a1-48fb-9a11-6b1099c060a2}"</span><span class="token punctuation">,</span>    <span class="token property">"historySize"</span> <span class="token operator">:</span> <span class="token number">9001</span><span class="token punctuation">,</span>    <span class="token property">"icon"</span> <span class="token operator">:</span> <span class="token string">"ms-appdata:///Roaming/{f36bcc90-c0a1-48fb-9a11-6b1099c060a2}.png"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"Ubuntu"</span><span class="token punctuation">,</span>    <span class="token property">"padding"</span> <span class="token operator">:</span> <span class="token string">"0, 0, 0, 0"</span><span class="token punctuation">,</span>    <span class="token property">"snapOnInput"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"startingDirectory"</span> <span class="token operator">:</span> <span class="token string">"%USERPROFILE%"</span><span class="token punctuation">,</span>    <span class="token property">"useAcrylic"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><p><img src="./6.png"></p><p>注意：guid 需要在 PowerShell 中执行 <code>new-guid</code> 命令</p><p><img src="./7.png"></p><h2 id="WT-相关资源存储路径"><a href="#WT-相关资源存储路径" class="headerlink" title="WT 相关资源存储路径"></a>WT 相关资源存储路径</h2><p><code>profiles.json</code> 存放在 <code>$env:LocalAppData\Packages\Microsoft.WindowsTerminal_&lt;randomString&gt;\RoamingState\profiles.json</code>(对应 ms-appdata:///Roaming/)，官方建议配置资源都存放到 <code>RoamingState</code> 目录，方便管理维护，即与 <code>profiles.json</code> 同级目录中，例如上面 Ubuntu 的 <code>icon</code> 配置项 <code>ms-appdata:///Roaming/{f36bcc90-c0a1-48fb-9a11-6b1099c060a2}.png</code></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/microsoft/terminal/blob/master/doc/user-docs/index.md" target="_blank" rel="noopener">https://github.com/microsoft/terminal/blob/master/doc/user-docs/index.md</a> (1)</li><li><a href="https://baike.baidu.com/item/wsl/20359185?fr=aladdin#1" target="_blank" rel="noopener">https://baike.baidu.com/item/wsl/20359185?fr=aladdin#1</a> (2)</li><li><a href="https://github.com/microsoft/terminal/blob/master/doc/cascadia/SettingsSchema.md" target="_blank" rel="noopener">https://github.com/microsoft/terminal/blob/master/doc/cascadia/SettingsSchema.md</a> (3)</li><li><a href="https://github.com/microsoft/terminal/blob/master/doc/user-docs/UsingJsonSettings.md" target="_blank" rel="noopener">https://github.com/microsoft/terminal/blob/master/doc/user-docs/UsingJsonSettings.md</a> (3)</li></ul>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web 前端 Ajax 单元测试</title>
      <link href="/2019/05/19/unit-test-about-ajax/"/>
      <url>/2019/05/19/unit-test-about-ajax/</url>
      
        <content type="html"><![CDATA[<p>Web 前端与后端交互一般通过 <code>Ajax</code> 技术，那么 Ajax 如何来做单元测试呢？</p><a id="more"></a><h1 id="环境与框架"><a href="#环境与框架" class="headerlink" title="环境与框架"></a>环境与框架</h1><p>首先我们要进行技术选型，确定单元测试运行环境和技术栈框架</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs</a> - 10.15.1</li></ul><h2 id="技术栈框架"><a href="#技术栈框架" class="headerlink" title="技术栈框架"></a>技术栈框架</h2><ul><li><a href="https://karma-runner.github.io/latest/index.html" target="_blank" rel="noopener">karma</a> - 4.1.0<ul><li>karma-babel-preprocessor - 8.0.0</li><li>karma-mocha - 1.3.0</li><li>karma-mocha-reporter - 2.2.5</li><li>karma-webpack - 3.0.5</li><li>karma-phantomjs-launcher - 1.0.4</li></ul></li><li><a href="https://mochajs.org/" target="_blank" rel="noopener">mocha</a> - 6.1.4</li><li><a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> - 4.31.0</li><li><a href="https://babeljs.io/" target="_blank" rel="noopener">babel</a><ul><li>@babel/core - 7.4.4</li><li>@babel/preset-env - 7.4.4</li><li>@babel/polyfill - 7.4.4</li><li>@babel/plugin-transform-async-to-generator - 7.4.4</li></ul></li><li><a href="https://www.chaijs.com/" target="_blank" rel="noopener">chai</a> - 4.2.0</li><li><a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios</a> - 0.18.0</li></ul><h1 id="演示项目"><a href="#演示项目" class="headerlink" title="演示项目"></a>演示项目</h1><p>我们测试获取 <code>Github</code> 上星星数大于 20 万的仓库的接口返回数据，已知接口返回格式如下：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  incomplete_results<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  items<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  total_count<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span></code></pre><p>我们需要关注的是：</p><ul><li>接口返回数据中是否包含 <code>items</code>，<code>total_count</code> 字段</li><li><code>items</code> 是一个数组</li><li><code>total_count</code> 是一个数字</li><li><code>items</code> 的数组长度等于 <code>total_count</code> 的值</li></ul><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p><code>npm init -y</code> 创建 <code>package.json</code> 文件并在 <code>package.json</code> 中添加依赖包</p><pre class=" language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"karma start"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"@babel/core"</span><span class="token operator">:</span> <span class="token string">"^7.4.4"</span><span class="token punctuation">,</span>  <span class="token property">"@babel/plugin-transform-async-to-generator"</span><span class="token operator">:</span> <span class="token string">"^7.4.4"</span><span class="token punctuation">,</span>  <span class="token property">"@babel/preset-env"</span><span class="token operator">:</span> <span class="token string">"^7.4.4"</span><span class="token punctuation">,</span>  <span class="token property">"babel-loader"</span><span class="token operator">:</span> <span class="token string">"^8.0.6"</span><span class="token punctuation">,</span>  <span class="token property">"chai"</span><span class="token operator">:</span> <span class="token string">"^4.2.0"</span><span class="token punctuation">,</span>  <span class="token property">"karma"</span><span class="token operator">:</span> <span class="token string">"^4.1.0"</span><span class="token punctuation">,</span>  <span class="token property">"karma-babel-preprocessor"</span><span class="token operator">:</span> <span class="token string">"^8.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"karma-mocha"</span><span class="token operator">:</span> <span class="token string">"^1.3.0"</span><span class="token punctuation">,</span>  <span class="token property">"karma-mocha-reporter"</span><span class="token operator">:</span> <span class="token string">"^2.2.5"</span><span class="token punctuation">,</span>  <span class="token property">"karma-phantomjs-launcher"</span><span class="token operator">:</span> <span class="token string">"^1.0.4"</span><span class="token punctuation">,</span>  <span class="token property">"karma-webpack"</span><span class="token operator">:</span> <span class="token string">"^3.0.5"</span><span class="token punctuation">,</span>  <span class="token property">"mocha"</span><span class="token operator">:</span> <span class="token string">"^6.1.4"</span><span class="token punctuation">,</span>  <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^4.31.0"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"@babel/polyfill"</span><span class="token operator">:</span> <span class="token string">"^7.4.4"</span><span class="token punctuation">}</span></code></pre><h2 id="karma-conf-js"><a href="#karma-conf-js" class="headerlink" title="karma.conf.js"></a>karma.conf.js</h2><p>运行 <code>node_modules/.bin/karma init</code> 创建 <code>karma.conf.js</code></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Karma configuration</span><span class="token comment" spellcheck="true">// Generated on Sat May 18 2019 22:16:40 GMT+0800 (China Standard Time)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>  config<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// base path that will be used to resolve all patterns (eg. files, exclude)</span>    basePath<span class="token punctuation">:</span> <span class="token string">'.'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// frameworks to use</span>    <span class="token comment" spellcheck="true">// available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span>    frameworks<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'mocha'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// list of files / patterns to load in the browser</span>    files<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">'node_modules/@babel/polyfill/dist/polyfill.js'</span><span class="token punctuation">,</span>      <span class="token string">'test/test.*.js'</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// preprocess matching files before serving them to the browser</span>    <span class="token comment" spellcheck="true">// available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</span>    preprocessors<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'test/test.*.js'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">'webpack'</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    webpack<span class="token punctuation">:</span> <span class="token punctuation">{</span>      devtool<span class="token punctuation">:</span> <span class="token string">'inline-source-map'</span><span class="token punctuation">,</span>      mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>      stats<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>      module<span class="token punctuation">:</span> <span class="token punctuation">{</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>            exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>            use<span class="token punctuation">:</span> <span class="token punctuation">{</span>              loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// test results reporter to use</span>    <span class="token comment" spellcheck="true">// possible values: 'dots', 'progress'</span>    <span class="token comment" spellcheck="true">// available reporters: https://npmjs.org/browse/keyword/karma-reporter</span>    reporters<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">'mocha'</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// web server port</span>    port<span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// enable / disable colors in the output (reporters and logs)</span>    colors<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// level of logging</span>    <span class="token comment" spellcheck="true">// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span>    logLevel<span class="token punctuation">:</span> config<span class="token punctuation">.</span>LOG_INFO<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// enable / disable watching file and executing tests whenever any file changes</span>    autoWatch<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// start these browsers</span>    <span class="token comment" spellcheck="true">// available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</span>    browsers<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'PhantomJS'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Continuous Integration mode</span>    <span class="token comment" spellcheck="true">// if true, Karma captures browsers, runs the tests and exits</span>    singleRun<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Concurrency level</span>    <span class="token comment" spellcheck="true">// how many browser should be started simultaneous</span>    concurrency<span class="token punctuation">:</span> <span class="token number">Infinity</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><code>preprocessors</code> 使用 <code>webpack</code> 打包整个依赖链生成浏览器可以运行的测试代码。</p><p><code>singleRun</code> 设置为 <code>true</code> 测试运行结束后自动退出。</p><h2 id="babel-config-js"><a href="#babel-config-js" class="headerlink" title="babel.config.js"></a>babel.config.js</h2><p>创建 <code>babel.config.js</code>，配置如下</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span>      <span class="token string">'@babel/preset-env'</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        modules<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">'@babel/plugin-transform-async-to-generator'</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p><code>@babel/plugin-transform-async-to-generator</code> 用于对 <code>async</code>，<code>await</code> 进行转码</p><h2 id="test-ajax-js"><a href="#test-ajax-js" class="headerlink" title="test.ajax.js"></a>test.ajax.js</h2><p>一般我们将测试文件放在 <code>test</code> 文件夹中，创建 <code>test</code> 文件夹并新建 <code>test.ajax.js</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'chai'</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'Testing about geting the repositories that stars greater than 200000'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> apiUrl <span class="token operator">=</span> <span class="token string">'https://api.github.com/search/repositories'</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token function">before</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      incomplete_results<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      total_count<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      items<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// ...</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// ...</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>apiUrl<span class="token punctuation">,</span> <span class="token punctuation">{</span>      params<span class="token punctuation">:</span> <span class="token punctuation">{</span>        q<span class="token punctuation">:</span> <span class="token string">'stars:>200000'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'Check the response data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Should be an object'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token string">'object'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Should have property total_count'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">'total_count'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Should have property items'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">'items'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'Check the property total_count &amp; items'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Should be a number'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>total_count<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token string">'number'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Should be a array'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>items<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token string">'array'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'The length of items should equal total_count'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>total_count<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><pre><code>START:(node:57604) DeprecationWarning: Tapable.plugin is deprecated. Use new API on `.hooks` insteadi ｢wdm｣: Hash: 9d2c943b68425fd58dd0Version: webpack 4.31.0Time: 11109msBuilt at: 05/19/2019 12:45:44 PMi ｢wdm｣: Compiled successfully.i ｢wdm｣: Compiling...i ｢wdm｣: Hash: c71383ea847fa44c764dVersion: webpack 4.31.0Time: 13238msBuilt at: 05/19/2019 12:45:46 PM            Asset      Size          Chunks             Chunk Namestest\test.ajax.js  1.03 MiB  test\test.ajax  [emitted]  test\test.ajaxEntrypoint test\test.ajax = test\test.ajax.js[./node_modules/assertion-error/index.js] 2.37 KiB {test\test.ajax} [built][./node_modules/axios/index.js] 40 bytes {test\test.ajax} [built][./node_modules/axios/lib/axios.js] 1.34 KiB {test\test.ajax} [built][./node_modules/axios/lib/cancel/Cancel.js] 385 bytes {test\test.ajax} [built][./node_modules/axios/lib/cancel/CancelToken.js] 1.21 KiB {test\test.ajax} [built][./node_modules/axios/lib/cancel/isCancel.js] 102 bytes {test\test.ajax} [built][./node_modules/axios/lib/core/Axios.js] 2.14 KiB {test\test.ajax} [built][./node_modules/axios/lib/defaults.js] 2.38 KiB {test\test.ajax} [built][./node_modules/axios/lib/helpers/bind.js] 256 bytes {test\test.ajax} [built][./node_modules/axios/lib/helpers/spread.js] 564 bytes {test\test.ajax} [built][./node_modules/axios/lib/utils.js] 7.36 KiB {test\test.ajax} [built][./node_modules/chai/index.js] 40 bytes {test\test.ajax} [built][./node_modules/chai/lib/chai.js] 1.23 KiB {test\test.ajax} [built][./node_modules/chai/lib/chai/assertion.js] 5.59 KiB {test\test.ajax} [built][./test/test.ajax.js] 2.27 KiB {test\test.ajax} [built]    + 52 hidden modulesi ｢wdm｣: Compiled successfully.19 05 2019 12:45:46.787:INFO [karma-server]: Karma v4.1.0 server started at http://0.0.0.0:8080/19 05 2019 12:45:46.789:INFO [launcher]: Launching browsers PhantomJS with concurrency unlimited19 05 2019 12:45:46.847:INFO [launcher]: Starting browser PhantomJS19 05 2019 12:45:50.080:INFO [PhantomJS 2.1.1 (Windows 8.0.0)]: Connected on socket JZtc4FkMxDeeNP59AAAA with id 19235176  Testing about geting the repositories that stars greater than 200000    Check the response data      √ Should be an object      √ Should have property total_count      √ Should have property items      Check the property total_count &amp; items        √ Should be a number        √ Should be a array        √ The length of items should equal total_countFinished in 0.954 secs / 0.007 secs @ 12:45:52 GMT+0800 (China Standard Time)SUMMARY:√ 6 tests completed</code></pre><h1 id="完整-Demo-下载"><a href="#完整-Demo-下载" class="headerlink" title="完整 Demo 下载"></a>完整 Demo 下载</h1><p>下载 <a href="/downloads/ajax-unit-test-demo.zip">ajax-unit-test-demo</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://karma-runner.github.io/latest/index.html" target="_blank" rel="noopener">https://karma-runner.github.io/latest/index.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> architect </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unit test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建 Flutter 开发环境</title>
      <link href="/2019/02/07/how-to-building-flutter-environment/"/>
      <url>/2019/02/07/how-to-building-flutter-environment/</url>
      
        <content type="html"><![CDATA[<p>本文纪录不使用 Android Studio 构建 Flutter 开发环境，通过命令行工具更灵活。</p><a id="more"></a><h1 id="获取-Flutter-SDK"><a href="#获取-Flutter-SDK" class="headerlink" title="获取 Flutter SDK"></a>获取 Flutter SDK</h1><p>我们先到 <a href="https://flutter.io/docs/get-started/install" target="_blank" rel="noopener">Flutter 官网</a> 下载对应的 SDK。</p><ul><li><a href="https://flutter.io/docs/get-started/install/windows" target="_blank" rel="noopener">Windows</a></li><li><a href="https://flutter.io/docs/get-started/install/windows" target="_blank" rel="noopener">Mac</a></li><li><a href="https://flutter.io/docs/get-started/install/linux" target="_blank" rel="noopener">Linux</a></li></ul><h1 id="获取-Android-SDK"><a href="#获取-Android-SDK" class="headerlink" title="获取 Android SDK"></a>获取 Android SDK</h1><p>然后到安卓官网，<a href="https://developer.android.com/studio/" target="_blank" rel="noopener">下载 Android SDK</a>，根据你的系统安装对应的 SDK 包。</p><blockquote><p>注意：下载命令行工具</p></blockquote><h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><p>现在我们需要设置环境变量以便在控制台使用 SDK 相关的命令。</p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>打开 <code>cmd</code> 执行下面的命令</p><pre><code>setx ANDROID_HOME &quot;C:\Android&quot;setx JAVA_HOME &quot;C:\Java\jdk1.8.0_202&quot;setx PATH &quot;%PATH%C:\flutter\bin&quot;setx PATH &quot;%PATH%%ANDROID_HOME%\tools\bin&quot;</code></pre><blockquote><p>注意：AMD CPU 的电脑需要启动 Control Panel -&gt; Programs -&gt; Hyper-V &amp; Windows Hypervisor Platform，否则会报以下错误</p><p>emulator: ERROR: x86_64 emulation currently requires hardware acceleration! Please ensure Windows Hypervisor Platform (WHPX) is properly installed and usable. CPU acceleration status: Android Emulator requires an Intel processor with VT-x and NX support. Your CPU: ‘AuthenticAMD’</p></blockquote><h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><p>在 <code>$HOME/.bash_profile</code> 中添加以下内容</p><pre><code>export ANDROID_HOME=~/androidexport PATH=${PATH}:${ANDROID_HOME}/toolsexport PATH=${PATH}:${ANDROID_HOME}/tools/binexport PATH=${PATH}:$HOME/flutter/bin</code></pre><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>在 <code>$HOME/.bash_profile</code> 中添加以下内容</p><pre><code>export ANDROID_HOME=$HOME/Documents/androidexport JAVA_HOME=/usr/java/jdk1.8.0_202-amd64export PATH=$PATH:$HOME/Documents/flutter/binexport PATH=$PATH:$HOME/Documents/android/toolsexport PATH=$PATH:$HOME/Documents/android/tools/bin</code></pre><h2 id="测试-Flutter-可以使用"><a href="#测试-Flutter-可以使用" class="headerlink" title="测试 Flutter 可以使用"></a>测试 Flutter 可以使用</h2><pre><code>flutter --versionFlutter 1.0.0 • channel stable • https://github.com/flutter/flutter.gitFramework • revision 5391447fae (10 weeks ago) • 2018-11-29 19:41:26 -0800Engine • revision 7375a0f414Tools • Dart 2.1.0 (build 2.1.0-dev.9.4 f9ebf21297)</code></pre><h2 id="测试-sdkmanager-可以使用"><a href="#测试-sdkmanager-可以使用" class="headerlink" title="测试 sdkmanager 可以使用"></a>测试 sdkmanager 可以使用</h2><pre><code>sdkmanager --version26.1.1</code></pre><h1 id="创建模拟器"><a href="#创建模拟器" class="headerlink" title="创建模拟器"></a>创建模拟器</h1><p>在开发项目之前我们还需要安装模拟器。</p><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p>开发安卓我们需要安装这些模块</p><ul><li>build-tools;28.0.3</li><li>emulator</li><li>platform-tools</li><li>platforms;android-28</li><li>system-images;android-28;default;x86_64</li></ul><p>使用 <code>sdkmanager &quot;&lt;item&gt;&quot;</code> 安装，安装完毕后我们用以下命令创建一个安卓模拟器</p><pre><code>avdmanager create avd -n ryuu -k &quot;system-images;android-28;default;x86_64&quot; -d 29</code></pre><p>查看安卓模拟器是否创建成功</p><pre><code>flutter emulators1 available emulator:ryuu • 4.65in 720p (Galaxy Nexus) • GenericTo run an emulator, run &#39;flutter emulators --launch &lt;emulator id&gt;&#39;.To create a new emulator, run &#39;flutter emulators --create [--name xyz]&#39;.You can find more information on managing emulators at the links below:  https://developer.android.com/studio/run/managing-avds  https://developer.android.com/studio/command-line/avdmanager</code></pre><p>然后执行下面的命令运行安卓模拟器</p><pre><code>flutter emulators --launch ryuu</code></pre><p>模拟器界面如下</p><p><img src="./android-emulator.png" alt="android-emulator"></p><h2 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h2><p>我们先到官网下载 <a href="https://developer.apple.com/xcode/download/" target="_blank" rel="noopener">Xcode</a> 并安装，然后根据 <code>fluter doctor</code> 的提示安装相应模块</p><pre><code>brew updatebrew install --HEAD usbmuxdbrew link usbmuxdbrew install --HEAD libimobiledevicebrew install ideviceinstallerbrew install ios-deploybrew install cocoapodspod setup</code></pre><p>模块安装好之后，我们可以用以下命令打开 IOS 模拟器</p><pre><code>open -a Simulator</code></pre><p>模拟器界面如下</p><p><img src="./ios-emulator.png" alt="ios-emulator"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://flutter.io/" target="_blank" rel="noopener">https://flutter.io/</a></li><li><a href="https://developer.android.com/studio/#downloads" target="_blank" rel="noopener">https://developer.android.com/studio/#downloads</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> dart </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOS 微信 webview 中 overflow 值 auto 不能正常工作</title>
      <link href="/2018/11/29/ios-webview-overflow-auto-is-not-work/"/>
      <url>/2018/11/29/ios-webview-overflow-auto-is-not-work/</url>
      
        <content type="html"><![CDATA[<p>在 IOS 系统中，微信 webview 中有时候页面加载完成，但是 <code>overflow: auto</code> 属性失效。</p><a id="more"></a><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><h2 id="Safari-浏览器的渲染流程"><a href="#Safari-浏览器的渲染流程" class="headerlink" title="Safari 浏览器的渲染流程"></a>Safari 浏览器的渲染流程</h2><ol><li>构建 DOM Tree</li><li>构建 CSS Rule Tree</li><li>根据 DOM 和 CSS Tree 来构建 Render Tree</li><li>根据 Render Tree 计算页面的 Layout</li><li>Render 页面</li></ol><p>在第三步和第四部的时候，Safari 浏览器在构建 Render Tree 的时候，会预先找到相应的 <code>overflow: scroll</code> 元素，在计算页面 <code>Layout</code> 的时候，会计算父元素的高度与子元素的高度，若子元素高于父元素，则在 Render 页面时为其建立一个原生的 ScrollView。 也就是说在计算页面 <code>Layout</code> 的时候，子元素高度小于父元素高度则不会建立 ScrollView，也就不会有滚动条。</p><p><img src="./problem.gif" alt="problem"></p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>根据上述原理，得出解决方案，即在计算页面 <code>Layout</code> 时让子元素的高度大于父元素的高度，使其建立 ScrollView。</p><pre class=" language-html"><code class="language-html">Layout  .index    .inner      ...      div(style="height: calc(.5rem)")</code></pre><p>由于我的 <code>.inner</code> 元素高度为 <code>100%</code>，内部有许多异步渲染组件，由于数据返回延迟导致计算页面 <code>Layout</code> 时子元素高度小于等于父元素高度，无法建立 ScrollView。因此我在最后面加入一个临时元素设置一个高度，使其在组件渲染前将 <code>.inner</code> 的高度撑开并建立 ScrollView。</p><p><img src="./solve.gif" alt="solve"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://segmentfault.com/a/1190000016408566" target="_blank" rel="noopener">https://segmentfault.com/a/1190000016408566</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOS 微信 webview 中使用 alert 时不显示当前域名</title>
      <link href="/2018/11/28/do-not-show-host-in-ios-wx-webview-with-alert/"/>
      <url>/2018/11/28/do-not-show-host-in-ios-wx-webview-with-alert/</url>
      
        <content type="html"><![CDATA[<p>在 IOS 微信中，系统 alert 会在对话框上自动添加网址，对于用户体验不是很友好。</p><a id="more"></a><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>调用系统 alert 时，系统默认带上当前网址的域名，用户体验不好</p><p><img src="./before.gif" alt="before"></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>我们可以重写 <code>alert</code> 方法，利用 iframe 中子 <code>window</code> 的 <code>alert</code> 方法</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>alert <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span>  iframe<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span>  iframe<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> <span class="token string">'data:text/plain'</span><span class="token punctuation">)</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span>  frames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  iframe<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><img src="./after.gif" alt="after"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://blog.csdn.net/kirsten_z/article/details/79696220" target="_blank" rel="noopener">https://blog.csdn.net/kirsten_z/article/details/79696220</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOS 中 input 输入框的一些怪异行为</title>
      <link href="/2018/11/23/some-quirks-of-ios-input/"/>
      <url>/2018/11/23/some-quirks-of-ios-input/</url>
      
        <content type="html"><![CDATA[<p>最近有一些项目在 IOS 系统中出现了一些奇怪的问题，这些问题是关于 &lt;input&gt; 标签的一些怪异行为。</p><a id="more"></a><h1 id="IOS-键盘左上角切换表单元素"><a href="#IOS-键盘左上角切换表单元素" class="headerlink" title="IOS 键盘左上角切换表单元素"></a>IOS 键盘左上角切换表单元素</h1><p>IOS 会自动检测页面的表单元素自动并分配 tabindex 索引让用户可以快速切换表单元素，但这也会造成一些网页开发上的问题。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>页面中存在表单元素</p><p><img src="./form.png" alt="form"></p><p>页面浮层也是一个表单</p><p><img src="./modalbox-focus.png" alt="modalbox-focus"></p><p>这时候点击左上角的 <code>上</code> <code>下</code> 按钮</p><p><img src="./keyboard.png" alt="keyboard"></p><p>产生光标定位到下层表单元素中</p><p><img src="./modalbox.png" alt="modalbox"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>经过搜索资料后，得出解决方案，<em>在表单元素上面添加 <code>tabindex=&quot;-1&quot;</code> 属性</em></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>这样 IOS 左上角的 <code>上</code> <code>下</code> 箭头就被禁用了，也就修复了该问题</p><p><img src="./ios-input-quirks-fixed.png" alt="ios-input-quirks-fixed"></p><h1 id="IOS-禁止输入中文"><a href="#IOS-禁止输入中文" class="headerlink" title="IOS 禁止输入中文"></a>IOS 禁止输入中文</h1><p>我们在做验证码的时候，希望用户只能输入英文和数字，但在 IOS 中并不能很好的实现这个功能。</p><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><p>页面中 <code>&lt;input&gt;</code> 设置了 <code>maxlength</code> 限制 4 个字符，<code>oninput</code> 事件中用于移除中文字符，但是在 IOS 中没有效果</p><p><img src="./can-input-chinese.png" alt="can-input-chinese"></p><h2 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h2><p>利用 <code>compositionstart</code>，<code>compositionend</code>，<code>input</code></p><pre class=" language-js"><code class="language-js">inputElement<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'compositionstart'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>lock <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>regExpRule <span class="token operator">=</span> <span class="token regex">/[^0-9a-zA-Z]/g</span><span class="token punctuation">}</span><span class="token punctuation">)</span>inputElement<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'compositionend'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>lock <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>regExpRule<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>inputElement<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>regExpRule<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> input </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端设置了 autofocus 属性的 input 标签无法打开输入法键盘</title>
      <link href="/2018/08/23/fail-to-open-keyboard-with-autofocus-of-input/"/>
      <url>/2018/08/23/fail-to-open-keyboard-with-autofocus-of-input/</url>
      
        <content type="html"><![CDATA[<p>众所周知 <code>input</code> 标签有一个 <code>autofocus</code> 属性，用于对 <code>input</code> 标签执行自动获取焦点的行为。但是在移动端，由于移动设备的行为设计，设置了 <code>autofocus</code> 属性的 <code>input</code> 标签并不能如预期的那样自动获取焦点并弹出输入法键盘，在 iphone 手机中甚至无法自动获取焦点。</p><a id="more"></a><h1 id="失败的案例"><a href="#失败的案例" class="headerlink" title="失败的案例"></a>失败的案例</h1><p><img src="./android-wechat-webview.jpg" alt="Android-Wechat-Webview"></p><p>我们可以看到在 Android 中虽然 <code>input</code> 标签自动获取了焦点，但是并没有自动弹出输入框。演示代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ltr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1, maximum-scale<span class="token punctuation">=</span>1, user-scalable<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>移动端设置了 autofocus 属性的 input 标签无法打开输入法键盘<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myInput<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>输入密码<span class="token punctuation">"</span></span> <span class="token attr-name">autofocus</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>我的解决方案是通过用户行为来触发 <code>input</code> 标签的焦点事件，从而正确弹出输入框。</p><p><img src="./success-demo-android-wechat-webview.jpg" alt="success-demo-android-wechat-webview"></p><p>当用户点击 <code>重新输入密码</code> 时即可弹出输入框了。</p><p><img src="./success-demo-android-wechat-webview-2.jpg" alt="success-demo-android-wechat-webview-2"></p><p>演示代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ltr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1, maximum-scale<span class="token punctuation">=</span>1, user-scalable<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://res.wx.qq.com/open/libs/weui/1.1.3/weui.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myInput<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>输入密码<span class="token punctuation">"</span></span> <span class="token attr-name">autofocus</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://res.wx.qq.com/open/libs/weuijs/1.1.4/weui.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">var</span> myInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myInput'</span><span class="token punctuation">)</span>      weui<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'只有用户行为才能在 input 元素触发 focus() 事件时调起键盘'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">'提示：'</span><span class="token punctuation">,</span>        buttons<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            label<span class="token punctuation">:</span> <span class="token string">'我知道了'</span><span class="token punctuation">,</span>            type<span class="token punctuation">:</span> <span class="token string">'default'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            label<span class="token punctuation">:</span> <span class="token string">'重新输入密码'</span><span class="token punctuation">,</span>            onClick<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              myInput<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://stackoverflow.com/questions/23722816/autofocus-text-field-on-mobile-but-no-keyboard" target="_blank" rel="noopener">https://stackoverflow.com/questions/23722816/autofocus-text-field-on-mobile-but-no-keyboard</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> input </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解读 Layabox 示例 10</title>
      <link href="/2018/06/21/read-layabox-demo-10/"/>
      <url>/2018/06/21/read-layabox-demo-10/</url>
      
        <content type="html"><![CDATA[<p>本文解读第十个 layabox 引擎示例（<code>切换纹理</code>）</p><a id="more"></a><h1 id="示例效果"><a href="#示例效果" class="headerlink" title="示例效果"></a>示例效果</h1><p><img src="./result.gif" alt="result"></p><h1 id="概念简介"><a href="#概念简介" class="headerlink" title="概念简介"></a>概念简介</h1><p>本示例中的概念均在示例一中描述。<a href="/2018/05/25/read-layabox-demo-1/#%E6%A6%82%E5%BF%B5%E7%AE%80%E4%BB%8B">查看</a></p><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>en<span class="token punctuation">'</span></span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>ltr<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>utf-8<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>切换纹理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>./LayaAirJS_1.7.19.1_beta/js/libs/laya.core.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>./LayaAirJS_1.7.19.1_beta/js/libs/laya.webgl.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> Sprite <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Sprite        <span class="token keyword">var</span> Stage <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Stage        <span class="token keyword">var</span> Texture <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Texture        <span class="token keyword">var</span> Browser <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Browser        <span class="token keyword">var</span> Handler <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Handler        <span class="token keyword">var</span> WebGL <span class="token operator">=</span> Laya<span class="token punctuation">.</span>WebGL        <span class="token keyword">var</span> texture1 <span class="token operator">=</span> <span class="token string">'./res/apes/monkey2.png'</span>        <span class="token keyword">var</span> texture2 <span class="token operator">=</span> <span class="token string">'./res/apes/monkey3.png'</span>        <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">var</span> ape        <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 不支持WebGL时自动切换至Canvas</span>          Laya<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Browser<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span> Browser<span class="token punctuation">.</span>clientHeight<span class="token punctuation">,</span> WebGL<span class="token punctuation">)</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>alignV <span class="token operator">=</span> Stage<span class="token punctuation">.</span>ALIGN_MIDDLE          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>alignH <span class="token operator">=</span> Stage<span class="token punctuation">.</span>ALIGN_CENTER          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>scaleMode <span class="token operator">=</span> <span class="token string">'showall'</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>bgColor <span class="token operator">=</span> <span class="token string">'#232628'</span>          <span class="token comment" spellcheck="true">// 加载资源</span>          Laya<span class="token punctuation">.</span>loader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">[</span> texture1<span class="token punctuation">,</span> texture2 <span class="token punctuation">]</span><span class="token punctuation">,</span> Handler<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> onAssetsLoaded<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">onAssetsLoaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 实例化一个猩猩</span>          ape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 设置轴心点</span>          ape<span class="token punctuation">.</span><span class="token function">pivot</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 设置坐标位置</span>          ape<span class="token punctuation">.</span><span class="token function">pos</span><span class="token punctuation">(</span>Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 添加到舞台中</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>ape<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 显示默认纹理</span>          <span class="token function">switchTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 点击时切换纹理</span>          ape<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> switchTexture<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">switchTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> textureUrl <span class="token operator">=</span> <span class="token punctuation">(</span>flag <span class="token operator">=</span> <span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token operator">?</span> texture1 <span class="token punctuation">:</span> texture2          <span class="token comment" spellcheck="true">// 清空上一次绘制的图像</span>          ape<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 加载新图像</span>          <span class="token keyword">var</span> texture <span class="token operator">=</span> Laya<span class="token punctuation">.</span>loader<span class="token punctuation">.</span><span class="token function">getRes</span><span class="token punctuation">(</span>textureUrl<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 绘制纹理</span>          ape<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span><span class="token function">drawTexture</span><span class="token punctuation">(</span>texture<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 重置绘制图像的宽高</span>          ape<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>texture<span class="token punctuation">.</span>width<span class="token punctuation">,</span> texture<span class="token punctuation">.</span>height<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.layabox.com/" target="_blank" rel="noopener">https://www.layabox.com</a></li><li><a href="https://layaair.ldc.layabox.com/demo/?category=2d&group=Sprite&name=SwitchTexture" target="_blank" rel="noopener">https://layaair.ldc.layabox.com/demo/?category=2d&amp;group=Sprite&amp;name=SwitchTexture</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> layabox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解读 Layabox 示例 09</title>
      <link href="/2018/06/21/read-layabox-demo-9/"/>
      <url>/2018/06/21/read-layabox-demo-9/</url>
      
        <content type="html"><![CDATA[<p>本文解读第八个 layabox 引擎示例（<code>轴心点</code>）</p><a id="more"></a><h1 id="示例效果"><a href="#示例效果" class="headerlink" title="示例效果"></a>示例效果</h1><p><img src="./result.gif" alt="result"></p><h1 id="概念简介"><a href="#概念简介" class="headerlink" title="概念简介"></a>概念简介</h1><p>本示例中的概念均在示例一中描述。<a href="/2018/05/25/read-layabox-demo-1/#%E6%A6%82%E5%BF%B5%E7%AE%80%E4%BB%8B">查看</a></p><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>en<span class="token punctuation">'</span></span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>ltr<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>utf-8<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>轴心点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>./LayaAirJS_1.7.19.1_beta/js/libs/laya.core.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>./LayaAirJS_1.7.19.1_beta/js/libs/laya.webgl.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> Sprite <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Sprite        <span class="token keyword">var</span> Stage <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Stage        <span class="token keyword">var</span> Browser <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Browser        <span class="token keyword">var</span> WebGL <span class="token operator">=</span> Laya<span class="token punctuation">.</span>WebGL        <span class="token keyword">var</span> sp1<span class="token punctuation">,</span> sp2        <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 不支持WebGL时自动切换至Canvas</span>          Laya<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Browser<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span> Browser<span class="token punctuation">.</span>clientHeight<span class="token punctuation">,</span> WebGL<span class="token punctuation">)</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>alignV <span class="token operator">=</span> Stage<span class="token punctuation">.</span>ALIGN_MIDDLE          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>alignH <span class="token operator">=</span> Stage<span class="token punctuation">.</span>ALIGN_CENTER          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>scaleMode <span class="token operator">=</span> <span class="token string">'showall'</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>bgColor <span class="token operator">=</span> <span class="token string">'#232628'</span>          <span class="token function">createApes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">createApes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 设置间隔距离 300</span>          <span class="token keyword">var</span> gap <span class="token operator">=</span> <span class="token number">300</span>          <span class="token comment" spellcheck="true">// 加载猩猩 1，并设置轴心点</span>          sp1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          sp1<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token string">'./res/apes/monkey2.png'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>          sp1<span class="token punctuation">.</span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>width <span class="token operator">-</span> gap<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>          sp1<span class="token punctuation">.</span><span class="token function">pivot</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">)</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>sp1<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 加载猩猩 2，不设置轴心点，默认为左上角</span>          sp2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          sp2<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token string">'./res/apes/monkey2.png'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>          sp2<span class="token punctuation">.</span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>width <span class="token operator">+</span> gap<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>sp2<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 添加逐帧动画</span>          Laya<span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">frameLoop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> animate<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 以轴心点旋转</span>          sp1<span class="token punctuation">.</span>rotation <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span>          <span class="token comment" spellcheck="true">// 以左上角旋转</span>          sp2<span class="token punctuation">.</span>rotation <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.layabox.com/" target="_blank" rel="noopener">https://www.layabox.com</a></li><li><a href="https://layaair.ldc.layabox.com/demo/?category=2d&group=Sprite&name=Pivot" target="_blank" rel="noopener">https://layaair.ldc.layabox.com/demo/?category=2d&amp;group=Sprite&amp;name=Pivot</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> layabox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解读 Layabox 示例 08</title>
      <link href="/2018/06/21/read-layabox-demo-8/"/>
      <url>/2018/06/21/read-layabox-demo-8/</url>
      
        <content type="html"><![CDATA[<p>本文解读第八个 layabox 引擎示例（<code>节点控制</code>）</p><a id="more"></a><h1 id="示例效果"><a href="#示例效果" class="headerlink" title="示例效果"></a>示例效果</h1><p><img src="./result.gif" alt="result"></p><h1 id="概念简介"><a href="#概念简介" class="headerlink" title="概念简介"></a>概念简介</h1><p>本示例中的概念均在示例一中描述。<a href="/2018/05/25/read-layabox-demo-1/#%E6%A6%82%E5%BF%B5%E7%AE%80%E4%BB%8B">查看</a></p><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>en<span class="token punctuation">'</span></span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>ltr<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>utf-8<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>节点控制<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>./LayaAirJS_1.7.19.1_beta/js/libs/laya.core.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>./LayaAirJS_1.7.19.1_beta/js/libs/laya.webgl.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> Sprite <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Sprite        <span class="token keyword">var</span> Stage <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Stage        <span class="token keyword">var</span> Browser <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Browser        <span class="token keyword">var</span> WebGL <span class="token operator">=</span> Laya<span class="token punctuation">.</span>WebGL        <span class="token keyword">var</span> ape1        <span class="token keyword">var</span> ape2        <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 不支持WebGL时自动切换至Canvas</span>          Laya<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Browser<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span> Browser<span class="token punctuation">.</span>clientHeight<span class="token punctuation">,</span> WebGL<span class="token punctuation">)</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>alignV <span class="token operator">=</span> Stage<span class="token punctuation">.</span>ALIGN_MIDDLE          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>alignH <span class="token operator">=</span> Stage<span class="token punctuation">.</span>ALIGN_CENTER          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>scaleMode <span class="token operator">=</span> <span class="token string">'showall'</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>bgColor <span class="token operator">=</span> <span class="token string">'#232628'</span>          <span class="token function">createApes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">createApes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 加载两只猩猩</span>          ape1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          ape2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          ape1<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token string">'./res/apes/monkey2.png'</span><span class="token punctuation">)</span>          ape2<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token string">'./res/apes/monkey2.png'</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 设置中心点为 55, 72，即图像大小的 1/2</span>          ape1<span class="token punctuation">.</span><span class="token function">pivot</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">)</span>          ape2<span class="token punctuation">.</span><span class="token function">pivot</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 猩猩 1 放在舞台中间位置</span>          ape1<span class="token punctuation">.</span><span class="token function">pos</span><span class="token punctuation">(</span>Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 猩猩 2 放在 x 轴 200，y 轴 0 的位置</span>          ape2<span class="token punctuation">.</span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 猩猩 1 添加到舞台中</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>ape1<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 猩猩 2 添加为猩猩 1 的子集</span>          ape1<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>ape2<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 添加逐帧动画</span>          Laya<span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">frameLoop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> animate<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 由于 ape2 是 ape1 的子集，所以 ape1 旋转时 ape2 跟着一起旋转</span>          ape1<span class="token punctuation">.</span>rotation <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span>          <span class="token comment" spellcheck="true">// ape2 旋转不影响 ape1</span>          ape2<span class="token punctuation">.</span>rotation <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">4</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.layabox.com/" target="_blank" rel="noopener">https://www.layabox.com</a></li><li><a href="https://layaair.ldc.layabox.com/demo/?category=2d&group=Sprite&name=NodeControl" target="_blank" rel="noopener">https://layaair.ldc.layabox.com/demo/?category=2d&amp;group=Sprite&amp;name=NodeControl</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> layabox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解读 Layabox 示例 07</title>
      <link href="/2018/06/19/read-layabox-demo-7/"/>
      <url>/2018/06/19/read-layabox-demo-7/</url>
      
        <content type="html"><![CDATA[<p>本文解读第七个 layabox 引擎示例（<code>缓存为静态图像</code>）</p><a id="more"></a><h1 id="示例效果"><a href="#示例效果" class="headerlink" title="示例效果"></a>示例效果</h1><p><img src="./result.png" alt="result"></p><h1 id="概念简介"><a href="#概念简介" class="headerlink" title="概念简介"></a>概念简介</h1><h2 id="Text-类"><a href="#Text-类" class="headerlink" title="Text 类"></a>Text 类</h2><p>Text 类用于创建显示对象以显示文本。<a href="https://layaair.ldc.layabox.com/api/?category=Core&class=laya.display.Text" target="_blank" rel="noopener">API 详情</a></p><h2 id="Stat-类"><a href="#Stat-类" class="headerlink" title="Stat 类"></a>Stat 类</h2><p>Stat 类是一个性能统计面板，可以实时更新相关的性能参数。<a href="https://layaair.ldc.layabox.com/api/?category=Core&class=laya.utils.Stat" target="_blank" rel="noopener">API 详情</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>其余概念均在示例一中描述。<a href="/2018/05/25/read-layabox-demo-1/#%E6%A6%82%E5%BF%B5%E7%AE%80%E4%BB%8B">查看</a></p><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>en<span class="token punctuation">'</span></span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>ltr<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>utf-8<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>缓存为静态图像<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>./LayaAirJS_1.7.19.1_beta/js/libs/laya.core.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>./LayaAirJS_1.7.19.1_beta/js/libs/laya.webgl.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> Sprite <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Sprite        <span class="token keyword">var</span> Stage <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Stage        <span class="token keyword">var</span> Text <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Text        <span class="token keyword">var</span> Stat <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Stat        <span class="token keyword">var</span> WebGL <span class="token operator">=</span> Laya<span class="token punctuation">.</span>WebGL        <span class="token keyword">var</span> sp        <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 不支持WebGL时自动切换至Canvas</span>          Laya<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">,</span> WebGL<span class="token punctuation">)</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>alignV <span class="token operator">=</span> Stage<span class="token punctuation">.</span>ALIGN_MIDDLE          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>alignH <span class="token operator">=</span> Stage<span class="token punctuation">.</span>ALIGN_CENTER          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>scaleMode <span class="token operator">=</span> <span class="token string">'showall'</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>bgColor <span class="token operator">=</span> <span class="token string">'#232628'</span>          <span class="token comment" spellcheck="true">// 显示性能统计信息</span>          Stat<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> textBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 随机摆放 1000 个文本</span>          <span class="token keyword">var</span> text          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 设置文本字体大小为 20 px</span>            text<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token number">20</span>            <span class="token comment" spellcheck="true">// 设置文本内容为随机整数</span>            text<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 设置文本旋转角度为随机角度</span>            text<span class="token punctuation">.</span>rotation <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">360</span>            <span class="token comment" spellcheck="true">// 设置文本颜色</span>            text<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'#CCCCCC'</span>            text<span class="token punctuation">.</span>x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>width            text<span class="token punctuation">.</span>y <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>height            textBox<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 缓存为静态图像</span>          textBox<span class="token punctuation">.</span>cacheAsBitmap <span class="token operator">=</span> <span class="token boolean">true</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>textBox<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.layabox.com/" target="_blank" rel="noopener">https://www.layabox.com</a></li><li><a href="https://layaair.ldc.layabox.com/demo/?category=2d&group=Sprite&name=Cache" target="_blank" rel="noopener">https://layaair.ldc.layabox.com/demo/?category=2d&amp;group=Sprite&amp;name=Cache</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> layabox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解读 Layabox 示例 06</title>
      <link href="/2018/06/14/read-layabox-demo-6/"/>
      <url>/2018/06/14/read-layabox-demo-6/</url>
      
        <content type="html"><![CDATA[<p>本文解读第六个 layabox 引擎示例（<code>绘制各种形状</code>）</p><a id="more"></a><h1 id="示例效果"><a href="#示例效果" class="headerlink" title="示例效果"></a>示例效果</h1><p><img src="./result.png" alt="result"></p><h1 id="概念简介"><a href="#概念简介" class="headerlink" title="概念简介"></a>概念简介</h1><p>本示例中的概念均在示例一中描述。<a href="/2018/05/25/read-layabox-demo-1/#%E6%A6%82%E5%BF%B5%E7%AE%80%E4%BB%8B">查看</a></p><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>en<span class="token punctuation">'</span></span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>ltr<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>utf-8<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>遮罩-绘制各种形状<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>./LayaAirJS_1.7.19.1_beta/js/libs/laya.core.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>./LayaAirJS_1.7.19.1_beta/js/libs/laya.webgl.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> Sprite <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Sprite        <span class="token keyword">var</span> Stage <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Stage        <span class="token keyword">var</span> WebGL <span class="token operator">=</span> Laya<span class="token punctuation">.</span>WebGL        <span class="token keyword">var</span> sp        <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 不支持WebGL时自动切换至Canvas</span>          Laya<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">740</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> WebGL<span class="token punctuation">)</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>alignV <span class="token operator">=</span> Stage<span class="token punctuation">.</span>ALIGN_MIDDLE          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>alignH <span class="token operator">=</span> Stage<span class="token punctuation">.</span>ALIGN_CENTER          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>scaleMode <span class="token operator">=</span> <span class="token string">'showall'</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>bgColor <span class="token operator">=</span> <span class="token string">'#232628'</span>          <span class="token function">drawSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">drawSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          sp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>sp<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 画线</span>          sp<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">146</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token string">'#ff0000'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 画连续直线</span>          sp<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span><span class="token function">drawLines</span><span class="token punctuation">(</span><span class="token number">176</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">156</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'#ff0000'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 画曲线</span>          sp<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span><span class="token function">drawCurves</span><span class="token punctuation">(</span><span class="token number">352</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">136</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">156</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'#ff0000'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 画矩形</span>          sp<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">166</span><span class="token punctuation">,</span> <span class="token number">166</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token string">'#ffff00'</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 画多边形</span>          sp<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span><span class="token function">drawPoly</span><span class="token punctuation">(</span><span class="token number">264</span><span class="token punctuation">,</span> <span class="token number">166</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">78.48</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">93.48</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">18.48</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'#ffff00'</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 画三角形</span>          sp<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span><span class="token function">drawPoly</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">166</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'#ffff00'</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 画圆</span>          sp<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">332</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">'#00ffff'</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 画扇形</span>          sp<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span><span class="token function">drawPie</span><span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">290</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token string">'#00ffff'</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 绘制圆角矩形，自定义路径</span>          sp<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span><span class="token function">drawPath</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">310</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>            <span class="token punctuation">[</span> <span class="token string">'moveTo'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span> <span class="token string">'lineTo'</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span> <span class="token string">'arcTo'</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span> <span class="token string">'lineTo'</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">55</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span> <span class="token string">'arcTo'</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span> <span class="token string">'lineTo'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">60</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span> <span class="token string">'arcTo'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span> <span class="token string">'lineTo'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span> <span class="token string">'arcTo'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span> <span class="token string">'closePath'</span> <span class="token punctuation">]</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            fillStyle<span class="token punctuation">:</span> <span class="token string">'#00ffff'</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.layabox.com/" target="_blank" rel="noopener">https://www.layabox.com</a></li><li><a href="https://layaair.ldc.layabox.com/demo/?category=2d&group=Sprite&name=DrawShapes" target="_blank" rel="noopener">https://layaair.ldc.layabox.com/demo/?category=2d&amp;group=Sprite&amp;name=DrawShapes</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> layabox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fedora 系统中安装 travis</title>
      <link href="/2018/06/13/install-travis-on-fedora/"/>
      <url>/2018/06/13/install-travis-on-fedora/</url>
      
        <content type="html"><![CDATA[<p>在 fedora 系统中安装 travis-cli 时报错，本文记录下解决方案</p><a id="more"></a><h1 id="安装-ruby"><a href="#安装-ruby" class="headerlink" title="安装 ruby"></a>安装 ruby</h1><p>根据官方文档说明，安装 travis 需要安装 ruby，ruby-devel</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> dnf <span class="token function">install</span> -y ruby ruby-develruby -v</code></pre><h1 id="安装-travis"><a href="#安装-travis" class="headerlink" title="安装 travis"></a>安装 travis</h1><p>根据官方文档安装 travis</p><pre class=" language-bash"><code class="language-bash">gem <span class="token function">install</span> travis -v 1.8.8 --no-rdoc --no-ri</code></pre><p>这时候会报一个关于 <a href="https://github.com/travis-ci/travis.rb/issues/558" target="_blank" rel="noopener"><code>Failed to build gem native extension</code></a> 的错误。</p><pre class=" language-bash"><code class="language-bash">Building native extensions. This could take a while<span class="token punctuation">..</span>.ERROR:  Error installing travis:ERROR: Failed to build gem native extension.<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><p>我们通过安装 <code>libffi-devel</code> 和 <code>redhat-rpm-config</code> 来解决这个问题</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> dnf <span class="token function">install</span> libffi-devel redhat-rpm-config</code></pre><p>再次安装 travis，结果如下</p><pre class=" language-bash"><code class="language-bash">gem <span class="token function">install</span> travis -v 1.8.8 --no-rdoc --no-riFetching: travis-1.8.8.gem <span class="token punctuation">(</span>100%<span class="token punctuation">)</span>Successfully installed travis-1.8.81 gem installed</code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://github.com/travis-ci/travis.rb/issues/602" target="_blank" rel="noopener">https://github.com/travis-ci/travis.rb/issues/602</a></li><li><a href="https://github.com/travis-ci/travis.rb/issues/558" target="_blank" rel="noopener">https://github.com/travis-ci/travis.rb/issues/558</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fedora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解读 Layabox 示例 05</title>
      <link href="/2018/06/09/read-layabox-demo-5/"/>
      <url>/2018/06/09/read-layabox-demo-5/</url>
      
        <content type="html"><![CDATA[<p>本文解读第五个 layabox 引擎示例（<code>遮罩放大镜</code>）</p><a id="more"></a><h1 id="示例效果"><a href="#示例效果" class="headerlink" title="示例效果"></a>示例效果</h1><p><img src="./result.gif" alt="result"></p><h1 id="概念简介"><a href="#概念简介" class="headerlink" title="概念简介"></a>概念简介</h1><p>本示例中的概念均在示例一中描述。<a href="/2018/05/25/read-layabox-demo-1/#%E6%A6%82%E5%BF%B5%E7%AE%80%E4%BB%8B">查看</a></p><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ltr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>遮罩-放大镜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./LayaAirJS_1.7.19.1_beta/js/libs/laya.core.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./LayaAirJS_1.7.19.1_beta/js/libs/laya.webgl.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> Sprite <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Sprite        <span class="token keyword">var</span> Stage <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Stage        <span class="token keyword">var</span> Browser <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Browser        <span class="token keyword">var</span> Handler <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Handler        <span class="token keyword">var</span> WebGL <span class="token operator">=</span> Laya<span class="token punctuation">.</span>WebGL        <span class="token keyword">var</span> maskSp        <span class="token keyword">var</span> bg2        <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 不支持WebGL时自动切换至Canvas</span>          Laya<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">1136</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">,</span> WebGL<span class="token punctuation">)</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>alignV <span class="token operator">=</span> Stage<span class="token punctuation">.</span>ALIGN_MIDDLE          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>alignH <span class="token operator">=</span> Stage<span class="token punctuation">.</span>ALIGN_CENTER          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>scaleMode <span class="token operator">=</span> <span class="token string">"showall"</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>bgColor <span class="token operator">=</span> <span class="token string">"#232628"</span>          <span class="token comment" spellcheck="true">// 加载背景</span>          Laya<span class="token punctuation">.</span>loader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'./res/bg2.png'</span><span class="token punctuation">,</span> Handler<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> setup<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 定义背景实例</span>          <span class="token keyword">var</span> bg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 加载背景图片</span>          bg<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token string">'./res/bg2.png'</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 添加背景到舞台中</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>bg<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 定义背景 2 实例</span>          bg2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 加载背景图片</span>          bg2<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token string">'./res/bg2.png'</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 添加背景 2 到舞台中</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>bg2<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 设置背景 2 的比例</span>          bg2<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 创建mask</span>          maskSp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 加载 mask 图片</span>          maskSp<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token string">'./res/mask.png'</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 设置 maskSp 中心点（mask.png 100 * 100）</span>          maskSp<span class="token punctuation">.</span><span class="token function">pivot</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 设置 bg2 的 mask 遮罩为 maskSp</span>          <span class="token comment" spellcheck="true">// mask 的详细介绍：https://layaair.ldc.layabox.com/api/?category=Core&amp;class=laya.display.Sprite#mask</span>          bg2<span class="token punctuation">.</span>mask <span class="token operator">=</span> maskSp          <span class="token comment" spellcheck="true">// 监听舞台的 mousemove 事件</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> onMouseMove<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">onMouseMove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 设置 bg2 坐标，偏移基数为 （bg2 scale 基数 - 1）即 (3 - 1) = 2</span>          bg2<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token operator">-</span>Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>mouseX <span class="token operator">*</span> <span class="token number">2</span>          bg2<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">-</span>Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>mouseY <span class="token operator">*</span> <span class="token number">2</span>          <span class="token comment" spellcheck="true">// 设置遮罩坐标</span>          maskSp<span class="token punctuation">.</span>x <span class="token operator">=</span> Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>mouseX          maskSp<span class="token punctuation">.</span>y <span class="token operator">=</span> Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>mouseY        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.layabox.com/" target="_blank" rel="noopener">https://www.layabox.com</a></li><li><a href="https://layaair.ldc.layabox.com/demo/?category=2d&group=Sprite&name=MagnifyingGlass" target="_blank" rel="noopener">https://layaair.ldc.layabox.com/demo/?category=2d&amp;group=Sprite&amp;name=MagnifyingGlass</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> layabox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解读 Layabox 示例 04</title>
      <link href="/2018/06/09/read-layabox-demo-4/"/>
      <url>/2018/06/09/read-layabox-demo-4/</url>
      
        <content type="html"><![CDATA[<p>本文记录第四个 layabox 引擎示例（<code>根据数据绘制路径</code>）</p><a id="more"></a><h1 id="示例效果"><a href="#示例效果" class="headerlink" title="示例效果"></a>示例效果</h1><p><img src="./result.gif" alt="result"></p><h1 id="概念简介"><a href="#概念简介" class="headerlink" title="概念简介"></a>概念简介</h1><p>本示例中的概念均在示例一中描述。<a href="/2018/05/25/read-layabox-demo-1/#%E6%A6%82%E5%BF%B5%E7%AE%80%E4%BB%8B">查看</a></p><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ltr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./LayaAirJS_1.7.19.1_beta/js/libs/laya.core.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./LayaAirJS_1.7.19.1_beta/js/libs/laya.webgl.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> Sprite  <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Sprite        <span class="token keyword">var</span> Stage   <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Stage        <span class="token keyword">var</span> Browser <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Browser        <span class="token keyword">var</span> WebGL   <span class="token operator">=</span> Laya<span class="token punctuation">.</span>WebGL        <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 不支持WebGL时自动切换至Canvas</span>          Laya<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Browser<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span> Browser<span class="token punctuation">.</span>clientHeight<span class="token punctuation">,</span> WebGL<span class="token punctuation">)</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>alignV <span class="token operator">=</span> Stage<span class="token punctuation">.</span>ALIGN_MIDDLE          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>alignH <span class="token operator">=</span> Stage<span class="token punctuation">.</span>ALIGN_CENTER          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>scaleMode <span class="token operator">=</span> <span class="token string">"showall"</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>bgColor <span class="token operator">=</span> <span class="token string">"#232628"</span>          <span class="token function">drawPentagram</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">drawPentagram</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 创建图形实例</span>          <span class="token keyword">var</span> canvas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 把图形添加到舞台中</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 定义路径数据</span>          <span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          <span class="token comment" spellcheck="true">// 添加路径坐标集合</span>          path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">130</span><span class="token punctuation">)</span>          path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">33</span><span class="token punctuation">)</span>          path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">137</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span>          path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>          path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">)</span>          path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">)</span>          path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">)</span>          path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>          path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">137</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span>          path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">33</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 从舞台中心点，绘制多边形（五角星）</span>          <span class="token comment" spellcheck="true">// drawPoly 方法详情：https://layaair.ldc.layabox.com/api/?category=Core&amp;class=laya.display.Graphics#drawPoly()</span>          canvas<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span><span class="token function">drawPoly</span><span class="token punctuation">(</span>Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token string">'#FF7F50'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.layabox.com/" target="_blank" rel="noopener">https://www.layabox.com</a></li><li><a href="https://layaair.ldc.layabox.com/demo/?category=2d&group=Sprite&name=DrawPath" target="_blank" rel="noopener">https://layaair.ldc.layabox.com/demo/?category=2d&amp;group=Sprite&amp;name=DrawPath</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> layabox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解读 Layabox 示例 03</title>
      <link href="/2018/06/04/read-layabox-demo-3/"/>
      <url>/2018/06/04/read-layabox-demo-3/</url>
      
        <content type="html"><![CDATA[<p>本文记录第三个引擎示例展示旋转缩放的应用。</p><a id="more"></a><h1 id="示例效果"><a href="#示例效果" class="headerlink" title="示例效果"></a>示例效果</h1><p><img src="./result.gif" alt="result"></p><h1 id="概念简介"><a href="#概念简介" class="headerlink" title="概念简介"></a>概念简介</h1><h2 id="Event-类"><a href="#Event-类" class="headerlink" title="Event 类"></a>Event 类</h2><p>Event 是事件类型的集合。<a href="https://layaair.ldc.layabox.com/api/?category=Core&class=laya.events.Event" target="_blank" rel="noopener">API 详情</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>其余概念均在示例一中描述。<a href="/2018/05/25/read-layabox-demo-1/#%E6%A6%82%E5%BF%B5%E7%AE%80%E4%BB%8B">查看</a></p><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ltr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./LayaAirJS_1.7.19.1_beta/js/libs/laya.core.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./LayaAirJS_1.7.19.1_beta/js/libs/laya.webgl.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> Sprite  <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Sprite<span class="token punctuation">;</span>        <span class="token keyword">var</span> Stage   <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Stage<span class="token punctuation">;</span>        <span class="token keyword">var</span> Event   <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Event<span class="token punctuation">;</span>        <span class="token keyword">var</span> Browser <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Browser<span class="token punctuation">;</span>        <span class="token keyword">var</span> WebGL   <span class="token operator">=</span> Laya<span class="token punctuation">.</span>WebGL<span class="token punctuation">;</span>        <span class="token keyword">var</span> ape<span class="token punctuation">;</span>        <span class="token keyword">var</span> scaleDelta <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 不支持 WebGL 时自动切换至 Canvas</span>          Laya<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Browser<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span> Browser<span class="token punctuation">.</span>clientHeight<span class="token punctuation">,</span> WebGL<span class="token punctuation">)</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>alignV <span class="token operator">=</span> Stage<span class="token punctuation">.</span>ALIGN_MIDDLE          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>alignH <span class="token operator">=</span> Stage<span class="token punctuation">.</span>ALIGN_CENTER          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>scaleMode <span class="token operator">=</span> <span class="token string">'showall'</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>bgColor <span class="token operator">=</span> <span class="token string">'#232628'</span>          <span class="token function">createApe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">createApe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          ape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 加载图片</span>          ape<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token string">'./res/apes/monkey2.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 添加图形到舞台中</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>ape<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 设置中心点 (monkey2.png 110 * 145)</span>          ape<span class="token punctuation">.</span><span class="token function">pivot</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 设置图形的 x 坐标</span>          ape<span class="token punctuation">.</span>x <span class="token operator">=</span> Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 设置图形的 y 坐标</span>          ape<span class="token punctuation">.</span>y <span class="token operator">=</span> Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 设置没 1 帧的动画</span>          Laya<span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">frameLoop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> animate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 旋转角度增加 2 度</span>          ape<span class="token punctuation">.</span>rotation <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 设置心跳缩放比例</span>          scaleDelta <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0.02</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> scaleValue <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>scaleDelta<span class="token punctuation">)</span><span class="token punctuation">;</span>          ape<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span>scaleValue<span class="token punctuation">,</span> scaleValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.layabox.com/" target="_blank" rel="noopener">https://www.layabox.com</a></li><li><a href="https://layaair.ldc.layabox.com/demo/?category=2d&group=Sprite&name=RoateAndScale" target="_blank" rel="noopener">https://layaair.ldc.layabox.com/demo/?category=2d&amp;group=Sprite&amp;name=RoateAndScale</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> layabox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解读 Layabox 示例 02</title>
      <link href="/2018/05/30/read-layabox-demo-2/"/>
      <url>/2018/05/30/read-layabox-demo-2/</url>
      
        <content type="html"><![CDATA[<p>第二个引擎示例展示容器的应用。</p><a id="more"></a><h1 id="示例效果"><a href="#示例效果" class="headerlink" title="示例效果"></a>示例效果</h1><p><img src="./result.gif" alt="result"></p><h1 id="概念简介"><a href="#概念简介" class="headerlink" title="概念简介"></a>概念简介</h1><p>本示例中的概念均在示例一中描述。<a href="/2018/05/25/read-layabox-demo-1/#%E6%A6%82%E5%BF%B5%E7%AE%80%E4%BB%8B">查看</a></p><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ltr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./LayaAirJS_1.7.19.1_beta/js/libs/laya.core.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./LayaAirJS_1.7.19.1_beta/js/libs/laya.webgl.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> Sprite <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Sprite        <span class="token keyword">var</span> Stage <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Stage        <span class="token keyword">var</span> Event <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Event        <span class="token keyword">var</span> Browser <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Browser        <span class="token keyword">var</span> WebGL <span class="token operator">=</span> Laya<span class="token punctuation">.</span>WebGL        <span class="token comment" spellcheck="true">// 该容器用于装载 4 张猩猩图片</span>        <span class="token keyword">var</span> apesCtn        <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 不支持 WebGL 时自动切换至 Canvas</span>          Laya<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Browser<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span> Browser<span class="token punctuation">.</span>clientHeight<span class="token punctuation">,</span> WebGL<span class="token punctuation">)</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>alignV <span class="token operator">=</span> Stage<span class="token punctuation">.</span>ALIGN_MIDDLE          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>alignH <span class="token operator">=</span> Stage<span class="token punctuation">.</span>ALIGN_CENTER          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>scaleMode <span class="token operator">=</span> <span class="token string">'showall'</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>bgColor <span class="token operator">=</span> <span class="token string">'#232628'</span>          <span class="token function">createApes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">createApes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 每只猩猩距离中心点 150 像素</span>          <span class="token keyword">var</span> layoutRadius <span class="token operator">=</span> <span class="token number">150</span>          <span class="token keyword">var</span> radianUnit <span class="token operator">=</span> Math<span class="token punctuation">.</span>PI <span class="token operator">/</span> <span class="token number">2</span>          apesCtn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>apesCtn<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 添加 4 张猩猩图片</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> ape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            ape<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token string">'./res/apes/monkey'</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">'.png'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 设置轴心点</span>            ape<span class="token punctuation">.</span><span class="token function">pivot</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 以圆周排列猩猩</span>            ape<span class="token punctuation">.</span><span class="token function">pos</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>radianUnit <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> layoutRadius<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>radianUnit <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> layoutRadius<span class="token punctuation">)</span>            apesCtn<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>ape<span class="token punctuation">)</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 设置猩猩的位置在舞台中央</span>          apesCtn<span class="token punctuation">.</span><span class="token function">pos</span><span class="token punctuation">(</span>Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 每 1 帧执行动画 animate</span>          Laya<span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">frameLoop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> animate<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 旋转角度 + 1</span>          apesCtn<span class="token punctuation">.</span>rotation <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.layabox.com/" target="_blank" rel="noopener">https://www.layabox.com</a></li><li><a href="https://layaair.ldc.layabox.com/demo/?category=2d&group=Sprite&name=Container" target="_blank" rel="noopener">https://layaair.ldc.layabox.com/demo/?category=2d&amp;group=Sprite&amp;name=Container</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> layabox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解读 Layabox 示例 01</title>
      <link href="/2018/05/25/read-layabox-demo-1/"/>
      <url>/2018/05/25/read-layabox-demo-1/</url>
      
        <content type="html"><![CDATA[<p>一次偶然的机会发现了 <a href="https://www.layabox.com/" target="_blank" rel="noopener">Layabox</a>，着实令我眼前一亮，想了想决定入这个坑。</p><a id="more"></a><h1 id="示例效果"><a href="#示例效果" class="headerlink" title="示例效果"></a>示例效果</h1><p>第一个示例使用 Sprite 显示图片，实现下面的效果：</p><p><img src="./result.png" alt="result.png"></p><h1 id="概念简介"><a href="#概念简介" class="headerlink" title="概念简介"></a>概念简介</h1><h2 id="Sprite-类"><a href="#Sprite-类" class="headerlink" title="Sprite 类"></a>Sprite 类</h2><p>Sprite 是基本的显示图形的显示列表节点。<a href="https://layaair.ldc.layabox.com/api/?category=Core&class=laya.display.Sprite" target="_blank" rel="noopener">API 详情</a></p><h2 id="Stage-类"><a href="#Stage-类" class="headerlink" title="Stage 类"></a>Stage 类</h2><p>Stage 是舞台类，显示列表的根结点，所有显示对象都在舞台上显示。<a href="https://layaair.ldc.layabox.com/api/?category=Core&class=laya.display.Stage" target="_blank" rel="noopener">API 详情</a></p><h2 id="Texture-类"><a href="#Texture-类" class="headerlink" title="Texture 类"></a>Texture 类</h2><p>Texture 是一个纹理处理类。<a href="https://layaair.ldc.layabox.com/api/?category=Core&class=laya.resource.Texture" target="_blank" rel="noopener">API 详情</a></p><h2 id="Browser-类"><a href="#Browser-类" class="headerlink" title="Browser 类"></a>Browser 类</h2><p>Browser 是浏览器代理类。<a href="https://layaair.ldc.layabox.com/api/?category=Core&class=laya.utils.Browser" target="_blank" rel="noopener">API 详情</a></p><h2 id="Handler-类"><a href="#Handler-类" class="headerlink" title="Handler 类"></a>Handler 类</h2><p>Handler 是事件处理器类。<a href="https://layaair.ldc.layabox.com/api/?category=Core&class=laya.utils.Handler" target="_blank" rel="noopener">API 详情</a></p><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ltr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./LayaAirJS_1.7.19.1_beta/js/libs/laya.core.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./LayaAirJS_1.7.19.1_beta/js/libs/laya.webgl.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> Sprite <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Sprite        <span class="token keyword">var</span> Stage <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Stage        <span class="token keyword">var</span> Texture <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Texture        <span class="token keyword">var</span> Browser <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Browser        <span class="token keyword">var</span> Handler <span class="token operator">=</span> Laya<span class="token punctuation">.</span>Handler        <span class="token keyword">var</span> WebGL <span class="token operator">=</span> Laya<span class="token punctuation">.</span>WebGL        <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 初始化舞台，不支持 WebGl 时自动切换至 Canvas</span>          Laya<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>Browser<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span> Browser<span class="token punctuation">.</span>clientHeight<span class="token punctuation">,</span> WebGL<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 设置画布垂直对齐方式</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>alignV <span class="token operator">=</span> Stage<span class="token punctuation">.</span>ALIGN_MIDDLE          <span class="token comment" spellcheck="true">// 设置画布水平对齐方式</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>alignH <span class="token operator">=</span> Stage<span class="token punctuation">.</span>ALIGN_CENTER          <span class="token comment" spellcheck="true">// 设置缩放模式</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>scaleMode <span class="token operator">=</span> <span class="token string">'showall'</span>          <span class="token comment" spellcheck="true">// 设置舞台的背景颜色</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span>bgColor <span class="token operator">=</span> <span class="token string">'#232628'</span>          <span class="token function">showApe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">showApe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 实例化图形列表节点</span>          <span class="token keyword">var</span> ape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 把图形列表节点添加到舞台中</span>          Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>ape<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 方法1：使用 loadImage 加载图片</span>          ape<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token string">'./res/apes/monkey3.png'</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 方法2：使用 drawTexture</span>          <span class="token keyword">var</span> monkey2 <span class="token operator">=</span> <span class="token string">'./res/apes/monkey2.png'</span>          <span class="token comment" spellcheck="true">// 加载图片</span>          Laya<span class="token punctuation">.</span>loader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>monkey2<span class="token punctuation">,</span> Handler<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取指定地址资源</span>            <span class="token keyword">var</span> t <span class="token operator">=</span> Laya<span class="token punctuation">.</span>loader<span class="token punctuation">.</span><span class="token function">getRes</span><span class="token punctuation">(</span>monkey2<span class="token punctuation">)</span>            <span class="token keyword">var</span> ape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 绘制纹理</span>            ape<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span><span class="token function">drawTexture</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>            Laya<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>ape<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 设置坐标位置</span>            ape<span class="token punctuation">.</span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.layabox.com/" target="_blank" rel="noopener">https://www.layabox.com/</a></li><li><a href="https://layaair.ldc.layabox.com/demo/?category=2d&group=Sprite&name=DisplayImage" target="_blank" rel="noopener">https://layaair.ldc.layabox.com/demo/?category=2d&amp;group=Sprite&amp;name=DisplayImage</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> layabox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 文件分块上传</title>
      <link href="/2018/05/17/slice-file-for-upload/"/>
      <url>/2018/05/17/slice-file-for-upload/</url>
      
        <content type="html"><![CDATA[<p>本文记录 JavaScript 如何对大文件进行分块上传。</p><a id="more"></a><h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><p><code>Blob</code> 对象提供了 <code>slice</code> 方法，用于创建一个包含源 <code>Blob</code> 的指定字节范围内的数据的新 <code>Blob</code> 对象。<code>File</code> 接口基于 <code>Blob</code>，继承了该方法。利用此方法，我们就可以对大文件进行分块处理。</p><h1 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h1><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 设置分块大小</span><span class="token keyword">var</span> chunkSize <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token comment" spellcheck="true">// 计算总分块</span><span class="token keyword">var</span> totalChunk <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>filesize <span class="token operator">/</span> chunkSize<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 当前分块索引</span><span class="token keyword">var</span> chunkIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">// 分块起始值</span><span class="token keyword">var</span> chunkStart <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">// 分块结束值</span><span class="token keyword">var</span> chunkEnd <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">// 迭代</span><span class="token keyword">while</span> <span class="token punctuation">(</span>chunkStart <span class="token operator">&lt;</span> filesize<span class="token punctuation">)</span> <span class="token punctuation">{</span>  chunkEnd <span class="token operator">=</span> chunkStart <span class="token operator">+</span> chunkSize  <span class="token keyword">if</span> <span class="token punctuation">(</span>chunkEnd <span class="token operator">></span> filesize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    chunkEnd <span class="token operator">=</span> filesize  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 在这里分块处理 :)</span>  file<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>chunkStart<span class="token punctuation">,</span> chunkEnd<span class="token punctuation">)</span>  chunkStart <span class="token operator">=</span> chunkEnd  chunkIndex <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true">// 最后一块</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>chunkIndex <span class="token operator">>=</span> totalChunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 操作</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="http://tuobaye.com/2017/12/01/%E8%B0%88%E4%B8%80%E8%B0%88%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E2%80%94%E2%80%94%E5%89%8D%E5%8F%B0%E5%88%86%E7%89%87%E5%92%8C%E5%90%8E%E5%8F%B0%E5%90%88%E5%B9%B6" target="_blank" rel="noopener">http://tuobaye.com/2017/12/01/谈一谈大文件上传——前台分片和后台合并</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Adobe Illustrator 创建 svg 复合路径</title>
      <link href="/2018/05/14/use-adobe-illustrator-for-compound-svg-path/"/>
      <url>/2018/05/14/use-adobe-illustrator-for-compound-svg-path/</url>
      
        <content type="html"><![CDATA[<p>在网页设计中，我们经常会用到 <code>svg</code> 图标，本文记录下在制作 <code>svg</code> 时如何使用复合路径。</p><a id="more"></a><h1 id="原文件"><a href="#原文件" class="headerlink" title="原文件"></a>原文件</h1><pre class=" language-svg"><code class="language-svg"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token comment" spellcheck="true">&lt;!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Layer_1<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xlink</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xlink<span class="token punctuation">"</span></span> <span class="token attr-name">x</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0px<span class="token punctuation">"</span></span> <span class="token attr-name">y</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0px<span class="token punctuation">"</span></span> <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0 0 48 48<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">enable-background</span><span class="token punctuation">:</span>new <span class="token number">0</span> <span class="token number">0</span> <span class="token number">48</span> <span class="token number">48</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xml:</span>space</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>preserve<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.st0</span></span><span class="token punctuation">{</span><span class="token property">fill</span><span class="token punctuation">:</span><span class="token hexcode">#FFFFFF</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M6.4,3.7C6,3.8,5.3,4.3,4.8,4.7C4.4,5,3.8,6,3.7,6.5c-0.2,0.7-0.2,33.9,0,34.4c0.4,1,1.7,2.3,2.6,2.6c0.4,0.2,35,0.2,35.5,0c0.9-0.3,2.3-1.7,2.6-2.6c0.1-0.3,0.1-3.5,0.1-17.2c0-11,0-16.9-0.1-17.2c-0.1-0.2-0.3-0.6-0.6-1c-0.4-0.6-0.6-0.8-1.2-1.2c-0.4-0.3-0.9-0.5-1.1-0.6C41.4,3.6,33.9,3.6,24,3.6C10.3,3.6,6.7,3.6,6.4,3.7z<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>g</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>st0<span class="token punctuation">"</span></span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M9.3,32c1.9,1.2,3.8,1.8,5.7,1.8c2.3,0,3.5-0.6,3.5-1.9c0-0.9-1-1.6-2.9-2.2c-2.4-0.8-4.1-1.6-5-2.5S9.3,25,9.3,23.4c0-1.9,0.8-3.4,2.3-4.5s3.6-1.6,6.1-1.6c1.8,0,3.5,0.3,5.2,0.8v4.5c-1.5-0.9-3.2-1.3-5-1.3c-0.9,0-1.6,0.2-2.2,0.5s-0.8,0.7-0.8,1.3c0,0.9,0.8,1.6,2.5,2.2c1.8,0.6,3.1,1.1,4,1.6s1.6,1.1,2,1.9s0.7,1.7,0.7,2.7c0,2-0.8,3.6-2.4,4.7s-3.8,1.7-6.4,1.7c-2.1,0-4.1-0.3-5.9-1V32H9.3z<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>st0<span class="token punctuation">"</span></span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M40,12.8c-0.8-0.3-1.5-0.5-2.2-0.5c-1.9,0-2.9,1.1-2.9,3.2v2.2h4.4V22h-4.4v15.2h-5.7V22h-3.3v-4.2h3.3v-2.5c0-2.2,0.7-4,2.2-5.3s3.3-2,5.7-2c1.2,0,2.2,0.1,3,0.4L40,12.8L40,12.8z<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>g</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span></code></pre><h1 id="选区"><a href="#选区" class="headerlink" title="选区"></a>选区</h1><p>以 <code>segmentfault</code> 图标 <code>sf</code> 为例，<code>ctrl + A</code> 选择全部路径</p><p><img src="./compound.png" alt="compound"></p><h1 id="复合路径建立后"><a href="#复合路径建立后" class="headerlink" title="复合路径建立后"></a>复合路径建立后</h1><pre class=" language-svg"><code class="language-svg"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token comment" spellcheck="true">&lt;!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Layer_1<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xlink</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xlink<span class="token punctuation">"</span></span> <span class="token attr-name">x</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0px<span class="token punctuation">"</span></span> <span class="token attr-name">y</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0px<span class="token punctuation">"</span></span> <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0 0 48 48<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">enable-background</span><span class="token punctuation">:</span>new <span class="token number">0</span> <span class="token number">0</span> <span class="token number">48</span> <span class="token number">48</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xml:</span>space</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>preserve<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M6.4,3.7C6,3.8,5.3,4.3,4.8,4.7C4.4,5,3.8,6,3.7,6.5c-0.2,0.7-0.2,33.9,0,34.4c0.4,1,1.7,2.3,2.6,2.6c0.4,0.2,35,0.2,35.5,0c0.9-0.3,2.3-1.7,2.6-2.6c0.1-0.3,0.1-3.5,0.1-17.2c0-11,0-16.9-0.1-17.2c-0.1-0.2-0.3-0.6-0.6-1c-0.4-0.6-0.6-0.8-1.2-1.2c-0.4-0.3-0.9-0.5-1.1-0.6C41.4,3.6,33.9,3.6,24,3.6C10.3,3.6,6.7,3.6,6.4,3.7z M9.3,32c1.9,1.2,3.8,1.8,5.7,1.8c2.3,0,3.5-0.6,3.5-1.9c0-0.9-1-1.6-2.9-2.2c-2.4-0.8-4.1-1.6-5-2.5S9.3,25,9.3,23.4c0-1.9,0.8-3.4,2.3-4.5s3.6-1.6,6.1-1.6c1.8,0,3.5,0.3,5.2,0.8v4.5c-1.5-0.9-3.2-1.3-5-1.3c-0.9,0-1.6,0.2-2.2,0.5s-0.8,0.7-0.8,1.3c0,0.9,0.8,1.6,2.5,2.2c1.8,0.6,3.1,1.1,4,1.6s1.6,1.1,2,1.9s0.7,1.7,0.7,2.7c0,2-0.8,3.6-2.4,4.7s-3.8,1.7-6.4,1.7c-2.1,0-4.1-0.3-5.9-1V32H9.3z M40,12.8c-0.8-0.3-1.5-0.5-2.2-0.5c-1.9,0-2.9,1.1-2.9,3.2v2.2h4.4V22h-4.4v15.2h-5.7V22h-3.3v-4.2h3.3v-2.5c0-2.2,0.7-4,2.2-5.3s3.3-2,5.7-2c1.2,0,2.2,0.1,3,0.4L40,12.8L40,12.8z<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span></code></pre><h1 id="使用-svgomg-优化-svg"><a href="#使用-svgomg-优化-svg" class="headerlink" title="使用 svgomg 优化 svg"></a>使用 svgomg 优化 svg</h1><ul><li><a href="https://jakearchibald.github.io/svgomg/" target="_blank" rel="noopener">https://jakearchibald.github.io/svgomg/</a></li></ul><pre class=" language-svg"><code class="language-svg"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span> <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0 0 48 48<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M6.4 3.7c-.4.1-1.1.6-1.6 1-.4.3-1 1.3-1.1 1.8-.2.7-.2 33.9 0 34.4.4 1 1.7 2.3 2.6 2.6.4.2 35 .2 35.5 0 .9-.3 2.3-1.7 2.6-2.6.1-.3.1-3.5.1-17.2 0-11 0-16.9-.1-17.2-.1-.2-.3-.6-.6-1-.4-.6-.6-.8-1.2-1.2-.4-.3-.9-.5-1.1-.6-.1-.1-7.6-.1-17.5-.1-13.7 0-17.3 0-17.6.1zM9.3 32c1.9 1.2 3.8 1.8 5.7 1.8 2.3 0 3.5-.6 3.5-1.9 0-.9-1-1.6-2.9-2.2-2.4-.8-4.1-1.6-5-2.5S9.3 25 9.3 23.4c0-1.9.8-3.4 2.3-4.5s3.6-1.6 6.1-1.6c1.8 0 3.5.3 5.2.8v4.5c-1.5-.9-3.2-1.3-5-1.3-.9 0-1.6.2-2.2.5s-.8.7-.8 1.3c0 .9.8 1.6 2.5 2.2 1.8.6 3.1 1.1 4 1.6s1.6 1.1 2 1.9.7 1.7.7 2.7c0 2-.8 3.6-2.4 4.7s-3.8 1.7-6.4 1.7c-2.1 0-4.1-.3-5.9-1V32h-.1zM40 12.8c-.8-.3-1.5-.5-2.2-.5-1.9 0-2.9 1.1-2.9 3.2v2.2h4.4V22h-4.4v15.2h-5.7V22h-3.3v-4.2h3.3v-2.5c0-2.2.7-4 2.2-5.3s3.3-2 5.7-2c1.2 0 2.2.1 3 .4l-.1 4.4z<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span></code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://jingyan.baidu.com/article/9113f81b24e19a2b3214c7f6.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/9113f81b24e19a2b3214c7f6.html</a> <a href="http://www.zhangxinxu.com/wordpress/2016/02/svg-compress-tool-svgo-experience/" target="_blank" rel="noopener">http://www.zhangxinxu.com/wordpress/2016/02/svg-compress-tool-svgo-experience/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 sunny-ngrok 做内网穿透</title>
      <link href="/2018/05/14/use-sunny-ngrok-to-network-penetration/"/>
      <url>/2018/05/14/use-sunny-ngrok-to-network-penetration/</url>
      
        <content type="html"><![CDATA[<p>本文记录如何使用 <a href="https://www.ngrok.cc/" target="_blank" rel="noopener">sunny-ngrok</a> 做内网穿透。</p><a id="more"></a><h1 id="搭建内网服务器"><a href="#搭建内网服务器" class="headerlink" title="搭建内网服务器"></a>搭建内网服务器</h1><p>假设在内网 <code>http://192.168.1.12</code> 搭建了 Gitlab 服务器</p><p><img src="./gitlab.png" alt="gitlab"></p><h1 id="注册-sunny-ngrok-并开通免费隧道"><a href="#注册-sunny-ngrok-并开通免费隧道" class="headerlink" title="注册 sunny-ngrok 并开通免费隧道"></a>注册 sunny-ngrok 并开通免费隧道</h1><p>Gitlab 网站需要一个 http 协议隧道，ssh 需要一个 tcp 协议隧道</p><ul><li><a href="https://www.sunnyos.com/article-show-67.html" target="_blank" rel="noopener">开通 http 协议隧道</a></li><li><a href="https://www.sunnyos.com/article-show-70.html" target="_blank" rel="noopener">开通 tcp 协议隧道</a></li></ul><p><img src="./tunnels.png" alt="tunnels"></p><h1 id="下载客户端并启动脚本"><a href="#下载客户端并启动脚本" class="headerlink" title="下载客户端并启动脚本"></a>下载客户端并启动脚本</h1><ul><li><a href="https://www.sunnyos.com/article-show-71.html" target="_blank" rel="noopener">Windows 中使用 sunny-ngrok 脚本</a></li></ul><p><img src="./monitor.png" alt="monitor"></p><h1 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h1><p>外网域名为 <a href="http://pregitlab.free.ngrok.cc/" target="_blank" rel="noopener">http://pregitlab.free.ngrok.cc</a></p><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><p><img src="./website.png" alt="website"></p><h2 id="SSH-连接"><a href="#SSH-连接" class="headerlink" title="SSH 连接"></a>SSH 连接</h2><blockquote><p>注意 <code>.ssh/config</code> 中的相关配置</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># gitlab</span>Host pregitlab.free.ngrok.cc  HostName pregitlab.free.ngrok.cc  Port 11273  PreferredAuthentications publickey  IdentityFile /home/tlj/.ssh/id_rsa.gitlab</code></pre></blockquote><p><img src="./ssh.png" alt="ssh"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.sunnyos.com/" target="_blank" rel="noopener">https://www.sunnyos.com/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> operation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> network penetration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fedora 开机自动启动 XX-Net</title>
      <link href="/2018/05/12/auto-start-xx-net-boot/"/>
      <url>/2018/05/12/auto-start-xx-net-boot/</url>
      
        <content type="html"><![CDATA[<p>本文记录 <a href="http://localhost:4000/2016/02/04/latest-free-vpn/" target="_blank" rel="noopener">XX-Net</a> 开机自动启动的设置。</p><a id="more"></a><h1 id="关联服务脚本"><a href="#关联服务脚本" class="headerlink" title="关联服务脚本"></a>关联服务脚本</h1><p>进入 <code>/etc/init.d</code></p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /etc/init.d<span class="token function">sudo</span> <span class="token function">ln</span> -s /home/yourName/XX-Net/xx_net.sh xx_net'</code></pre><h1 id="开启服务并设置开机自动启动"><a href="#开启服务并设置开机自动启动" class="headerlink" title="开启服务并设置开机自动启动"></a>开启服务并设置开机自动启动</h1><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start xx-net<span class="token function">sudo</span> systemctl <span class="token function">enable</span> xx-net</code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://github.com/XX-net/XX-Net/wiki/%E5%9C%A8Linux%E4%B8%8B%E5%A6%82%E4%BD%95%E5%B0%86XX-Net%E4%BD%9C%E4%B8%BA%E5%90%8E%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8" target="_blank" rel="noopener">https://github.com/XX-net/XX-Net/wiki/在Linux下如何将XX-Net作为后台服务启动</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fedora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fedora 系统中安装 Gitlab</title>
      <link href="/2018/05/06/install-gitlab-on-fedora/"/>
      <url>/2018/05/06/install-gitlab-on-fedora/</url>
      
        <content type="html"><![CDATA[<p>Gitlab 是一个为了完成 <a href="https://zh.wikipedia.org/wiki/DevOps" target="_blank" rel="noopener">DevOps</a> 工作流的单应用程序。本文记录如何在 Fedora 系统中安装 Gitlab。</p><a id="more"></a><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="硬件环境"><a href="#硬件环境" class="headerlink" title="硬件环境"></a>硬件环境</h2><ul><li>双核 CPU + 2 GB 内存</li></ul><h2 id="需要模块"><a href="#需要模块" class="headerlink" title="需要模块"></a>需要模块</h2><ul><li>安装 curl 用于下载文件</li><li>安装 openssh-server 用于 ssh 连接</li><li>安装 ca-certificates 用于添加 CA 认证</li><li>安装 postfix 用于 MTA</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> dnf <span class="token function">install</span> curl openssh-server ca-certificates postfix</code></pre><h2 id="启动-postfix-服务"><a href="#启动-postfix-服务" class="headerlink" title="启动 postfix 服务"></a>启动 postfix 服务</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start sshd postfix</code></pre><p>设置开机启动</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token function">enable</span> sshd postfix</code></pre><h1 id="安装-Gitlab"><a href="#安装-Gitlab" class="headerlink" title="安装 Gitlab"></a>安装 Gitlab</h1><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><p><a href="https://packages.gitlab.com/gitlab/gitlab-ce?filter=rpms" target="_blank" rel="noopener">https://packages.gitlab.com/gitlab/gitlab-ce?filter=rpms</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class=" language-bash"><code class="language-bash">duso dnf <span class="token function">install</span> <span class="token operator">&lt;</span>path<span class="token operator">></span>/gitlab<span class="token operator">&lt;</span>version-num<span class="token operator">></span>.rpm</code></pre><h2 id="初始化-Gitlab"><a href="#初始化-Gitlab" class="headerlink" title="初始化 Gitlab"></a>初始化 Gitlab</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> gitlab-ctl reconfigure</code></pre><h2 id="设置防火墙"><a href="#设置防火墙" class="headerlink" title="设置防火墙"></a>设置防火墙</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> firewall-cmd --permanent --add-service<span class="token operator">=</span>http<span class="token function">sudo</span> firewall-cmd --reload</code></pre><h2 id="打开-Gitlab"><a href="#打开-Gitlab" class="headerlink" title="打开 Gitlab"></a>打开 Gitlab</h2><p><img src="./screenshot.png" alt="screenshot"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://linoxide.com/linux-how-to/install-gitlab-on-ubuntu-fedora-debian/" target="_blank" rel="noopener">https://linoxide.com/linux-how-to/install-gitlab-on-ubuntu-fedora-debian/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fedora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在 Fedora27 系统中安装 Jitamin</title>
      <link href="/2018/03/28/how-to-install-jitamin-on-fedora27/"/>
      <url>/2018/03/28/how-to-install-jitamin-on-fedora27/</url>
      
        <content type="html"><![CDATA[<p>Jitamin (读作/ˈdʒɪtəmɪn/) 是一款免费、开源，使用PHP语言开发的项目管理系统。本文记录下如何在 Fedora27 系统中安装 jitamin。</p><a id="more"></a><h1 id="Jitamin-的需求"><a href="#Jitamin-的需求" class="headerlink" title="Jitamin 的需求"></a>Jitamin 的需求</h1><ul><li>Web 服务器：Nginx，Apache，或 Lighttpd</li><li>PHP 5.6+（推荐 PHP 7）</li><li>数据库：MySQL（推荐），PostgreSQL 或 SQLite</li><li>Composer</li></ul><h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> dnf <span class="token function">install</span> nginx</code></pre><p>查看安装版本</p><pre class=" language-bash"><code class="language-bash">nginx -Vnginx version: nginx/1.12.1built by gcc 7.1.1 20170802 <span class="token punctuation">(</span>Red Hat 7.1.1-7<span class="token punctuation">)</span> <span class="token punctuation">(</span>GCC<span class="token punctuation">)</span>built with OpenSSL 1.1.0f-fips  25 May 2017 <span class="token punctuation">(</span>running with OpenSSL 1.1.0g-fips  2 Nov 2017<span class="token punctuation">)</span>TLS SNI support enabledconfigure arguments: --prefix<span class="token operator">=</span>/usr/share/nginx --sbin-path<span class="token operator">=</span>/usr/sbin/nginx --modules-path<span class="token operator">=</span>/usr/lib64/nginx/modules --conf-path<span class="token operator">=</span>/etc/nginx/nginx.conf --error-log-path<span class="token operator">=</span>/var/log/nginx/error.log --http-log-path<span class="token operator">=</span>/var/log/nginx/access.log --http-client-body-temp-path<span class="token operator">=</span>/var/lib/nginx/tmp/client_body --http-proxy-temp-path<span class="token operator">=</span>/var/lib/nginx/tmp/proxy --http-fastcgi-temp-path<span class="token operator">=</span>/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path<span class="token operator">=</span>/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path<span class="token operator">=</span>/var/lib/nginx/tmp/scgi --pid-path<span class="token operator">=</span>/run/nginx.pid --lock-path<span class="token operator">=</span>/run/lock/subsys/nginx --user<span class="token operator">=</span>nginx --group<span class="token operator">=</span>nginx --with-file-aio --with-ipv6 --with-http_ssl_module --with-http_v2_module --with-http_realip_module --with-http_addition_module --with-http_xslt_module<span class="token operator">=</span>dynamic --with-http_image_filter_module<span class="token operator">=</span>dynamic --with-http_geoip_module<span class="token operator">=</span>dynamic --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_degradation_module --with-http_slice_module --with-http_stub_status_module --with-http_perl_module<span class="token operator">=</span>dynamic --with-http_auth_request_module --with-mail<span class="token operator">=</span>dynamic --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream<span class="token operator">=</span>dynamic --with-stream_ssl_module --with-google_perftools_module --with-debug --with-cc-opt<span class="token operator">=</span><span class="token string">'-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic'</span> --with-ld-opt<span class="token operator">=</span><span class="token string">'-Wl,-z,relro -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -Wl,-E'</span></code></pre><h2 id="安装-PHP"><a href="#安装-PHP" class="headerlink" title="安装 PHP"></a>安装 PHP</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> dnf <span class="token function">install</span> php-cli</code></pre><p>查看安装版本</p><pre class=" language-bash"><code class="language-bash">php -vPHP 7.1.15 <span class="token punctuation">(</span>cli<span class="token punctuation">)</span> <span class="token punctuation">(</span>built: Feb 28 2018 11:19:18<span class="token punctuation">)</span> <span class="token punctuation">(</span> NTS <span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 1997-2018 The PHP GroupZend Engine v3.1.0, Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 1998-2018 Zend Technologies</code></pre><h2 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> dnf <span class="token function">install</span> mysql</code></pre><p>查看安装版本</p><pre class=" language-bash"><code class="language-bash">mysql -Vmysql  Ver 15.1 Distrib 10.2.13-MariaDB, <span class="token keyword">for</span> Linux <span class="token punctuation">(</span>x86_64<span class="token punctuation">)</span> using readline 5.1</code></pre><h3 id="安装-mysqli-扩展"><a href="#安装-mysqli-扩展" class="headerlink" title="安装 mysqli 扩展"></a>安装 mysqli 扩展</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> dnf <span class="token function">install</span> php-mysqliphp --iniConfiguration File <span class="token punctuation">(</span>php.ini<span class="token punctuation">)</span> Path: /etcLoaded Configuration File:         /etc/php.iniScan <span class="token keyword">for</span> additional .ini files in: /etc/php.dAdditional .ini files parsed:      /etc/php.d/20-bz2.ini,/etc/php.d/20-calendar.ini,/etc/php.d/20-ctype.ini,/etc/php.d/20-curl.ini,/etc/php.d/20-dom.ini,/etc/php.d/20-exif.ini,/etc/php.d/20-fileinfo.ini,/etc/php.d/20-ftp.ini,/etc/php.d/20-gd.ini,/etc/php.d/20-gettext.ini,/etc/php.d/20-iconv.ini,/etc/php.d/20-intl.ini,/etc/php.d/20-json.ini,/etc/php.d/20-mbstring.ini,/etc/php.d/20-mysqlnd.ini,/etc/php.d/20-pdo.ini,/etc/php.d/20-phar.ini,/etc/php.d/20-posix.ini,/etc/php.d/20-shmop.ini,/etc/php.d/20-simplexml.ini,/etc/php.d/20-sockets.ini,/etc/php.d/20-sqlite3.ini,/etc/php.d/20-sysvmsg.ini,/etc/php.d/20-sysvsem.ini,/etc/php.d/20-sysvshm.ini,/etc/php.d/20-tokenizer.ini,/etc/php.d/20-xml.ini,/etc/php.d/20-xmlwriter.ini,/etc/php.d/20-xsl.ini,/etc/php.d/30-mysqli.ini,/etc/php.d/30-pdo_mysql.ini,/etc/php.d/30-pdo_sqlite.ini,/etc/php.d/30-wddx.ini,/etc/php.d/30-xmlreader.ini,/etc/php.d/40-zip.ini</code></pre><h2 id="安装-Composer"><a href="#安装-Composer" class="headerlink" title="安装 Composer"></a>安装 Composer</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> dnf <span class="token function">install</span> composer</code></pre><p>查看安装版本</p><pre class=" language-bash"><code class="language-bash">composer -VComposer version 1.6.3 2018-01-31 16:28:17</code></pre><h1 id="安装-Jitamin"><a href="#安装-Jitamin" class="headerlink" title="安装 Jitamin"></a>安装 Jitamin</h1><h2 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /home/tlj<span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/jitamin/jitamin.git<span class="token function">cd</span> jitamin</code></pre><h2 id="设置配置文件"><a href="#设置配置文件" class="headerlink" title="设置配置文件"></a>设置配置文件</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> .env.example .env</code></pre><h2 id="安装-PHP-依赖包"><a href="#安装-PHP-依赖包" class="headerlink" title="安装 PHP 依赖包"></a>安装 PHP 依赖包</h2><pre class=" language-bash"><code class="language-bash">composer <span class="token function">install</span> -o --no-dev</code></pre><h2 id="创建数据库并设置相应的配置文件"><a href="#创建数据库并设置相应的配置文件" class="headerlink" title="创建数据库并设置相应的配置文件"></a>创建数据库并设置相应的配置文件</h2><pre class=" language-bash"><code class="language-bash">MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> CREATE DATABASE jitamin<span class="token punctuation">;</span>MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> CREATE USER <span class="token string">'jitamin'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'jitamin'</span><span class="token punctuation">;</span>MariaDB <span class="token punctuation">[</span><span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">></span> GRANT ALL PRIVILEGES ON jitamin.* TO <span class="token string">'jitamin'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'jitamin'</span> WITH GRANT OPTION<span class="token punctuation">;</span></code></pre><h3 id="示例-env"><a href="#示例-env" class="headerlink" title="示例 .env"></a>示例 <code>.env</code></h3><pre class=" language-ini"><code class="language-ini"><span class="token constant">APP_NAME</span><span class="token attr-value"><span class="token punctuation">=</span>Jitamin</span><span class="token constant">APP_ENV</span><span class="token attr-value"><span class="token punctuation">=</span>production</span><span class="token constant">APP_DEBUG</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">APP_KEY</span><span class="token attr-value"><span class="token punctuation">=</span>SomeRandomString</span><span class="token constant">APP_TIMEZONE</span><span class="token attr-value"><span class="token punctuation">=</span>Asia/Shanghai</span><span class="token constant">APP_LOCALE</span><span class="token attr-value"><span class="token punctuation">=</span>zh-CN</span><span class="token constant">APP_THEME</span><span class="token attr-value"><span class="token punctuation">=</span>black</span><span class="token constant">APP_LOG</span><span class="token attr-value"><span class="token punctuation">=</span>daily</span><span class="token constant">APP_LOG_LEVEL</span><span class="token attr-value"><span class="token punctuation">=</span>error</span><span class="token constant">APP_URL</span><span class="token attr-value"><span class="token punctuation">=</span>http://localhost</span><span class="token constant">DB_CONNECTION</span><span class="token attr-value"><span class="token punctuation">=</span>mysql</span><span class="token constant">DB_HOST</span><span class="token attr-value"><span class="token punctuation">=</span>127.0.0.1</span><span class="token constant">DB_PORT</span><span class="token attr-value"><span class="token punctuation">=</span>3306</span><span class="token constant">DB_DATABASE</span><span class="token attr-value"><span class="token punctuation">=</span>jitamin</span><span class="token constant">DB_USERNAME</span><span class="token attr-value"><span class="token punctuation">=</span>jitamin</span><span class="token constant">DB_PASSWORD</span><span class="token attr-value"><span class="token punctuation">=</span>jitamin</span></code></pre><h3 id="示例-config-config-php"><a href="#示例-config-config-php" class="headerlink" title="示例 ./config/config.php"></a>示例 <code>./config/config.php</code></h3><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/* * This file is part of Jitamin. * * Copyright (C) Jitamin Team * * For the full copyright and license information, please view the LICENSE * file that was distributed with this source code. */</span><span class="token keyword">return</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// Enable/Disable debug</span>    <span class="token string">'debug'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">'APP_DEBUG'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Available log drivers: syslog, stderr, stdout or file</span>    <span class="token string">'log_driver'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">'APP_LOG'</span><span class="token punctuation">,</span> <span class="token string">'file'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Available cache drivers are "file", "memory" and "memcached"</span>    <span class="token string">'cache_driver'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'memory'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Hide login form, useful if all your users use Google/Github/ReverseProxy authentication</span>    <span class="token string">'hide_login_form'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Enable/disable url rewrite</span>    <span class="token string">'enable_url_rewrite'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Available db drivers are "mysql", "sqlite" and "postgres"</span>    <span class="token string">'db_driver'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">'DB_CONNECTION'</span><span class="token punctuation">,</span> <span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'db_connections'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>        <span class="token string">'sqlite'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>            <span class="token string">'driver'</span>   <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'sqlite'</span><span class="token punctuation">,</span>            <span class="token string">'database'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'jitamin'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'mysql'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>            <span class="token string">'driver'</span>    <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'mysql'</span><span class="token punctuation">,</span>            <span class="token string">'host'</span>      <span class="token operator">=</span><span class="token operator">></span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">'DB_HOST'</span><span class="token punctuation">,</span> <span class="token string">'localhost'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'database'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">'DB_DATABASE'</span><span class="token punctuation">,</span> <span class="token string">'jitamin'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'username'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">'DB_USERNAME'</span><span class="token punctuation">,</span> <span class="token string">'jitamin'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'password'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">'DB_PASSWORD'</span><span class="token punctuation">,</span> <span class="token string">'jitamin'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'port'</span>      <span class="token operator">=</span><span class="token operator">></span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">'DB_PORT'</span><span class="token punctuation">,</span> <span class="token string">'3306'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'charset'</span>   <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'utf8'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'pgsql'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>            <span class="token string">'driver'</span>   <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'pgsql'</span><span class="token punctuation">,</span>            <span class="token string">'host'</span>     <span class="token operator">=</span><span class="token operator">></span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">'DB_HOST'</span><span class="token punctuation">,</span> <span class="token string">'localhost'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'database'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">'DB_DATABASE'</span><span class="token punctuation">,</span> <span class="token string">'jitamin'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'username'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">'DB_USERNAME'</span><span class="token punctuation">,</span> <span class="token string">'postgres'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'password'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">'DB_PASSWORD'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'port'</span>     <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'5432'</span><span class="token punctuation">,</span>            <span class="token string">'charset'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'utf8'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h2 id="移植并初始化数据库"><a href="#移植并初始化数据库" class="headerlink" title="移植并初始化数据库"></a>移植并初始化数据库</h2><pre class=" language-bash"><code class="language-bash">vendor/bin/phinx migratevendor/bin/phinx seed:run</code></pre><h2 id="确保-bootstrap-cache-和-storage-有写入权限"><a href="#确保-bootstrap-cache-和-storage-有写入权限" class="headerlink" title="确保 bootstrap/cache 和 storage 有写入权限"></a>确保 <code>bootstrap/cache</code> 和 <code>storage</code> 有写入权限</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> -R 777 bootstrap/cache<span class="token function">chmod</span> -R 777 storage</code></pre><h1 id="运行-Jitamin"><a href="#运行-Jitamin" class="headerlink" title="运行 Jitamin"></a>运行 Jitamin</h1><h2 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h2><pre class=" language-nginx"><code class="language-nginx"><span class="token comment" spellcheck="true"># jitamin 服务器</span><span class="token keyword">server</span> <span class="token punctuation">{</span>  <span class="token keyword">listen</span> <span class="token number">3000</span><span class="token punctuation">;</span>  <span class="token keyword">server_name</span> <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">;</span>  <span class="token keyword">root</span> <span class="token operator">/</span>home<span class="token operator">/</span>tlj<span class="token operator">/</span>jitamin<span class="token operator">/</span>public<span class="token punctuation">;</span>  <span class="token keyword">client_max_body_size</span> 1024m<span class="token punctuation">;</span>  <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>    <span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token variable">$is_args</span><span class="token variable">$args</span><span class="token punctuation">;</span>    <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">location</span> <span class="token operator">~</span> \<span class="token punctuation">.</span>php <span class="token punctuation">{</span>    <span class="token keyword">fastcgi_pass</span> <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">9000</span><span class="token punctuation">;</span>    <span class="token keyword">fastcgi_index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token punctuation">;</span>    <span class="token keyword">include</span> fastcgi<span class="token punctuation">.</span>conf<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="开启相关服务"><a href="#开启相关服务" class="headerlink" title="开启相关服务"></a>开启相关服务</h2><h3 id="启动-nginx"><a href="#启动-nginx" class="headerlink" title="启动 nginx"></a>启动 nginx</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start nginx</code></pre><h3 id="启动-mysql"><a href="#启动-mysql" class="headerlink" title="启动 mysql"></a>启动 mysql</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start mariadb</code></pre><h3 id="启动-php"><a href="#启动-php" class="headerlink" title="启动 php"></a>启动 php</h3><pre class=" language-bash"><code class="language-bash">php-cgi -b 127.0.0.1:9000</code></pre><h3 id="浏览器进入系统"><a href="#浏览器进入系统" class="headerlink" title="浏览器进入系统"></a>浏览器进入系统</h3><p><img src="./login.png" alt="login"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://github.com/jitamin/jitamin/blob/master/README.md" target="_blank" rel="noopener">https://github.com/jitamin/jitamin/blob/master/README.md</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fedora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron BrowserWindow 类</title>
      <link href="/2018/02/14/electron-browser-window/"/>
      <url>/2018/02/14/electron-browser-window/</url>
      
        <content type="html"><![CDATA[<p><a href="https://electronjs.org/docs/api/browser-window#browserwindow" target="_blank" rel="noopener">BrowserWindow</a> 创建并控制浏览器窗口。</p><a id="more"></a><h1 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h1><p>创建一个窗口，加载 <code>https://github.com</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> electron <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token keyword">const</span> BrowserWindow <span class="token operator">=</span> electron<span class="token punctuation">.</span>BrowserWindow<span class="token keyword">const</span> app <span class="token operator">=</span> electron<span class="token punctuation">.</span>app<span class="token keyword">let</span> mainWindow<span class="token keyword">function</span> <span class="token function">createWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    width<span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token number">600</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 使用接近应用程序背景色提升用户体验</span>    <span class="token comment" spellcheck="true">// https://electronjs.org/docs/api/browser-window#showing-window-gracefully</span>    backgroundColor<span class="token punctuation">:</span> <span class="token string">'#2e2c29'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  mainWindow<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'closed'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mainWindow <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  mainWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span><span class="token string">'https://github.com'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'ready'</span><span class="token punctuation">,</span> createWindow<span class="token punctuation">)</span></code></pre><p><img src="./loadurl.gif" alt="loadurl"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://electronjs.org/docs/api/browser-window" target="_blank" rel="noopener">https://electronjs.org/docs/api/browser-window</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron 基本概念</title>
      <link href="/2018/01/28/electron-basic-concept/"/>
      <url>/2018/01/28/electron-basic-concept/</url>
      
        <content type="html"><![CDATA[<p>快速入门，以 <a href="https://github.com/electron/electron-quick-start" target="_blank" rel="noopener">electron-quick-start</a> 为例，介绍 Electron 的基本概念。</p><a id="more"></a><p><img src="./1.png" alt="1"></p><h1 id="主进程"><a href="#主进程" class="headerlink" title="主进程"></a>主进程</h1><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p><code>package.json</code> 中 <code>main</code> 字段对应的 <code>main.js</code>，叫做主进程。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"electron-quick-start"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"A minimal Electron application"</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"main.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"electron ."</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"repository"</span><span class="token operator">:</span> <span class="token string">"https://github.com/electron/electron-quick-start"</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"Electron"</span><span class="token punctuation">,</span>    <span class="token string">"quick"</span><span class="token punctuation">,</span>    <span class="token string">"start"</span><span class="token punctuation">,</span>    <span class="token string">"tutorial"</span><span class="token punctuation">,</span>    <span class="token string">"demo"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"GitHub"</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"CC0-1.0"</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"electron"</span><span class="token operator">:</span> <span class="token string">"~1.7.8"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> electron <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Module to control application life.</span><span class="token keyword">const</span> app <span class="token operator">=</span> electron<span class="token punctuation">.</span>app<span class="token comment" spellcheck="true">// Module to create native browser window.</span><span class="token keyword">const</span> BrowserWindow <span class="token operator">=</span> electron<span class="token punctuation">.</span>BrowserWindow<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Keep a global reference of the window object, if you don't, the window will</span><span class="token comment" spellcheck="true">// be closed automatically when the JavaScript object is garbage collected.</span><span class="token keyword">let</span> mainWindow<span class="token keyword">function</span> createWindow <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Create the browser window.</span>  mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span> <span class="token number">800</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">600</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// and load the index.html of the app.</span>  mainWindow<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    pathname<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    protocol<span class="token punctuation">:</span> <span class="token string">'file:'</span><span class="token punctuation">,</span>    slashes<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// Open the DevTools.</span>  <span class="token comment" spellcheck="true">// mainWindow.webContents.openDevTools()</span>  <span class="token comment" spellcheck="true">// Emitted when the window is closed.</span>  mainWindow<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'closed'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Dereference the window object, usually you would store windows</span>    <span class="token comment" spellcheck="true">// in an array if your app supports multi windows, this is the time</span>    <span class="token comment" spellcheck="true">// when you should delete the corresponding element.</span>    mainWindow <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// This method will be called when Electron has finished</span><span class="token comment" spellcheck="true">// initialization and is ready to create browser windows.</span><span class="token comment" spellcheck="true">// Some APIs can only be used after this event occurs.</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'ready'</span><span class="token punctuation">,</span> createWindow<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Quit when all windows are closed.</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'window-all-closed'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// On OS X it is common for applications and their menu bar</span>  <span class="token comment" spellcheck="true">// to stay active until the user quits explicitly with Cmd + Q</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>platform <span class="token operator">!==</span> <span class="token string">'darwin'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    app<span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'activate'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// On OS X it's common to re-create a window in the app when the</span>  <span class="token comment" spellcheck="true">// dock icon is clicked and there are no other windows open.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mainWindow <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">createWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// In this file you can include the rest of your app's specific main process</span><span class="token comment" spellcheck="true">// code. You can also put them in separate files and require them here.</span></code></pre><h1 id="渲染进程"><a href="#渲染进程" class="headerlink" title="渲染进程"></a>渲染进程</h1><h2 id="renderer-js"><a href="#renderer-js" class="headerlink" title="renderer.js"></a>renderer.js</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// This file is required by the index.html file and will</span><span class="token comment" spellcheck="true">// be executed in the renderer process for that window.</span><span class="token comment" spellcheck="true">// All of the Node.js APIs are available in this process.</span></code></pre><h1 id="渲染页面"><a href="#渲染页面" class="headerlink" title="渲染页面"></a>渲染页面</h1><h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- All of the Node.js APIs are available in this renderer process. --></span>    We are using Node.js <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>node<span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>,    Chromium <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>chrome<span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>,    and Electron <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>electron<span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token comment" spellcheck="true">// You can also require other files to run in this process</span>      <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./renderer.js'</span><span class="token punctuation">)</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一个最基本的 Electron 应用包括：</p><ul><li>package.json</li><li>main.js</li><li>index.html</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://electronjs.org/docs/tutorial/quick-start" target="_blank" rel="noopener">https://electronjs.org/docs/tutorial/quick-start</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> electron </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>npmrc 中使用相关国内镜像</title>
      <link href="/2018/01/27/using-mirror-with-npmrc/"/>
      <url>/2018/01/27/using-mirror-with-npmrc/</url>
      
        <content type="html"><![CDATA[<p>国内使用 npm 安装模块很慢，而且往往出现连接超时、安装失败等问题。通过实践，我们可以在项目中创建 <code>.npmrc</code> 文件配置相关的国内镜像来加速安装。</p><a id="more"></a><h1 id="npmrc"><a href="#npmrc" class="headerlink" title=".npmrc"></a>.npmrc</h1><pre><code>phantomjs_cdnurl = https://npm.taobao.org/mirrors/phantomjs/electron_mirror = https://npm.taobao.org/mirrors/electron/registry = https://registry.npm.taobao.orgstrict-ssl = false</code></pre>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017 总结</title>
      <link href="/2017/12/31/bye-bye-2017/"/>
      <url>/2017/12/31/bye-bye-2017/</url>
      
        <content type="html"><![CDATA[<p>一眨眼，2017 年过去了。</p><a id="more"></a><h1 id="酉鸡"><a href="#酉鸡" class="headerlink" title="酉鸡"></a>酉鸡</h1><p>2017 年，鸡年。</p><h1 id="牵连"><a href="#牵连" class="headerlink" title="牵连"></a>牵连</h1><p>响应国家号召，全面停止部队有偿服务。我所健身的<code>派意健身</code>会所租用的正是部队房屋，然而会所方面却隐瞒了停业的消息并伪装成正常营业的状态欺瞒会员，直到部队贴出公告前几个小时仍然在招募会员办卡。这件事我们必须维权，使用法律武器捍卫我们消费者应有的合法权益，不能让这些黑心商家再出来坑蒙拐骗。</p><h1 id="坚持"><a href="#坚持" class="headerlink" title="坚持"></a>坚持</h1><p>健身所养成的习惯已经与我的生活完全融合，健身是我生活的一部分。我在<code>大场体育中心</code>办了健身卡，继续着健身运动。</p><h1 id="离职"><a href="#离职" class="headerlink" title="离职"></a>离职</h1><p>我就职于<code>上海帕派体育文化发展有限公司</code>（ppsports），担任<code>Web 前端工程师</code>。由于公司融资出现问题，资金链断裂导致员工工资无法正常发放，于 9 月 30 日正式离职。</p><h1 id="入职"><a href="#入职" class="headerlink" title="入职"></a>入职</h1><p>10 月 16 日我加入<code>创智汇（苏州）电子商务有限公司</code>，担任 <code>Web 前端工程师</code>，负责公司项目的前端开发。期间参与了公司 <code>1017</code> 以及 <code>1225</code> 两次大型线上活动，收获颇多。</p><p>2018 年起公司将开始施行新的规章制度，各个部门也制定了自己的操作规范手册</p><ul><li>团队的协作</li><li>部门的沟通</li><li>开发的效率</li><li>任务的执行</li></ul><p>这些将是我今后的努力方向。</p><p>对于工作和生活，引用棒哥（老板）的话：</p><blockquote><p>行为，目标，价值。生活 = 学习 = 兴趣 = 工作</p></blockquote><p>2018 年公司的重点放在蜂鸟系统和 CRM 系统，CRM 系统目前由我负责开发前端，事在人为，努力去做吧。</p><p><img src="./crm-login.png" alt="crm-login"></p><p><img src="./crm-index.png" alt="crm-index"></p><h1 id="后语"><a href="#后语" class="headerlink" title="后语"></a>后语</h1><p>最后，作为程序员，引用 linux 之父 <code>Linus Torvalds</code> 的一句话吧：</p><blockquote><p>talk is cheap, show me the code</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> essay </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何配置以 nginx 作为服务器的 php 环境</title>
      <link href="/2017/12/03/how-to-config-nginx-with-php/"/>
      <url>/2017/12/03/how-to-config-nginx-with-php/</url>
      
        <content type="html"><![CDATA[<p>本文介绍一种最简单的方式搭建以 nginx 作为服务器的 php 环境</p><a id="more"></a><h1 id="下载资源"><a href="#下载资源" class="headerlink" title="下载资源"></a>下载资源</h1><p>首先是准备工作，下载相关的资源</p><h2 id="下载-nginx-服务器"><a href="#下载-nginx-服务器" class="headerlink" title="下载 nginx 服务器"></a>下载 nginx 服务器</h2><p><a href="http://nginx.org/" target="_blank" rel="noopener">官网下载</a></p><h2 id="下载-php-包"><a href="#下载-php-包" class="headerlink" title="下载 php 包"></a>下载 php 包</h2><p><a href="http://php.net/downloads.php" target="_blank" rel="noopener">官网下载</a></p><h1 id="添加-php-路径到环境变量"><a href="#添加-php-路径到环境变量" class="headerlink" title="添加 php 路径到环境变量"></a>添加 php 路径到环境变量</h1><p><img src="./1.png" alt="添加 php 路径到环境变量"></p><h1 id="设置-nginx"><a href="#设置-nginx" class="headerlink" title="设置 nginx"></a>设置 nginx</h1><p>设置一个新的虚拟服务器</p><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>  <span class="token keyword">listen</span>  <span class="token number">3333</span><span class="token punctuation">;</span>  <span class="token keyword">server_name</span>  localhost<span class="token punctuation">;</span>  <span class="token keyword">root</span> html<span class="token punctuation">;</span>  <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>    <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>php <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">location</span> <span class="token operator">~</span> \<span class="token punctuation">.</span>php$ <span class="token punctuation">{</span>    <span class="token keyword">fastcgi_pass</span>  <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">9000</span><span class="token punctuation">;</span>    <span class="token keyword">fastcgi_index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token punctuation">;</span>    <span class="token keyword">include</span>  fastcgi<span class="token punctuation">.</span>conf<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="设置-php"><a href="#设置-php" class="headerlink" title="设置 php"></a>设置 php</h1><p>在 php 文件夹根目录中找到 <code>php.ini-development</code> 或 <code>php.ini-production</code>，任意复制一个并改名为 <code>php.ini</code></p><h1 id="运行-php-cgi"><a href="#运行-php-cgi" class="headerlink" title="运行 php-cgi"></a>运行 php-cgi</h1><pre class=" language-bash"><code class="language-bash">php-cgi.exe -b 127.0.0.1:9000</code></pre><p><img src="./2.png" alt="运行 php-cgi"></p><h1 id="测试-php"><a href="#测试-php" class="headerlink" title="测试 php"></a>测试 php</h1><p>在 nginx 目录中找到 <code>html</code> 文件夹，在里面新建一个 <code>index.php</code> 文件并添加以下代码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>然后打开浏览器输入 <code>http://localhost:3333</code></p><p><img src="./3.png" alt="查看 phpinfo"></p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> starting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 栈</title>
      <link href="/2017/09/03/js-stack/"/>
      <url>/2017/09/03/js-stack/</url>
      
        <content type="html"><![CDATA[<p>栈与列表类似，可以用来解决计算机世界里的很多问题。栈是一种高效的数据结构，因为数据只能在栈顶添加或删除，所以这样操作很快，而且很容易实现。</p><a id="more"></a><h1 id="栈的抽象数据类型定义"><a href="#栈的抽象数据类型定义" class="headerlink" title="栈的抽象数据类型定义"></a>栈的抽象数据类型定义</h1><table><thead><tr><th>成员</th><th>说明</th></tr></thead><tbody><tr><td>dataStore(属性)</td><td>保存栈内元素的数组</td></tr><tr><td>top(属性)</td><td>纪录栈顶位置</td></tr><tr><td>push(方法)</td><td>向栈添加新元素</td></tr><tr><td>pop(方法)</td><td>返回栈顶元素</td></tr><tr><td>peek(方法)</td><td>返回栈顶元素</td></tr><tr><td>length(方法)</td><td>返回栈内的元素个数</td></tr><tr><td>clear(方法)</td><td>清空栈</td></tr></tbody></table><h1 id="实现栈"><a href="#实现栈" class="headerlink" title="实现栈"></a>实现栈</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>push <span class="token operator">=</span> push<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>pop <span class="token operator">=</span> pop<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>peek <span class="token operator">=</span> peek<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>clear <span class="token operator">=</span> clear<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span><span class="token operator">--</span><span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'David'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'Raymond'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'Bryan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'length: '</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> popped <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'栈顶元素是：'</span> <span class="token operator">+</span> popped<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'Cynthia'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'长度：'</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'Clayton'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="使用-Stack-类"><a href="#使用-Stack-类" class="headerlink" title="使用 Stack 类"></a>使用 Stack 类</h1><p>有一些问题特别适合用栈来解决。</p><h2 id="数制间的相互转换"><a href="#数制间的相互转换" class="headerlink" title="数制间的相互转换"></a>数制间的相互转换</h2><ul><li>最高位为 n % b，将此位压入栈</li><li>使用 n/b 代替 n</li><li>重复步骤 1 和 2，直到 n 等于 0，且没有余数</li><li>持续将栈内元素弹出，直到栈为空，依次将这些元素排列，就得到转换后数字的字符串形式。</li></ul><blockquote><p>次算法只针对基数为 2-9 的情况</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">mulBase</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">do</span> <span class="token punctuation">{</span>    s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num <span class="token operator">%</span> base<span class="token punctuation">)</span><span class="token punctuation">;</span>    num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>num <span class="token operator">/</span><span class="token operator">=</span> base<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> converted <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    converted <span class="token operator">+</span><span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> converted<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span><span class="token keyword">var</span> base <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">var</span> newNum <span class="token operator">=</span> <span class="token function">mulBase</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">' 转为'</span> <span class="token operator">+</span> base <span class="token operator">+</span> <span class="token string">'进制是 '</span> <span class="token operator">+</span> newNum<span class="token punctuation">)</span><span class="token punctuation">;</span>num <span class="token operator">=</span> <span class="token number">125</span><span class="token punctuation">;</span>base <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>newNum <span class="token operator">=</span> <span class="token function">mulBase</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> base<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">' 转为'</span> <span class="token operator">+</span> base <span class="token operator">+</span> <span class="token string">'进制是 '</span> <span class="token operator">+</span> newNum<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="回文"><a href="#回文" class="headerlink" title="回文"></a>回文</h2><p>回文是指这样一种现象：一个单词、短语或数字，从前往后写和从后往前写都是一样的。使用栈可以轻松判断一个字符是否是回文。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> word<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> rword <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    rword <span class="token operator">+</span><span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>word <span class="token operator">===</span> rword<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> word <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>word <span class="token operator">+</span> <span class="token string">' 是回文'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>word <span class="token operator">+</span> <span class="token string">' 不是回文'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>word <span class="token operator">=</span> <span class="token string">'racecar'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>word <span class="token operator">+</span> <span class="token string">' 是回文'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>word <span class="token operator">+</span> <span class="token string">' 不是回文'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="递归演示"><a href="#递归演示" class="headerlink" title="递归演示"></a>递归演示</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 栈模拟阶乘</span><span class="token keyword">function</span> <span class="token function">fact</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> product <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    product <span class="token operator">*</span><span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> product<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fact</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>数据结构与算法 JavaScript 描述</li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
            <tag> es5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 列表</title>
      <link href="/2017/09/02/js-list/"/>
      <url>/2017/09/02/js-list/</url>
      
        <content type="html"><![CDATA[<p>在日常生活中，人们经常使用列表：待办事项列表、购物清单、十佳榜单、最后十名榜单等。计算机程序也在使用列表，尤其是列表中保存的元素不是太多事。当不需要在一个很长的序列中查找元素，或者对其进行排序时，列表显得尤为有用。反之，如果数据结构非常复杂，列表的作用就没有那么大了。</p><h1 id="列表的抽象数据类型定义"><a href="#列表的抽象数据类型定义" class="headerlink" title="列表的抽象数据类型定义"></a>列表的抽象数据类型定义</h1><table><thead><tr><th>成员</th><th>说明</th></tr></thead><tbody><tr><td>listSize(属性)</td><td>列表的元素个数</td></tr><tr><td>pos(属性)</td><td>列表的当前位置</td></tr><tr><td>length(属性)</td><td>返回列表中元素的个数</td></tr><tr><td>clear(方法)</td><td>清空列表中的所有元素</td></tr><tr><td>toString(方法)</td><td>返回列表的字符串形式</td></tr><tr><td>getElement(方法)</td><td>返回当前位置的元素</td></tr><tr><td>insert(方法)</td><td>在现有元素后插入新元素</td></tr><tr><td>append(方法)</td><td>在列表的末尾添加新元素</td></tr><tr><td>remove(方法)</td><td>从列表中删除元素</td></tr><tr><td>front(方法)</td><td>将列表的当前位置移动到第一个元素</td></tr><tr><td>end(方法)</td><td>将列表的当前位置移动到最后一个元素</td></tr><tr><td>prev(方法)</td><td>将当前位置后移一位</td></tr><tr><td>next(方法)</td><td>将当前位置前移一位</td></tr><tr><td>currPos(方法)</td><td>返回列表的当前位置</td></tr><tr><td>moveTo(方法)</td><td>将当前位置移动到指定位置</td></tr></tbody></table><h1 id="实现列表类"><a href="#实现列表类" class="headerlink" title="实现列表类"></a>实现列表类</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>listSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化一个空数组来保存列表元素</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>clear <span class="token operator">=</span> clear<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>find <span class="token operator">=</span> find<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>toString <span class="token operator">=</span> toString<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>insert <span class="token operator">=</span> insert<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>append <span class="token operator">=</span> append<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>remove <span class="token operator">=</span> remove<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>front <span class="token operator">=</span> front<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>currPos <span class="token operator">=</span> currPos<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>moveTo <span class="token operator">=</span> moveTo<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>getElement <span class="token operator">=</span> getElement<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>contains <span class="token operator">=</span> contains<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实现 append() 方法，当新元素就位后，变量 listSize 加 1</span><span class="token keyword">function</span> <span class="token function">append</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listSize<span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实现 find() 方法，查找元素在列表中的位置</span><span class="token keyword">function</span> <span class="token function">find</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> i    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实现 remove() 方法，首先使用 find() 方法在列表中找到该元素，然后删除它。</span><span class="token keyword">function</span> <span class="token function">remove</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> foundAt <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>foundAt <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>foundAt<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">--</span><span class="token keyword">this</span><span class="token punctuation">.</span>listSize<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实现 length 方法，返回列表中元素的个数</span><span class="token keyword">function</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listSize<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实现 toString() 方法</span><span class="token keyword">function</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 严格说来，该方法返回的是一个数组，而不是一个字符串，但它的目的是为了显示列表的当前状态，因此返回一个数组就足够了</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实现 insert() 方法，使用 find() 方法找到传入参数的位置，然后使用 splice() 方法插入新元素</span><span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> after<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> insertPos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>after<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>insertPos <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>insertPos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>listSize<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实现 clear() 方法</span><span class="token keyword">function</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>listSize <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实现 contains() 方法，判断一个给定值是否在列表中</span><span class="token keyword">function</span> <span class="token function">contains</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实现遍历方法</span><span class="token keyword">function</span> <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">--</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">currPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">moveTo</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> position<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'Cynthia'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'Raymond'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'Barbara'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'Raymond'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'Clayton'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'Raymond'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'Cynthia'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'Jennifer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'Bryan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'Danny'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="使用迭代器访问列表"><a href="#使用迭代器访问列表" class="headerlink" title="使用迭代器访问列表"></a>使用迭代器访问列表</h1><p>使用迭代器，可以不必关心数据的内部存储方式，以实现对列表的遍历。</p><p>优点</p><ul><li>访问列表元素时不必关心底层的数据存储结构</li><li>当为列表添加一个元素时，索引的值就不对了，此时只用更新列表，而不用更新迭代器</li><li>可以用不同类型的数据存储方式实现 List 类，迭代器为访问列表里的元素提供了一种统一的方式</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> names<span class="token punctuation">.</span><span class="token function">currPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> names<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> names<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 从后向前遍历列表</span><span class="token keyword">for</span> <span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> names<span class="token punctuation">.</span><span class="token function">currPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> names<span class="token punctuation">.</span><span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>数据结构与算法 JavaScript 描述</li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
            <tag> es5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 数组</title>
      <link href="/2017/09/01/js-array/"/>
      <url>/2017/09/01/js-array/</url>
      
        <content type="html"><![CDATA[<p>JavaScript 中的数组是一种特殊的对象，用来表示偏移量的索引是该对象的属性，索引可能是整数。然而，这些数字索引在内部被转换为字符串类型，这是因为 JavaScript 对象中的属性名必须是字符串。数组在 JavaScript 中只是一种特殊的对象，所以效率上不如其他语言中的数组高。</p><p>JavaScript中的数组，严格来说应该称作对象，是特殊的 JavaScript 对象，在内部被归类为数组。由于 Array 在 JavaScript 中被当作对象，因此它有许多属性和方法可以在编程时使用。</p><a id="more"></a><h1 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h1><p>JavaScript 有多种创建数组的方式，大多数 JavaScript 专家推荐使用 [] 操作符，这种方式被认为效率更高。</p><h2 id="使用-操作符"><a href="#使用-操作符" class="headerlink" title="使用 [] 操作符"></a>使用 [] 操作符</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h2 id="使用-new-Array-构造函数"><a href="#使用-new-Array-构造函数" class="headerlink" title="使用 new Array 构造函数"></a>使用 new Array 构造函数</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 指定初始值</span><span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 指定数组长度</span><span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><h2 id="元素可以是不同类型"><a href="#元素可以是不同类型" class="headerlink" title="元素可以是不同类型"></a>元素可以是不同类型</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> objects <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'joe'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">null</span> <span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h2 id="Array-isArray-判断是否是数组"><a href="#Array-isArray-判断是否是数组" class="headerlink" title="Array.isArray() 判断是否是数组"></a>Array.isArray() 判断是否是数组</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1776</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h1 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h1><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span>    numbers<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 15</span></code></pre><p>读取所有元素，可以用 for 循环</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 数组的长度可以任意增长，使用 length 属性确保遍历所有元素</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  sum <span class="token operator">+</span><span class="token operator">=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 53</span></code></pre><h2 id="字符串生成数组"><a href="#字符串生成数组" class="headerlink" title="字符串生成数组"></a>字符串生成数组</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> sentence <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span><span class="token keyword">var</span> words <span class="token operator">=</span> sentence<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'word'</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">': '</span> <span class="token operator">+</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="潜复制"><a href="#潜复制" class="headerlink" title="潜复制"></a>潜复制</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> samenums <span class="token operator">=</span> nums<span class="token punctuation">;</span></code></pre><p>数组是引用类型，这种赋值只是为新赋值的数组增加了一个新的引用。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> samenums <span class="token operator">=</span> nums<span class="token punctuation">;</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>samenums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 400</span></code></pre><h2 id="深复制"><a href="#深复制" class="headerlink" title="深复制"></a>深复制</h2><p>为了达到预期效果，可以写一个深复制函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">copy</span><span class="token punctuation">(</span>originArr<span class="token punctuation">,</span> targetArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> originArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    targetArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> originArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> samenums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">copy</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> samenums<span class="token punctuation">)</span><span class="token punctuation">;</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>samenums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><h1 id="存取函数"><a href="#存取函数" class="headerlink" title="存取函数"></a>存取函数</h1><p>JavaScript 提供了一组用来访问数组元素的函数，叫做存取函数，这些函数返回目标数组的某种变体。</p><h2 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'David'</span><span class="token punctuation">,</span> <span class="token string">'Cyntha'</span><span class="token punctuation">,</span> <span class="token string">'Raymond'</span><span class="token punctuation">,</span> <span class="token string">'Clayton'</span><span class="token punctuation">,</span> <span class="token string">'Jennifer'</span><span class="token punctuation">,</span> <span class="token string">'David'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'David'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从数组第一个位置开始</span><span class="token keyword">var</span> position <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span><span class="token keyword">var</span> lastPosition <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span><span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'找到 '</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">' 在位置 '</span> <span class="token operator">+</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">' 不在数组内'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>lastPosition <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'找到 '</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">' 在位置 '</span> <span class="token operator">+</span> lastPosition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">' 不在数组内'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="数组转字符串"><a href="#数组转字符串" class="headerlink" title="数组转字符串"></a>数组转字符串</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'David'</span><span class="token punctuation">,</span> <span class="token string">'Cyntha'</span><span class="token punctuation">,</span> <span class="token string">'Raymond'</span><span class="token punctuation">,</span> <span class="token string">'Clayton'</span><span class="token punctuation">,</span> <span class="token string">'Jennifer'</span><span class="token punctuation">,</span> <span class="token string">'David'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> nameStr <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nameStr<span class="token punctuation">)</span><span class="token punctuation">;</span>nameStr <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nameStr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> webDept <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'王五'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> javaDept <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'老张'</span><span class="token punctuation">,</span> <span class="token string">'阿飞'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> itDept <span class="token operator">=</span> webDept<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>javaDept<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>itDept<span class="token punctuation">)</span><span class="token punctuation">;</span>itDept <span class="token operator">=</span> javaDept<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>webDept<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>itDept<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>webDept<span class="token punctuation">,</span> javaDept<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>concat 方法返回新数组，源数组不受影响。</p><h2 id="截取数组"><a href="#截取数组" class="headerlink" title="截取数组"></a>截取数组</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> itDept <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">,</span> <span class="token string">'老张'</span><span class="token punctuation">,</span> <span class="token string">'阿飞'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> webDept <span class="token operator">=</span> itDept<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> javaDept <span class="token operator">=</span> itDept<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>webDept<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// '小明', '张三', '王五'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>javaDept<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// '老张', '阿飞'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>itDept<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// '老张', '阿飞'</span></code></pre><p>splice 返回截取的元素并删除源数组中的对应的元素。</p><h1 id="可变函数"><a href="#可变函数" class="headerlink" title="可变函数"></a>可变函数</h1><p>JavaScript 拥有一组可变函数，使用它们，可以不必引用数组中的某个元素，就能改变数组内容。这些函数常常化繁为简，让困难的事情变得容易。</p><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用 push</span><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>nums<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 也可以使用 length 属性</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把元素添加到数组开头使用 unshift</span>nums<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 任意位置添加元素 splice</span>nums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除数组末尾元素</span>nums<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除第一个元素</span>nums<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除任意位置元素</span>nums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 元素反转</span>nums<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 按字典顺序排序</span><span class="token keyword">var</span> names <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'David'</span><span class="token punctuation">,</span> <span class="token string">'Mike'</span><span class="token punctuation">,</span> <span class="token string">'Cyntha'</span><span class="token punctuation">,</span> <span class="token string">'Clayton'</span><span class="token punctuation">,</span> <span class="token string">'Bryan'</span><span class="token punctuation">,</span> <span class="token string">'Raymond'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 数字排序使用自定义排序</span><span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span>nums <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">200</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="迭代器方法"><a href="#迭代器方法" class="headerlink" title="迭代器方法"></a>迭代器方法</h1><p>迭代器方法对数组中的每个元素应用一个函数，可以返回一个值，一组值或者一个新数组。</p><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h2><p>该方法接受一个函数作为参数，对数组中的每个元素使用该函数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> num <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>nums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h2><p>该方法接受一个返回值为布尔类型的函数，对数组中的每个元素使用该函数。如果对于所有元素，该函数均返回 true,则该方法返回 true。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isEven</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> even <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>even<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'所有元素是偶数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'不是所有元素是偶数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>nums <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>even <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>even<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'所有元素是偶数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'不是所有元素是偶数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h2><p>some() 方法也接受一个返回布尔类型的函数，只要有一个元素使得该函数返回 true，该方法就返回 true。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isEven</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> someEven <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>someEven<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'部分元素是偶数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'没有元素是偶数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>nums <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>someEven <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>someEven<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'部分元素是偶数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'没有元素是偶数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h2><p>reduce() 方法接受一个函数，返回一个值。该方法会从一个累加值开始，不断对累加值和数组中的后续元素调用该函数，直到数组中的最后一个元素，最后返回得到的累加值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>runningTotal<span class="token punctuation">,</span> currentValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> runningTotal <span class="token operator">*</span> currentValue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 连接数组中的字符串</span><span class="token keyword">function</span> <span class="token function">concat</span><span class="token punctuation">(</span>accumulatedString<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> accumulatedString <span class="token operator">+</span> item<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> words <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'the '</span><span class="token punctuation">,</span> <span class="token string">'quick '</span><span class="token punctuation">,</span> <span class="token string">'brown '</span><span class="token punctuation">,</span> <span class="token string">'fox '</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> sentence <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>concat<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight()"></a>reduceRight()</h2><p>JavaScript 还提供了 reduceRight() 方法，和 reduce() 方法不同，它是从右到左执行。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">concat</span><span class="token punctuation">(</span>accumulatedString<span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> accumulatedString <span class="token operator">+</span> item<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> words <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'the '</span><span class="token punctuation">,</span> <span class="token string">'quick '</span><span class="token punctuation">,</span> <span class="token string">'brown '</span><span class="token punctuation">,</span> <span class="token string">'fox '</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> sentence <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span>concat<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h2><p>map() 和 forEach() 有点儿像，对数组中的每个元素使用某个函数。两者的区别是 map() 返回一个新的数组，该数组的元素是对原有元素应用某个函数得到的结果。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">curve</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> grade <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> grades <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">83</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newgrades <span class="token operator">=</span> grades<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>curve<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newgrades<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 82, 70, 86, 97, 88</span><span class="token comment" spellcheck="true">// 字符串操作</span><span class="token keyword">function</span> <span class="token function">first</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'for'</span><span class="token punctuation">,</span> <span class="token string">'your'</span><span class="token punctuation">,</span> <span class="token string">'information'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> acronym <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>acronym<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'fyi'</span></code></pre><h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><p>filter() 和 every() 类似，传入一个返回值为布尔类型的函数。和 every() 方法不同的是，当对数组中的所有元素应用该数组，结果均为 true 时，该方法并不返回 true，而是返回一个新数组，该数组包含应用该函数后结果为 true 的元素。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isEven</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">isOdd</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> evens <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'偶数是：'</span> <span class="token operator">+</span> evens<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> odds <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>odd<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'奇数是：'</span> <span class="token operator">+</span> odds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 筛选成绩 >= 60 分的分数</span><span class="token keyword">function</span> <span class="token function">passing</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> num <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> grades <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  grades<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> passGrades <span class="token operator">=</span> grades<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>passing<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'所有等级：'</span> <span class="token operator">+</span> grades<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'通过等级：'</span> <span class="token operator">+</span> passGrades<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 过滤字符串数组</span><span class="token keyword">function</span> <span class="token function">afterc</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'cie'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> words <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'recieve'</span><span class="token punctuation">,</span> <span class="token string">'deceive'</span><span class="token punctuation">,</span> <span class="token string">'percieve'</span><span class="token punctuation">,</span> <span class="token string">'deceit'</span><span class="token punctuation">,</span> <span class="token string">'concieve'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> misspelled <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>afterc<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>misspelled<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// recieve, percieve, concieve</span></code></pre><h1 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h1><p>JavaScript 只支持一维数组，但是通过在数组里保存数组元素的方式，可以轻松创建多维数组。</p><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><h3 id="创建二维数组"><a href="#创建二维数组" class="headerlink" title="创建二维数组"></a>创建二维数组</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> twod <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> rows <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  twod<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 更好的方式可以参考 Crockford 的对 Array 的扩展方法</span>Array<span class="token punctuation">.</span>matrix <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>numrows<span class="token punctuation">,</span> numcols<span class="token punctuation">,</span> initial<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numrows<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> numcols<span class="token punctuation">;</span> j <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      columns<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> initial<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> columns<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> nums <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">matrix</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span><span class="token keyword">var</span> names <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">matrix</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Joe'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'Joe'</span></code></pre><h3 id="处理二维数组的元素"><a href="#处理二维数组的元素" class="headerlink" title="处理二维数组的元素"></a>处理二维数组的元素</h3><p>处理二维数组中的元素，有两种最基本的方式：按列访问和按行访问。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 按列访问</span><span class="token keyword">var</span> grades <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">78</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">81</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">89</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> average <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> grades<span class="token punctuation">.</span>length<span class="token punctuation">;</span> row <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> grades<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> col <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    total <span class="token operator">+</span><span class="token operator">=</span> grades<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  average <span class="token operator">=</span> total <span class="token operator">/</span> grades<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'学生 '</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' 平均成绩：'</span> <span class="token operator">+</span> average<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  average <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>按行访问，只需要稍微调整 for 循环的顺序，使外层循环对应列，内层循环对应行即可。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 按行访问</span><span class="token keyword">var</span> grades <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">78</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">81</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">89</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> average <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> grades<span class="token punctuation">.</span>length<span class="token punctuation">;</span> col <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> grades<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> row <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    total <span class="token operator">+</span><span class="token operator">=</span> grades<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  average <span class="token operator">=</span> total <span class="token operator">/</span> grades<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'考试 '</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' 平均成绩：'</span> <span class="token operator">+</span> average<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  average <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="参差不齐的数组"><a href="#参差不齐的数组" class="headerlink" title="参差不齐的数组"></a>参差不齐的数组</h3><p>参差不齐的数组是指数组中每行的元素个数彼此不同。有一行可能包含三个元素，另一行可能包含五个元素，有些行甚至只包含一个元素。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> grades <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">77</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">82</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">99</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> average <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> grades<span class="token punctuation">.</span>length<span class="token punctuation">;</span> row <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> grades<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> col <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    total <span class="token operator">+</span><span class="token operator">=</span> grades<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  average <span class="token operator">=</span> total <span class="token operator">/</span> grades<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'学生 '</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' 平均成绩：'</span> <span class="token operator">+</span> average<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  average <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h1><p>数组可以包含对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">displayPts</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">', '</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> points <span class="token operator">=</span> <span class="token punctuation">[</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">,</span> p4 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> points<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'点 '</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">': '</span> <span class="token operator">+</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">', '</span> <span class="token operator">+</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> p5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>points<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'添加后：'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">displayPts</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">;</span>points<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'删除第一个元素后：'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">displayPts</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="对象中的数组"><a href="#对象中的数组" class="headerlink" title="对象中的数组"></a>对象中的数组</h1><p>在对象中，可以使用数组存储复杂的数据。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">weekTemps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>add <span class="token operator">=</span> add<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>average <span class="token operator">=</span> average<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    total <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> total <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataStore<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> thisWeek <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">weekTemps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thisWeek<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thisWeek<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thisWeek<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">61</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thisWeek<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thisWeek<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thisWeek<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thisWeek<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>thisWeek<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>thisWeek<span class="token punctuation">.</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="优雅降级"><a href="#优雅降级" class="headerlink" title="优雅降级"></a>优雅降级</h1><p>对于一些老的浏览器可以推荐使用 Lodash 库来进行优雅降级。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>数据结构与算法 JavaScript 描述</li><li><a href="https://lodash.com/" target="_blank" rel="noopener">Lodash</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">Array - JavaScript | MDN</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
            <tag> es5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算阶乘</title>
      <link href="/2017/07/22/factorial/"/>
      <url>/2017/07/22/factorial/</url>
      
        <content type="html"><![CDATA[<p>JavaScript 中的阶乘算法</p><h1 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> number  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> number <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="迭代算法"><a href="#迭代算法" class="headerlink" title="迭代算法"></a>迭代算法</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> multiplicand <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> number <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span> number <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    multiplicand <span class="token operator">*</span><span class="token operator">=</span> number  <span class="token punctuation">}</span>  <span class="token keyword">return</span> multiplicand<span class="token punctuation">}</span></code></pre><h2 id="利用-reduce-或-reduceRight-方法"><a href="#利用-reduce-或-reduceRight-方法" class="headerlink" title="利用 reduce() 或 reduceRight() 方法"></a>利用 reduce() 或 reduceRight() 方法</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> number<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    numbers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> accumulator <span class="token operator">*</span> currentValue<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> number<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    numbers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> numbers<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> accumulator <span class="token operator">*</span> currentValue<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es5 </tag>
            
            <tag> factorial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动词ない形的变换规则</title>
      <link href="/2017/04/18/the-conversion-of-nai/"/>
      <url>/2017/04/18/the-conversion-of-nai/</url>
      
        <content type="html"><![CDATA[<p>动词ない形的变换规则</p><a id="more"></a><h1 id="变换方式"><a href="#变换方式" class="headerlink" title="变换方式"></a>变换方式</h1><ul><li>一类动词去掉“ます”后，最后一个音变成相应“あ段”音，然后加“ない”。如果最后一个音为“い”，把“い”变成“わ”，然后加“ない”</li><li>二类动词去掉“ます”加“ない”</li><li>三类动词“来ます”变成“来ない”，“します”加“しない”</li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><table style="display:table"><thead><tr><th>类别</th><th>ます形</th><th>去掉ます</th><th>ない形</th></tr></thead><tbody><tr><td rowspan="9" style="background-color:#fff">一类动词</td><td>書きます</td><td>書き</td><td>書かない</td></tr><tr><td>急ぎます</td><td>急ぎ</td><td>急がない</td></tr><tr><td>飛びます</td><td>飛び</td><td>飛ばない</td></tr><tr><td>読みます</td><td>読み</td><td>読まない</td></tr><tr><td>死にます</td><td>死に</td><td>死なない</td></tr><tr><td>待ちます</td><td>待ち</td><td>待たない</td></tr><tr><td>売ります</td><td>売り</td><td>売らない</td></tr><tr><td>買います</td><td>買い</td><td>買わない</td></tr><tr><td>話します</td><td>話し</td><td>話さない</td></tr><tr><td rowspan="2" style="background-color:#fff">二类动词</td><td>食べます</td><td>食べ</td><td>食べない</td></tr><tr><td>見ます</td><td>見</td><td>見ない</td></tr><tr><td rowspan="2" style="background-color:#fff">三类动词</td><td>来ます</td><td>来</td><td>来ない</td></tr><tr><td>します</td><td>し</td><td>しない</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> japanese </category>
          
      </categories>
      
      
        <tags>
            
            <tag> grammar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动词て形的变换规则</title>
      <link href="/2017/04/17/the-conversion-of-te/"/>
      <url>/2017/04/17/the-conversion-of-te/</url>
      
        <content type="html"><![CDATA[<p>动词て形的变换规则</p><a id="more"></a><h1 id="变换方式"><a href="#变换方式" class="headerlink" title="变换方式"></a>变换方式</h1><ul><li>一类动词去掉“ます”加“て”</li><li>二类动词去掉“ます”加“て”</li><li>三类动词去掉“ます”加“て”</li></ul><blockquote><p>注意：一类动词て形时的发音变化</p><p>き → いて</p><p>ぎ → いで</p><p>び、み、に → んで</p><p>ち、り、い → って</p><p>し → して</p></blockquote><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><table style="display:table"><thead><tr><th>类别</th><th>ます形</th><th>去掉ます</th><th>て形</th></tr></thead><tbody><tr><td rowspan="10">一类动词</td><td>書きます</td><td>書き</td><td>書いて</td></tr><tr><td>行きます</td><td>行き</td><td>行って</td></tr><tr><td>急ぎます</td><td>急ぎ</td><td>急いで</td></tr><tr><td>飛びます</td><td>飛び</td><td>飛んで</td></tr><tr><td>読みます</td><td>読み</td><td>読んで</td></tr><tr><td>死にます</td><td>死に</td><td>死んで</td></tr><tr><td>待ちます</td><td>待ち</td><td>待って</td></tr><tr><td>売ります</td><td>売り</td><td>売って</td></tr><tr><td>買います</td><td>買い</td><td>買って</td></tr><tr><td>話します</td><td>話し</td><td>話して</td></tr><tr><td rowspan="2">二类动词</td><td>食べます</td><td>食べ</td><td>食べて</td></tr><tr><td>見ます</td><td>見</td><td>見て</td></tr><tr><td rowspan="2">三类动词</td><td>来ます</td><td>来</td><td>来て</td></tr><tr><td>します</td><td>し</td><td>して</td></tr></tbody></table><blockquote><p>“行きます”属于例外，其“て形”是“行って”</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> japanese </category>
          
      </categories>
      
      
        <tags>
            
            <tag> grammar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于微信缩略图无法获取</title>
      <link href="/2017/04/08/about-wechat-thumbnail-no-longer-supported/"/>
      <url>/2017/04/08/about-wechat-thumbnail-no-longer-supported/</url>
      
        <content type="html"><![CDATA[<p>最近升级了安卓版微信 6.5.6 或者 6.5.7 版，于是很多小伙伴们的微信分享就无法获取 300x300 的首张图片作为缩略图了。</p><a id="more"></a><h1 id="微信公众号与-JSSDK"><a href="#微信公众号与-JSSDK" class="headerlink" title="微信公众号与 JSSDK"></a>微信公众号与 JSSDK</h1><p>我们何尝不想使用微信官方的 API 呢？但是作为个人开发者，微信官方就是限制得这么恶心。</p><p><img src="./1.png" alt="1" title="1"></p><p>那好，我去认证。</p><p><img src="./2.png" alt="2" title="2"></p><p>WTF~，&amp;^%$#@!，既然如此那么果断弃坑。</p><h1 id="开发者们是聪明的"><a href="#开发者们是聪明的" class="headerlink" title="开发者们是聪明的"></a>开发者们是聪明的</h1><p>俗话说：上有政策，下有对策。作为开发者，作为玩代码的人，我们必须具备 hackable 精神。聪明的小伙伴发现了这个规律，微信分享缩略图会自动抓取网页上面第一张尺寸大于等于 300x300 的图片作为分享卡片的缩略图。那么 hackable 技巧来了</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> none</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>your-thumbnail-300x300<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>这样我们就不需要微信公众号和 JSSDK，就可以设置我们想要的分享缩略图了。</p><h1 id="政策变了，那就蛋疼了"><a href="#政策变了，那就蛋疼了" class="headerlink" title="政策变了，那就蛋疼了"></a>政策变了，那就蛋疼了</h1><p>那么先看看微信做了哪些调整</p><p><a href="https://mp.weixin.qq.com/s/hAdtKl2i4ilyo9HxT1kXyw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/hAdtKl2i4ilyo9HxT1kXyw</a></p><p>6.5.4 与 6.5.7 对比</p><p><img src="./6.5.4.png" alt="6.5.4" title="6.5.4"></p><p><img src="./6.5.7.png" alt="6.5.7" title="6.5.7"></p><p>NO~！我可爱的缩略图没了。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>卸载安卓版微信 6.5.6 或 6.5.7 , 重新安装回 6.5.4 版本。还没有升级的小伙伴就别着急升级啦，先观望观望吧。</p><p>下载链接</p><p><a href="http://dldir1.qq.com/weixin/android/weixin654android1000.apk" target="_blank" rel="noopener">http://dldir1.qq.com/weixin/android/weixin654android1000.apk</a></p>]]></content>
      
      
      <categories>
          
          <category> essay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css4 可变性伪类</title>
      <link href="/2017/03/15/css4-mutability-pseudo-class/"/>
      <url>/2017/03/15/css4-mutability-pseudo-class/</url>
      
        <content type="html"><![CDATA[<p>css4 可变性伪类</p><a id="more"></a><h1 id="可变性伪类"><a href="#可变性伪类" class="headerlink" title="可变性伪类"></a>可变性伪类</h1><p>可变性伪类表示元素内容为用户更改或不可更改。<code>:read-only</code> 表示网站中大多数用户不可编辑的内容。<code>:read-write</code> 表示用户可更改的 input 元素或者元素设置了在 HTML5 中引入的 contenteditable 属性，它允许用户编辑元素的内容。</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token pseudo-class">:read-only</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* declarations */</span><span class="token punctuation">}</span><span class="token selector"><span class="token pseudo-class">:read-write</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* declarations */</span><span class="token punctuation">}</span></code></pre><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token pseudo-class">:read-only</span> </span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> Verdana, Arial, sans-serif<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token pseudo-class">:read-write</span> </span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> Trebuchet MS, Times New Roman, sans-serif<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px dotted gray<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个例子中，设置所有用户不可更改的内容的字体为 <code>Verdana, Arial, sans-serif</code>，可更改的 input 元素或者可编辑内容的元素设置不同的字体并带有灰色点线边框。</p><p>＃ 浏览器支持情况</p><p><a href="http://css4.rocks/selectors-level-4/mutability-pseudo-classes.php" target="_blank" rel="noopener">http://css4.rocks/selectors-level-4/mutability-pseudo-classes.php</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="http://css4-selectors.com/selector/css4/mutability-pseudo-class" target="_blank" rel="noopener">http://css4-selectors.com/selector/css4/mutability-pseudo-class</a></li><li><a href="http://css4.rocks/selectors-level-4/mutability-pseudo-classes.php" target="_blank" rel="noopener">http://css4.rocks/selectors-level-4/mutability-pseudo-classes.php</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css4 可选性伪类</title>
      <link href="/2017/03/15/css4-optionality-pseudo-class/"/>
      <url>/2017/03/15/css4-optionality-pseudo-class/</url>
      
        <content type="html"><![CDATA[<p>css4 可选性伪类</p><a id="more"></a><h1 id="可选性伪类"><a href="#可选性伪类" class="headerlink" title="可选性伪类"></a>可选性伪类</h1><p>可选性伪类选择表单必需元素或表单可选元素。每个 非 <code>:required</code> 的 input 元素通过 <code>:optional</code> 选择。</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token pseudo-class">:required</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* declarations */</span><span class="token punctuation">}</span><span class="token selector"><span class="token pseudo-class">:optional</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* declarations */</span><span class="token punctuation">}</span></code></pre><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token pseudo-class">:required</span> </span><span class="token punctuation">{</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token pseudo-class">:optional</span> </span><span class="token punctuation">{</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid gray<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个例子给可选的 input 元素添加灰色边框，给必需的 input 元素添加红色边框。</p><h1 id="浏览器支持情况"><a href="#浏览器支持情况" class="headerlink" title="浏览器支持情况"></a>浏览器支持情况</h1><p><a href="http://caniuse.com/#feat=css-optional-pseudo" target="_blank" rel="noopener">http://caniuse.com/#feat=css-optional-pseudo</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="http://css4-selectors.com/selector/css4/optionality-pseudo-class" target="_blank" rel="noopener">http://css4-selectors.com/selector/css4/optionality-pseudo-class</a></li><li><a href="http://css4.rocks/selectors-level-4/optionality-pseudo-classes.php" target="_blank" rel="noopener">http://css4.rocks/selectors-level-4/optionality-pseudo-classes.php</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css4 范围伪类</title>
      <link href="/2017/03/15/css4-range-pseudo-class/"/>
      <url>/2017/03/15/css4-range-pseudo-class/</url>
      
        <content type="html"><![CDATA[<p>css4 范围伪类</p><a id="more"></a><h1 id="范围伪类"><a href="#范围伪类" class="headerlink" title="范围伪类"></a>范围伪类</h1><p>有效性伪类是范围限制元素的选择器。<code>:in-range</code> 选择值在指定范围内的元素，<code>:out-of-range</code> 选择值在指定范围外的元素。</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token pseudo-class">:in-range</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* declarations */</span><span class="token punctuation">}</span><span class="token selector"><span class="token pseudo-class">:out-of-range</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* declarations */</span><span class="token punctuation">}</span></code></pre><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token pseudo-class">:in-range</span> </span><span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token pseudo-class">:out-of-range</span> </span><span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.6</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上述示例设置 <code>:in-range</code> 元素的 <code>opacity</code> 为 <code>1.0</code>，设置 <code>:out-of-range</code> 元素的为 <code>0.6</code>。</p><p>＃ 浏览器兼容情况</p><p><a href="http://caniuse.com/#feat=css-in-out-of-range" target="_blank" rel="noopener">http://caniuse.com/#feat=css-in-out-of-range</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="http://css4-selectors.com/selector/css4/validity-pseudo-class" target="_blank" rel="noopener">http://css4-selectors.com/selector/css4/validity-pseudo-class</a></li><li><a href="http://css4.rocks/selectors-level-4/range-pseudo-classes.php" target="_blank" rel="noopener">http://css4.rocks/selectors-level-4/range-pseudo-classes.php</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css4 时间维度伪类</title>
      <link href="/2017/03/13/css4-time-dimensional-pseudo-class/"/>
      <url>/2017/03/13/css4-time-dimensional-pseudo-class/</url>
      
        <content type="html"><![CDATA[<p>css4 时间维度伪类</p><a id="more"></a><h1 id="时间维度伪类"><a href="#时间维度伪类" class="headerlink" title="时间维度伪类"></a>时间维度伪类</h1><p>这个伪类叫做时间维度伪类，它会在一个时间维度元素中选择当前活跃位置，比如在 HTML 语音渲染期间或者在 <a href="http://gingertech.net/2008/12/12/attaching-subtitles-to-html5-video/" target="_blank" rel="noopener">HTML5 视频字幕</a>的显示期间。所有这些选择器类似 :matches()，它们也接受一个可选的简单选择器列表作为参数。这 3 个伪类的不同之处是 :past 选择所有 :current 元素的前一个相邻元素，显然 :future 选择所有 :current 元素的下一个相邻元素。</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 当前 */</span><span class="token selector"><span class="token pseudo-class">:current</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* declarations */</span> <span class="token punctuation">}</span><span class="token selector"><span class="token pseudo-class">:current(s1[, s2, …])</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* declarations */</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 过去 */</span><span class="token selector"><span class="token pseudo-class">:past</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* declarations */</span> <span class="token punctuation">}</span><span class="token selector"><span class="token pseudo-class">:past(s1[, s2, …])</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* declarations */</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 未来 */</span><span class="token selector"><span class="token pseudo-class">:future</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* declarations */</span> <span class="token punctuation">}</span><span class="token selector"><span class="token pseudo-class">:future(s1[, s2, …])</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* declarations */</span> <span class="token punctuation">}</span></code></pre><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token pseudo-class">:current(p, span)</span> </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token pseudo-class">:past(p, span)</span>,<span class="token pseudo-class">:future(p, span)</span> </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这些选择器规则表示用黄色背景高亮当前演讲读到的区域，用灰色背景高亮当前元素的上一个以及下一个相邻元素。</p><h1 id="浏览器支持情况"><a href="#浏览器支持情况" class="headerlink" title="浏览器支持情况"></a>浏览器支持情况</h1><p><a href="http://css4.rocks/selectors-level-4/time-dimensional-pseudo-classes.php" target="_blank" rel="noopener">http://css4.rocks/selectors-level-4/time-dimensional-pseudo-classes.php</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="http://css4-selectors.com/selector/css4/time-dimensional-pseudo-class" target="_blank" rel="noopener">http://css4-selectors.com/selector/css4/time-dimensional-pseudo-class</a></li><li><a href="http://css4.rocks/selectors-level-4/time-dimensional-pseudo-classes.php" target="_blank" rel="noopener">http://css4.rocks/selectors-level-4/time-dimensional-pseudo-classes.php</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css4 不确定值伪类</title>
      <link href="/2017/03/13/css4-indeterminate-value-pseudo-class/"/>
      <url>/2017/03/13/css4-indeterminate-value-pseudo-class/</url>
      
        <content type="html"><![CDATA[<p>css4 不确定值伪类</p><a id="more"></a><h1 id="不确定值伪类"><a href="#不确定值伪类" class="headerlink" title="不确定值伪类"></a>不确定值伪类</h1><p>这个伪类叫做不确定值伪类，它代表 radio 元素或者 checkbox 元素的不确定状态。如果 checkbox/radio 既没有选中也没有未选中，类似于非预选的选择。另一个不确定状态是一个未知的进度表完成状态。</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token pseudo-class">:indeterminate</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* declarations */</span><span class="token punctuation">}</span></code></pre><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token pseudo-class">:indeterminate</span> </span><span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.6</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个例子减少非预选选择元素的 <code>opacity</code> 至 <code>0.6</code>。</p><h1 id="浏览器支持情况"><a href="#浏览器支持情况" class="headerlink" title="浏览器支持情况"></a>浏览器支持情况</h1><p><a href="http://caniuse.com/#feat=css-indeterminate-pseudo" target="_blank" rel="noopener">http://caniuse.com/#feat=css-indeterminate-pseudo</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="http://css4-selectors.com/selector/css4/indeterminate-value-pseudo-class" target="_blank" rel="noopener">http://css4-selectors.com/selector/css4/indeterminate-value-pseudo-class</a></li><li><a href="http://css4.rocks/selectors-level-4/indeterminate-value-pseudo-class.php" target="_blank" rel="noopener">http://css4.rocks/selectors-level-4/indeterminate-value-pseudo-class.php</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css4 默认项伪类</title>
      <link href="/2017/03/13/css4-default-option-pseudo-class/"/>
      <url>/2017/03/13/css4-default-option-pseudo-class/</url>
      
        <content type="html"><![CDATA[<p>css4 默认项伪类</p><a id="more"></a><h1 id="默认项伪类"><a href="#默认项伪类" class="headerlink" title="默认项伪类"></a>默认项伪类</h1><blockquote><p>这个伪类也是 CSS3UI 规范的一部分。</p></blockquote><p>这个伪类叫做默认项伪类，它在一组其它相同元素中选择默认元素。它可以选择下拉列表/菜单或者上下文菜单的默认项。</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token pseudo-class">:default</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* declarations */</span><span class="token punctuation">}</span></code></pre><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token pseudo-class">:default</span> </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个例子设置下拉列表/按钮组的默认项的 <code>background-color</code> 为 <code>gray</code>。</p><h1 id="浏览器支持情况"><a href="#浏览器支持情况" class="headerlink" title="浏览器支持情况"></a>浏览器支持情况</h1><p><a href="http://caniuse.com/#feat=css-default-pseudo" target="_blank" rel="noopener">http://caniuse.com/#feat=css-default-pseudo</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="http://css4-selectors.com/selector/css4/default-option-pseudo-class" target="_blank" rel="noopener">http://css4-selectors.com/selector/css4/default-option-pseudo-class</a></li><li><a href="http://css4.rocks/selectors-level-4/default-option-pseudo-class.php" target="_blank" rel="noopener">http://css4.rocks/selectors-level-4/default-option-pseudo-class.php</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css4 本地链接伪类</title>
      <link href="/2017/03/13/css4-local-link-pseudo-class/"/>
      <url>/2017/03/13/css4-local-link-pseudo-class/</url>
      
        <content type="html"><![CDATA[<p>css4 本地链接伪类</p><a id="more"></a><h1 id="本地链接伪类"><a href="#本地链接伪类" class="headerlink" title="本地链接伪类"></a>本地链接伪类</h1><blockquote><p>注意：这个选择器已经从 W3C 草案中移除</p></blockquote><p>这个伪类叫做本地链接伪类，它只选择网站内部的链接。如果传入一个正数给这个选择器，它可以选择链接对分割深度。这些路径是由正斜线（/）分割，但除了协议，用户名，密码，端口，查询字符串以及 URL 的碎片部分。</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token pseudo-class">:local-link</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* declarations */</span><span class="token punctuation">}</span><span class="token selector"><span class="token pseudo-class">:local-link(n)</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* declarations */</span><span class="token punctuation">}</span></code></pre><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 匹配 http://example.com/ link(s) */</span><span class="token selector"><span class="token pseudo-class">:local-link(0)</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 匹配 http://example.com/year/ link(s) */</span><span class="token selector"><span class="token pseudo-class">:local-link(1)</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 匹配 http://example.com/year/month/ link(s) */</span><span class="token selector"><span class="token pseudo-class">:local-link(2)</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>第一个例子只选择主域名链接，你能给它设置不同的样式，第二个选择器只匹配第一层深度，第三个例子匹配第二层深度。</p><h1 id="浏览器支持情况"><a href="#浏览器支持情况" class="headerlink" title="浏览器支持情况"></a>浏览器支持情况</h1><p><a href="http://css4.rocks/selectors-level-4/local-link-pseudo-class.php" target="_blank" rel="noopener">http://css4.rocks/selectors-level-4/local-link-pseudo-class.php</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="http://css4-selectors.com/selector/css4/local-link-pseudo-class" target="_blank" rel="noopener">http://css4-selectors.com/selector/css4/local-link-pseudo-class</a></li><li><a href="http://css4.rocks/selectors-level-4/local-link-pseudo-class.php" target="_blank" rel="noopener">http://css4.rocks/selectors-level-4/local-link-pseudo-class.php</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css4 匹配任何伪类</title>
      <link href="/2017/03/12/css4-matches-any-pseudo-class/"/>
      <url>/2017/03/12/css4-matches-any-pseudo-class/</url>
      
        <content type="html"><![CDATA[<p>css4 匹配任何伪类</p><a id="more"></a><h1 id="匹配任何伪类"><a href="#匹配任何伪类" class="headerlink" title="匹配任何伪类"></a>匹配任何伪类</h1><p>这个伪类叫做匹配任何伪类，它的参数是一个<a href="https://www.w3.org/TR/selectors/#grouping" target="_blank" rel="noopener">选择器列表</a>(组合选择器无效)。它能使你通过制定匹配所有包含的选择器组来创建选择器集合。但是它不能嵌套自己，比如像这样：<code>E:matches(:matches(F))</code></p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token pseudo-class">:matches(selector1[, selector2, …])</span> </span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><pre class=" language-css"><code class="language-css"><span class="token selector">section h1, article h1, aside h1 </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 等同于 */</span><span class="token selector"><span class="token pseudo-class">:matches(section, article, aside)</span> h1 </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 注意：Mozilla 和 Webkit 需要添加他们自己的前缀：-prefix-any */</span><span class="token selector"><span class="token pseudo-class">:-moz-any(section, article, aside)</span> h1,<span class="token pseudo-class">:-webkit-any(section, article, aside)</span> h1</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个示例用 :matches 选择器选择所有 section，article，aside 的子元素 h1。</p><h1 id="浏览器支持情况"><a href="#浏览器支持情况" class="headerlink" title="浏览器支持情况"></a>浏览器支持情况</h1><p><a href="http://caniuse.com/#feat=css-matches-pseudo" target="_blank" rel="noopener">http://caniuse.com/#feat=css-matches-pseudo</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="http://css4-selectors.com/selector/css4/matches-any-pseudo-class" target="_blank" rel="noopener">http://css4-selectors.com/selector/css4/matches-any-pseudo-class</a></li><li><a href="http://css4.rocks/selectors-level-4/matches-pseudo-class.php" target="_blank" rel="noopener">http://css4.rocks/selectors-level-4/matches-pseudo-class.php</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css4 否定伪类</title>
      <link href="/2017/03/03/css4-negation-pseudo-class/"/>
      <url>/2017/03/03/css4-negation-pseudo-class/</url>
      
        <content type="html"><![CDATA[<p>css4 否定伪类</p><a id="more"></a><h1 id="否定伪类"><a href="#否定伪类" class="headerlink" title="否定伪类"></a>否定伪类</h1><p>这个伪类叫做否定伪类，它有一个参数，是一个简单的<a href="https://www.w3.org/TR/selectors/#grouping" target="_blank" rel="noopener">选择器列表</a>(组合选择器无效)。它匹配传入参数以外的元素，但它不能嵌套自己，比如像这个无效示例：<code>E:not(:not(F))</code></p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token pseudo-class">:not(negation-selector1[, negation-selector2, …])</span> </span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><blockquote><p>CSS3 中 <code>:not</code> 只支持简单的选择器。</p></blockquote><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><pre class=" language-css"><code class="language-css"><span class="token selector">a<span class="token pseudo-class">:not([rel="external"], [rel="nofollow"])</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个示例中，所有没有 <code>rel</code> 属性值为 <code>external</code> 或者 <code>nofollow</code> 的链接将被选中。因此，你可以给 external 或者 nofollow (已标记的) 链接添加不同的样式。</p><h1 id="浏览器支持情况"><a href="#浏览器支持情况" class="headerlink" title="浏览器支持情况"></a>浏览器支持情况</h1><p><a href="http://caniuse.com/#feat=css-not-sel-list" target="_blank" rel="noopener">http://caniuse.com/#feat=css-not-sel-list</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="http://css4-selectors.com/selector/css4/negation-pseudo-class" target="_blank" rel="noopener">http://css4-selectors.com/selector/css4/negation-pseudo-class</a></li><li><a href="http://css4.rocks/selectors-level-4/negation-pseudo-class.php" target="_blank" rel="noopener">http://css4.rocks/selectors-level-4/negation-pseudo-class.php</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从手势看出蛛丝马迹，看谁还对你撒谎</title>
      <link href="/2017/02/18/gesture/"/>
      <url>/2017/02/18/gesture/</url>
      
        <content type="html"><![CDATA[<p>生活中随处有谎言，当然，有些善意的谎言，我们大可不必理会，但若是谎言出于欺骗，我们又该如何知道自己是否被骗呢？其实很简单，就是看他人说话时的手势。这些微妙的手势，能告诉我们对方是不是在说谎。成为打开别人心门的钥匙。</p><a id="more"></a><h1 id="日常生活中最常见的六种撒谎手势。"><a href="#日常生活中最常见的六种撒谎手势。" class="headerlink" title="日常生活中最常见的六种撒谎手势。"></a>日常生活中最常见的六种撒谎手势。</h1><p>生活中随处都有谎言的存在，有时候我们简单的一个耸肩、一个搓手、一个抿嘴都可能是说谎的标志，即使是一个说谎高手，也会在细微的肢体动作上泄露出自己的秘密。</p><h2 id="用手遮住嘴巴"><a href="#用手遮住嘴巴" class="headerlink" title="用手遮住嘴巴"></a>用手遮住嘴巴</h2><p>心理学家告诉我们，当我们在和别人交谈的时候，如果对方突然用手遮住嘴巴，那么表示大多是因为说了谎，他正视图通过捂住自己的嘴巴来掩饰自己说出的那些谎话。为了自然起见，有些人甚至还会在捂住嘴巴的同时假装咳嗽来掩饰自己。</p><p>比如，在电影或者电视中，我们常常看到一个小偷或者罪犯，想假装正常的从警察身边走过时，他总会先四处看一下，然后遮住嘴巴轻咳一下，当警察拦住他问话时，他会假装自然地放下手去回答，于是观众们会觉得这些人鬼鬼祟祟的或者在对警察撒谎。</p><p>用手遮住嘴巴就如同把食指竖立在嘴唇前说 “嘘” 的手势一样，都是一种表示不要随意表达内心的想法。当我们在和对方聊天时，如果对方突然下意识地遮住了嘴巴，那么我们一定要注意听其话里的深意，我们要明白这个手势意味着别人对我们有所隐瞒。这时候，不妨表露出不感兴趣的样子，让对方有一种心安的感觉，那么接下来的交谈也会顺畅很多。</p><h2 id="触摸鼻子"><a href="#触摸鼻子" class="headerlink" title="触摸鼻子"></a>触摸鼻子</h2><p>在童话 《木偶奇遇记》 中，匹诺曹说谎时鼻子会变长，而在现实中，人们在说谎时会摸自己的鼻子。触摸鼻子的手势一般是用手在鼻子的下沿很快地摩擦几下，有时甚至只是略微轻触，几乎令人难以察觉。女人在做这个手势时比男人的动作幅度更小。</p><p>为什么会这样呢？有研究表明，人们在撒谎的时候，会引发鼻子部位的血液流量增大，导致鼻子膨胀而产生刺痒的感觉。于是人们只能频繁地用手抚摸鼻子来缓解发痒的症状。需要注意的是，摸鼻子是我们在生活中经常发生的一个小动作，在鉴定一个人是否说谎时，还需要结合其他的说谎迹象来进行解读。</p><p>当然，真正的鼻子发痒和说谎时鼻子发痒是不一样的。真正的鼻子发痒时，必须比较用力地摩擦鼻子，甚至是通过挖鼻孔才能消除刺痒的感觉，而不像触摸鼻子的手势只是轻轻一摸那么简单。而且单纯的鼻子发痒往往只会引发人们反复摩擦鼻子这个单一的手势，和人们整个对话的内容、频率和节奏没有任何联系。</p><h2 id="摩擦眼睛"><a href="#摩擦眼睛" class="headerlink" title="摩擦眼睛"></a>摩擦眼睛</h2><p>也许我们都有过这样的经历，当我们在不想看到某些事物或者画面的时候，我们总是做出摩擦眼睛的手势。其实，这是因为我们正在企图阻止眼睛看见那些令人不愉快、不舒服或者遭受怀疑的事情，它代表的意思就是：“我很不安，我不想看！”。</p><p>在日常生活中，如果你的观察够仔细，那么你就会发现一个人在酝酿谎言、说出谎言和说谎之后，都会去摩擦自己的眼睛或者不自然地笑笑。男人在做这个手势时往往会使劲揉搓眼睛；如果他试图掩盖一个弥天大谎，则很可能把脸转向别处。相比而言，女人更少做出摩擦眼镜的手势，她们一般只是在眼睛下方温柔地轻轻一碰。</p><p>当然任何事情都不是绝对的，我们不能看到对方摩擦眼睛就认为对方正在撒谎，我们要先观察、再判断，最后再下定论。</p><h2 id="抓挠耳朵"><a href="#抓挠耳朵" class="headerlink" title="抓挠耳朵"></a>抓挠耳朵</h2><p>人们在不想听别人说话的时候，就会抓挠自己的耳朵，这表示此刻他们并不想听。比如我们在和客户谈判的时候，你正在发表意见，客户突然侧着头用手指摩擦着耳朵，那么这代表的意思是客户对你现在表达的观点持相反意见，他正在酝酿着自己的观点。这时候，如果你不能给对方发表意见的机会，那么交流很可能就会没有效果。</p><h2 id="抓挠脖子"><a href="#抓挠脖子" class="headerlink" title="抓挠脖子"></a>抓挠脖子</h2><p>当人们在抓挠脖子时，一般是用食指（通常是用来写字的那只手的食指）抓挠脖子侧面位于耳垂下方的那块区域，而且食指运动的次数一般为五次左右，这个手势是疑惑和不确定的表现，就像是在说 “我不太确定是否认同你的意见”。但往往这时候他们说出的话确实顺着我们，也就是典型的 “口是心非”。</p><p>当我们遇到 “口是心非” 者的时候，理智的做法就是放弃这个口是心非者，否则，你很可能会一直活在谎言当中。</p><h2 id="拉拽衣领"><a href="#拉拽衣领" class="headerlink" title="拉拽衣领"></a>拉拽衣领</h2><p>英国著名动物学家和人类行为学家德斯蒙德·莫里斯观察发现，人们在撒谎时会在敏感的面部和颈部产生刺痒的感觉，这是因为撒谎者一旦感觉到听话人的怀疑，增强的血压就会使脖子不断冒汗。因此他们会下意识地通过摩擦或者抓挠的动作来消除这种不适。因此，我们在和对方交谈时如果看到对方正在频频地拉拽自己的衣领，那么我们可以推测，对方很可能是因为撒了谎正在担心谎言被识破。</p><p>当然，如果一个人在感到愤怒或者遭遇挫败的时候，同样也会拉拽衣领，因此我们要判断好，对方是否在撒谎。因此，当你看到有人做这个动作时，你不妨对他说，“麻烦你再说一遍，好吗？” 或者 “请你有话就直说吧，行吗？” 这样，在对方反馈的时候就会显露出他的真实意图。</p>]]></content>
      
      
      <categories>
          
          <category> psychology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gesture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从众心理</title>
      <link href="/2016/12/02/conformist-mentality/"/>
      <url>/2016/12/02/conformist-mentality/</url>
      
        <content type="html"><![CDATA[<p>从众心理又称趋众心理，是一种为适应团体或者群体的要求而改变自己的行为和信念的心理。很多人看到别人做什么，自己也去做什么；别人怎么说，自己也随声附和，总是想随大流，这就是从众心理。</p><a id="more"></a><h2 id="排队效应"><a href="#排队效应" class="headerlink" title="排队效应"></a>排队效应</h2><p>有一个人出门逛街，正走着，发现走在他前面的人突然狂奔起来。他不知发生了什么事，也跟在后面狂奔。狂奔的人排成了一个长长的队伍，于是他也赶紧排了过去。</p><p>他问排在他前面的人：“请问先生，前面干什么?” 对方回答说：“我不知道，你只管排队就是了，一定是好事。” 反复询问了好几个人，都说一定有好事。</p><p>就这样，队伍越来越长，但是这个人问遍了身边的人，没有人知道大家排队是为了什么。后来因为一个紧急电话，这个人很遗憾地离开了队伍，等他走到队伍的前头，询问最前面的人为什么排队时，那人的回答让他大吃一惊：“我也不知道为什么排队，我看到大家都往这边跑，恰好我离得比较近，所以跑到了最前边，估计后边的人知道为什么排队。你管那么多干吗，赶紧站个好位置，一定是好事。”</p><p>这人莫名其妙地回到家里，却始终搞不清排队的那群人是为什么在排队，或者他们都不知道排队干什么。</p><h2 id="索尼随身听"><a href="#索尼随身听" class="headerlink" title="索尼随身听"></a>索尼随身听</h2><p>20 世纪 70 年代末，日本索尼公司生产出一种能边走边听的“随身听”录放机。为了打通销路，索尼公司决定采取一种更新颖、更有效的营销方式。</p><p>当时在日本的学校内兴起了学英语的热潮，学校要求每位学生必须有一台录放机。索尼公司知道这一情况后，立即派出 10 名年轻的员工，携带 “随身听” 在学校的大门口来回走动，并且故意放大音量，做陶醉欣赏状。</p><p>学生们看到这一现象，便纷纷打听是从何处买的 “随身听”。几天后，索尼的 “随身听” 遍及日本各大、中、小学校。</p><h2 id="2011抢盐事件"><a href="#2011抢盐事件" class="headerlink" title="2011抢盐事件"></a>2011抢盐事件</h2><p>2011年3月11日日本发生大地震，导致日本福岛核电站的核泄露，引起了全球人民的恐慌。随后有人称碘盐能预防治疗核辐射以及受日本核辐射影响，国内盐产量将出现短缺。我们身边的很多亲朋好友看到别人在抢盐，也都纷纷的跟着一起去抢盐。抢盐势力不断扩大并引发了全国的抢盐风波。</p><p>不过好在国家介入调查，证实了此乃谣言，散布谣言者也受到的惩罚，人们也意识到了自己的盲目跟风的愚蠢行为所带来的影响，抢盐事件终于告一段落。</p><h2 id="从众心里的应用"><a href="#从众心里的应用" class="headerlink" title="从众心里的应用"></a>从众心里的应用</h2><p>这里例举一些从众心理的应用例子。说白了就是找 “托儿”。</p><h3 id="开店"><a href="#开店" class="headerlink" title="开店"></a>开店</h3><p>如果你想开家小店，不妨在开张时，邀请你的各家亲戚或者各色朋友围在店里店外，或进进出出假装消费。这样，你就无须担心门庭冷落，那些亲戚朋友自会给你引来大批客户。</p><h3 id="举行座谈会"><a href="#举行座谈会" class="headerlink" title="举行座谈会"></a>举行座谈会</h3><p>如果你想举行一次座谈会，又担心冷场，不防事先安排几个人，让他们准备好问题，在会场上积极提问，以带动其他人提问。只要气氛足够活跃，那些原本不爱提问的人，看到大家都在提问，也可能跃跃欲试。</p><h3 id="主持会议"><a href="#主持会议" class="headerlink" title="主持会议"></a>主持会议</h3><p>如果你负责主持公司会议，讨论某项棘手的改革方案，你知道改革的阻力很大，很可能大多数的参会者将在会上保持沉默，拒绝表态，你不妨在会议召开之前，私下找几个人交流意见，安排他们在会议上带头发言，迫使其他的人也跟着表态。</p>]]></content>
      
      
      <categories>
          
          <category> psychology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conformist mentality </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微表情-微笑</title>
      <link href="/2016/11/24/micro-expression-smile/"/>
      <url>/2016/11/24/micro-expression-smile/</url>
      
        <content type="html"><![CDATA[<p>微笑在我们日常生活中随处可见。笑往往表示开心和喜悦，但是在这个社会中，笑容也可能是假的。因此我们需要学会分辨它们。</p><a id="more"></a><h2 id="真笑"><a href="#真笑" class="headerlink" title="真笑"></a>真笑</h2><p>发自内心的笑是真笑。两边嘴角会同时翘起，眼轮匝肌缩紧（眼镜看起来变小），眼角会产生鱼尾纹，眉毛微微倾斜。</p><p><img src="./true-smile-a.jpg" alt="true-smile-a"><img src="./true-smile-b.jpg" alt="true-smile-b"><img src="./true-smile-c.jpg" alt="true-smile-c"></p><h2 id="假笑"><a href="#假笑" class="headerlink" title="假笑"></a>假笑</h2><p>假笑时，人们有意识的收缩脸部肌肉、咧开嘴、抬高嘴角。与真笑不同的是假笑时眼轮匝肌不会收缩，眼角不会出现鱼尾纹，眉毛也不会倾斜。</p><p><img src="./false-smile-a.jpg" alt="false-smile-a"><img src="./false-smile-b.jpg" alt="false-smile-b"><img src="./false-smile-c.jpg" alt="false-smile-c"></p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>我们把真笑者和假笑者的其他部位遮住，只露出眉毛和眼睛。真笑者依然能看出来他在微笑而假笑着则只能看到一双无神的眼睛。</p><p><img src="./compare-a.jpg" alt="compare-a"><img src="./compare-b.jpg" alt="compare-b"><img src="./compare-c.jpg" alt="compare-c"></p>]]></content>
      
      
      <categories>
          
          <category> psychology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> micro-expression </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Electron 入门</title>
      <link href="/2016/11/14/electron-quick-start/"/>
      <url>/2016/11/14/electron-quick-start/</url>
      
        <content type="html"><![CDATA[<p><a href="http://electron.atom.io/" target="_blank" rel="noopener">Electron</a> 是一个使用 Web 技术 (JavaScript, HTML, CSS) 来构建跨平台桌面应用的框架。</p><a id="more"></a><p>大牛们总是为我们铺平了道路，开发因此而变得不再枯燥和繁琐。Web 技术的应用的涉及面已经越来越广，如今我们甚至可以使用 Web 技术来开发桌面应用了，真的是非常令人兴奋一件事。那么我们开始探索 Electron 吧。</p><h2 id="踏上征程"><a href="#踏上征程" class="headerlink" title="踏上征程"></a>踏上征程</h2><p>首先我们克隆官方提供的快速入门范例</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/electron/electron-quick-start</code></pre><p>然后进入该示例根目录</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> electron-quick-start</code></pre><p>安装需要的依赖模块</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i</code></pre><p>启动示例项目</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> start</code></pre><p>看到如下的界面，恭喜你，你已经成功的运行了第一个 Electron 程序。不过我们的 Electron 的旅途才刚刚开始，后面还有更多的挑战在等着我们，加油~</p><p><img src="./started.png" alt="started.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><strong><a href="http://electron.atom.io/" target="_blank" rel="noopener">http://electron.atom.io/</a></strong></li><li><strong><a href="http://electron.atom.io/docs/tutorial/quick-start/" target="_blank" rel="noopener">http://electron.atom.io/docs/tutorial/quick-start/</a></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> starting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-native 搭建 android 开发环境之 mac 篇</title>
      <link href="/2016/11/02/react-native-android-with-mac/"/>
      <url>/2016/11/02/react-native-android-with-mac/</url>
      
        <content type="html"><![CDATA[<p>继 <a href="/2016/10/29/react-native-android-with-windows/">react-native 搭建 android 开发环境之 mac 篇</a> 之后的 react-native 搭建 android 开发环境之 mac 篇。</p><a id="more"></a><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><blockquote><p>mac 推荐使用 <a href="http://brew.sh/" target="_blank" rel="noopener">homebrew</a> 工具来安装 nodejs 和 watchman</p></blockquote><p>安装 node</p><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> node</code></pre><p>安装 watchman</p><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> watchman</code></pre><p>安装 react-native</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g react-native-cli</code></pre><p>下载 android sdk</p><p><a href="https://developer.android.com/studio/index.html" target="_blank" rel="noopener">https://developer.android.com/studio/index.html</a></p><h1 id="确认安装信息"><a href="#确认安装信息" class="headerlink" title="确认安装信息"></a>确认安装信息</h1><p>打开终端执行 <code>android</code>, 确认相关 sdk 安装正确</p><p><img src="./ensure_tools.png" alt="ensure_tools.png"> <img src="./ensure_sdk_7.1.1.png" alt="ensure_sdk_7.1.1.png"> <img src="./ensure_api23.png" alt="ensure_api23.png"></p><h1 id="确认环境变量"><a href="#确认环境变量" class="headerlink" title="确认环境变量"></a>确认环境变量</h1><p>查看 <code>~/.bash_profile</code>，确认以下路径设置正确</p><pre class=" language-java"><code class="language-java">export ANDROID_HOME<span class="token operator">=</span><span class="token operator">~</span><span class="token operator">/</span>sdkexport PATH<span class="token operator">=</span>$<span class="token punctuation">{</span>PATH<span class="token punctuation">}</span><span class="token operator">:</span>$<span class="token punctuation">{</span>ANDROID_HOME<span class="token punctuation">}</span><span class="token operator">/</span>toolsexport PATH<span class="token operator">=</span>$<span class="token punctuation">{</span>PATH<span class="token punctuation">}</span><span class="token operator">:</span>$<span class="token punctuation">{</span>ANDROID_HOME<span class="token punctuation">}</span><span class="token operator">/</span>platform<span class="token operator">-</span>toolsexport PATH<span class="token operator">=</span>$<span class="token punctuation">{</span>PATH<span class="token punctuation">}</span><span class="token operator">:</span>$<span class="token punctuation">{</span>ANDROID_HOME<span class="token punctuation">}</span><span class="token operator">/</span>build<span class="token operator">-</span>tools</code></pre><p>执行以下命令立即生效</p><pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> ~/.bash_profile</code></pre><h1 id="创建一个安卓虚拟机"><a href="#创建一个安卓虚拟机" class="headerlink" title="创建一个安卓虚拟机"></a>创建一个安卓虚拟机</h1><p>打开 avd 管理工具</p><pre class=" language-bash"><code class="language-bash">android avd</code></pre><p><img src="./create_emulator.png" alt="create_emulator.png"></p><p>启动虚拟机时可能回到这个错误，这是因为 <a href="https://software.intel.com/en-us/android/articles/intel-hardware-accelerated-execution-manager" target="_blank" rel="noopener">HAXM(Intel Hardware Accelerated Execution Manager)</a> 没有安装。</p><p><img src="./haxm_error_with_emulator.png" alt="haxm_error_with_emulator"></p><p>打开 sdk 管理发现 <code>haxm 6.0.4</code> 不支持 mac</p><p><img src="./haxm_6.0.4_not_support_for_mac.png" alt="haxm_6.0.4_not_support_for_mac"></p><p>我们去以下地址载 <code>haxm-macosx_v6_0_3 .zip (6.0.3)</code> 并安装</p><p><a href="https://software.intel.com/en-us/android/articles/intel-hardware-accelerated-execution-manager" target="_blank" rel="noopener">https://software.intel.com/en-us/android/articles/intel-hardware-accelerated-execution-manager</a></p><p>再次启动虚拟机就可以跑起来了。</p><p><img src="./start_emulator.png" alt="start_emulator"></p><h1 id="测试-react-native"><a href="#测试-react-native" class="headerlink" title="测试 react-native"></a>测试 react-native</h1><p>老规矩，初始化一个测试项目</p><pre class=" language-bash"><code class="language-bash">react-native init AwesomeProject<span class="token function">cd</span> AwesomeProjectreact-native run-android</code></pre><p><img src="success.png" alt="success"></p><h1 id="调试-react-native"><a href="#调试-react-native" class="headerlink" title="调试 react-native"></a>调试 react-native</h1><p>mac 上调试 app 与 windows 一样，这里不再赘述。请查阅 <a href="http://f2e-tlj.me/2016/10/29/react-native-android-with-windows/#%E8%B0%83%E8%AF%95-react-native" target="_blank" rel="noopener">调试-react-native</a></p><h1 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h1><p>mac 上打包发布 app 与 windows 一样，这里不再赘述。请查阅 <a href="/2016/10/29/react-native-android-with-windows/#%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83">打包发布</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://facebook.github.io/react-native/docs/getting-started.html" target="_blank" rel="noopener">Getting Started</a></li><li><a href="http://stackoverflow.com/questions/26714089/error-in-launching-avd-in-mac" target="_blank" rel="noopener">Error in launching avd in mac</a></li><li><a href="https://developer.android.com/studio/run/managing-avds.html" target="_blank" rel="noopener">Managing avds</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> react-native </tag>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-native 搭建 android 开发环境之 windows 篇</title>
      <link href="/2016/10/29/react-native-android-with-windows/"/>
      <url>/2016/10/29/react-native-android-with-windows/</url>
      
        <content type="html"><![CDATA[<p>Windows 中搭建 react-native 的 android 开发环境可谓一波三折。本文记录下我的踩坑之旅，也为了让他人少走弯路。</p><a id="more"></a><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>安装 nodejs</p><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><p>安装 python2</p><p><a href="https://www.python.org/downloads/" target="_blank" rel="noopener">https://www.python.org/downloads/</a></p><p>安装 react-native</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -g react-native-cli</code></pre><p>安装 JDK</p><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p><p>安装 android sdk</p><blockquote><p>我建议下载非安装版本 <a href="https://dl.google.com/android/android-sdk_r24.4.1-windows.zip" target="_blank" rel="noopener">https://dl.google.com/android/android-sdk_r24.4.1-windows.zip</a></p></blockquote><p>其他版本</p><p><a href="https://developer.android.com/studio/index.html#downloads" target="_blank" rel="noopener">https://developer.android.com/studio/index.html#downloads</a></p><h1 id="确认安装信息"><a href="#确认安装信息" class="headerlink" title="确认安装信息"></a>确认安装信息</h1><p><img src="ensure_tools.png" alt="ensure_tools"> <img src="ensure_android7.1.1_api25.png" alt="ensure_android7.1.1"> <img src="ensure_android6.0_api23.png" alt="ensure_android6.0_api23"> <img src="ensure_extras.png" alt="ensure_extras"></p><h1 id="确认环境变量"><a href="#确认环境变量" class="headerlink" title="确认环境变量"></a>确认环境变量</h1><p><img src="ensure_variable.png" alt="ensure_variable"> <img src="ensure_path.png" alt="ensure_path"></p><h1 id="创建一个安卓虚拟机"><a href="#创建一个安卓虚拟机" class="headerlink" title="创建一个安卓虚拟机"></a>创建一个安卓虚拟机</h1><p><a href="https://developer.android.com/studio/run/managing-avds.html" target="_blank" rel="noopener">https://developer.android.com/studio/run/managing-avds.html</a></p><p><img src="create_avd.png" alt="create_avd"></p><h1 id="测试-react-native"><a href="#测试-react-native" class="headerlink" title="测试 react-native"></a>测试 react-native</h1><p>至此准备工作已经就绪，我们迫不及待的想要进入 react-native 的世界探索一番，当然首先我们从 hello world 启程。</p><pre class=" language-bash"><code class="language-bash">react-native init AwesomeProject<span class="token function">cd</span> AwesomeProject</code></pre><p>开启 android 虚拟机，虚拟机开启并进入系统后，运行下面的命令</p><pre class=" language-bash"><code class="language-bash">react-native run-android</code></pre><p><img src="success.png" alt="success"></p><h1 id="调试-react-native"><a href="#调试-react-native" class="headerlink" title="调试 react-native"></a>调试 react-native</h1><p><code>ctrl</code> + <code>m</code> 打开开发者面板，启用 <code>Enable Live Reload</code> 和 <code>Enable Hot Reloading</code></p><p><img src="enable_live_reload_and_hot_reloading.png" alt="enable_live_reload_and_hot_reloading"></p><p>还可以启用 chrome 控制台远程调试 JS，启用 <code>Debug JS Remotely</code></p><p><img src="debug_js_remotely.png" alt="debug_js_remotely"> <img src="screenshot.png" alt="screenshot"></p><h1 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h1><p>安卓 APP 需要数字签名来作验证。所以我们需要生成一个有签名的 APK。可以使用 <code>keytool</code></p><pre class=" language-bash"><code class="language-bash">keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000</code></pre><p>执行以上命令后会生成 <code>my-release-key.keystore</code> 文件，把它放到 <code>android/app</code> 目录中</p><p><img src="place_keystore_file.png" alt="place_keystore_file"></p><p>创建或编辑 <code>~/.gradle/gradle.properties</code> 文件, <code>*****</code> 替换成正确的密码</p><pre class=" language-markdown"><code class="language-markdown">MYAPP<span class="token italic"><span class="token punctuation">_</span>RELEASE<span class="token punctuation">_</span></span>STORE<span class="token italic"><span class="token punctuation">_</span>FILE=my-release-key.keystoreMYAPP<span class="token punctuation">_</span></span>RELEASE<span class="token italic"><span class="token punctuation">_</span>KEY<span class="token punctuation">_</span></span>ALIAS=my-key-aliasMYAPP<span class="token italic"><span class="token punctuation">_</span>RELEASE<span class="token punctuation">_</span></span>STORE_PASSWORD=<span class="token bold"><span class="token punctuation">**</span><span class="token punctuation">**</span>*</span>MYAPP<span class="token italic"><span class="token punctuation">_</span>RELEASE<span class="token punctuation">_</span></span>KEY_PASSWORD=<span class="token bold"><span class="token punctuation">**</span><span class="token punctuation">**</span>*</span></code></pre><p>编辑 <code>android/app/build.gradle</code>，添加以下配置</p><pre class=" language-markdown"><code class="language-markdown">...android {<span class="token code keyword">    ...</span><span class="token code keyword">    defaultConfig { ... }</span><span class="token code keyword">    signingConfigs {</span><span class="token code keyword">        release {</span><span class="token code keyword">            storeFile file(MYAPP_RELEASE_STORE_FILE)</span><span class="token code keyword">            storePassword MYAPP_RELEASE_STORE_PASSWORD</span><span class="token code keyword">            keyAlias MYAPP_RELEASE_KEY_ALIAS</span><span class="token code keyword">            keyPassword MYAPP_RELEASE_KEY_PASSWORD</span><span class="token code keyword">        }</span><span class="token code keyword">    }</span><span class="token code keyword">    buildTypes {</span><span class="token code keyword">        release {</span><span class="token code keyword">            ...</span><span class="token code keyword">            signingConfig signingConfigs.release</span><span class="token code keyword">        }</span><span class="token code keyword">    }</span>}...</code></pre><p>生成发行 APK，进入 android 目录</p><pre class=" language-bash"><code class="language-bash">./gradlew assembleRelease</code></pre><p>执行完毕会生成 <code>android/app/build/outputs/apk/app-release.apk</code> 文件</p><p><img src="generated_apk.png" alt="generated_apk"></p><p>也许有人会问，为什么会生成 2 个 APK 文件，请仔细阅读下面的回答</p><p><a href="http://stackoverflow.com/questions/22058210/why-unaligned-apk-is-needed" target="_blank" rel="noopener">http://stackoverflow.com/questions/22058210/why-unaligned-apk-is-needed</a></p><p>测试打包后的 APP</p><pre class=" language-bash"><code class="language-bash">react-native run-android --variant<span class="token operator">=</span>release</code></pre><p><img src="apk_testing.png" alt="apk_testing"> <img src="success.png" alt="success"></p><p>测试完毕之后，选择想要发布的平台发布你的 APP 吧。每个平台机制不同，这里就不做介绍了，大家自己去了解即可。</p><p>那么我们的 react-native 安卓之旅已经启程了~ 加油吧少年们！最后，祝大家开发愉快 :)</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://facebook.github.io/react-native/docs/getting-started.html#content" target="_blank" rel="noopener">Getting Started</a></li><li><a href="https://facebook.github.io/react-native/docs/signed-apk-android.html" target="_blank" rel="noopener">Signed APK Android</a></li><li><a href="https://developer.android.com/studio/publish/app-signing.html" target="_blank" rel="noopener">Sign Your App</a></li><li><a href="https://github.com/facebook/react-native/issues/5442" target="_blank" rel="noopener">Failed to find target with hash string ‘android-23’</a></li><li><a href="http://stackoverflow.com/questions/20564514/adb-is-not-recognized-as-an-internal-or-external-command-operable-program-or" target="_blank" rel="noopener">‘adb’ is not recognized as an internal or external command, operable program or batch file</a></li><li><a href="http://stackoverflow.com/questions/32634352/react-native-android-build-failed" target="_blank" rel="noopener">React Native android build failed</a></li><li><a href="http://stackoverflow.com/questions/17043363/i-get-bash-keytool-command-not-found-when-obtaining-google-map-key-on-linux" target="_blank" rel="noopener">get “bash: keytool: command not found.” when Obtaining Google Map Key on linux fedora</a></li><li><a href="http://stackoverflow.com/questions/31489567/manually-installing-an-updated-apk-fails-with-signatures-do-not-match-the-previ" target="_blank" rel="noopener">Manually installing an updated APK fails with “signatures do not match the previously installed version”</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> react-native </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开始使用下一代的 Javascript! 那就别犹豫，Babel 是最好的选择</title>
      <link href="/2016/08/13/babel/"/>
      <url>/2016/08/13/babel/</url>
      
        <content type="html"><![CDATA[<p><strong><a href="https://babeljs.io/" target="_blank" rel="noopener">Babel</a></strong> 是什么? Babel 是一个 JavaScript 编译器,使用 Babel 我们就无需考虑兼容问题而放心的使用下一代 Javascript 语法来写代码!</p><a id="more"></a><h2 id="Babel-的工作机制"><a href="#Babel-的工作机制" class="headerlink" title="Babel 的工作机制"></a>Babel 的工作机制</h2><p>看一个简单的例子</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>经过Babel编译</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>很神奇吧! ES6 就这样转换成了 ES5 (｡◝‿◜｡)</p><p>我们也可以到 <strong><a href="https://babeljs.io/repl/" target="_blank" rel="noopener">这里</a></strong> 去亲自体验 Babel</p><h2 id="安装-Babel"><a href="#安装-Babel" class="headerlink" title="安装 Babel"></a>安装 Babel</h2><p>安装 Babel 通过 npm 包管理工具就可以很方便的安装了</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save-dev babel-cli</code></pre><h2 id="配置-Babel"><a href="#配置-Babel" class="headerlink" title="配置 Babel"></a>配置 Babel</h2><p>配置 Babel 也很简单，我们只需要在项目根目录创建 <strong>.babelrc</strong> 文件</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"transform-react-jsx"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"ignore"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"foo.js"</span><span class="token punctuation">,</span>    <span class="token string">"bar/**/*.js"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>也可以直接在 <strong>package.json</strong> 里配置</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"my-package"</span><span class="token punctuation">,</span>  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token string">"babel"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// my babel config here</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="使用-Babel-编译第一个-js-文件"><a href="#使用-Babel-编译第一个-js-文件" class="headerlink" title="使用 Babel 编译第一个 js 文件"></a>使用 Babel 编译第一个 js 文件</h2><p>假设你有一个 <strong>script.js</strong> 想编译为 <strong>script-compiled.js</strong></p><pre class=" language-bash"><code class="language-bash">babel script.js --out-file script-compiled.js</code></pre><p>你想监视文件变动并即使编译可以使用 <strong>&minus;&minus;watch</strong> 或 <strong>&minus;w</strong> 参数</p><pre class=" language-bash"><code class="language-bash">babel script.js --watch --out-file script-compiled.js</code></pre><p>更多详细用法可以使用参数 <strong>&minus;&minus;help</strong> 查看</p><pre class=" language-bash"><code class="language-bash">babel --help</code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><strong><a href="https://babeljs.io/" target="_blank" rel="noopener">https://babeljs.io/</a></strong></li><li><strong><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">http://es6.ruanyifeng.com/</a></strong></li><li><strong><a href="https://leanpub.com/understandinges6/read/" target="_blank" rel="noopener">https://leanpub.com/understandinges6/read/</a></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> babel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 下的包管理工具 chocolatey</title>
      <link href="/2016/07/30/chocolatey/"/>
      <url>/2016/07/30/chocolatey/</url>
      
        <content type="html"><![CDATA[<p><strong><a href="https://chocolatey.org/" target="_blank" rel="noopener">Chocolatey</a></strong> 是 Windows 下的自动化软件管理工具，当然它是开源的。</p><a id="more"></a><h2 id="安装-Chocolatey"><a href="#安装-Chocolatey" class="headerlink" title="安装 Chocolatey"></a>安装 Chocolatey</h2><p>安装 Chocolatey 非常简单 <code>WIN+X+A</code> 使用管理员打开 cmd 终端，复制下面的命令并执行</p><pre class=" language-bash"><code class="language-bash">@powershell -NoProfile -ExecutionPolicy Bypass -Command <span class="token string">"iex <span class="token variable"><span class="token punctuation">((</span>New<span class="token operator">-</span>Object System.Net.WebClient<span class="token punctuation">)</span>.DownloadString<span class="token punctuation">(</span>'https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>chocolatey.org<span class="token operator">/</span>install.ps1'<span class="token punctuation">))</span></span>"</span> <span class="token operator">&amp;&amp;</span> SET PATH<span class="token operator">=</span>%PATH%<span class="token punctuation">;</span>%ALLUSERSPROFILE%\chocolatey\bin</code></pre><p>检查 Chocolatey 已正确安装</p><pre class=" language-bash"><code class="language-bash">choco -v</code></pre><p><img src="./installation.png" alt="Installation" title="Installation"></p><h2 id="寻找想要的包"><a href="#寻找想要的包" class="headerlink" title="寻找想要的包"></a>寻找想要的包</h2><p>Chocolatey 已经安装好了，那么开始我们的包管理之旅吧，先去找找你需要的包吧，**<a href="https://chocolatey.org/packages" target="_blank" rel="noopener">戳这里</a>**</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><strong><a href="https://chocolatey.org/" target="_blank" rel="noopener">https://chocolatey.org</a></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> package-manager </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chocolatey </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视差滚动设计</title>
      <link href="/2016/04/10/parallax-scrolling/"/>
      <url>/2016/04/10/parallax-scrolling/</url>
      
        <content type="html"><![CDATA[<p>视差滚动（Parallax Scrolling），国内很多网站都使用了这种设计，看起来很不错。研究之</p><a id="more"></a><h2 id="什么是视差滚动"><a href="#什么是视差滚动" class="headerlink" title="什么是视差滚动"></a>什么是视差滚动</h2><p>视差滚动（Parallax Scrolling）是指让多层背景以不同的速度移动，形成立体的运动效果，带来非常出色的视觉体验</p><p><strong><a href="http://baike.baidu.com/link?url=CvLKoieCTF9rjPN-AoUzIAiVE84D6zwBEhzKAqgpWiyET7g3enGmNIIBz5eoJ4vFe46a5CPEcWJ74RPOSxt2Aq" target="_blank" rel="noopener">百度百科的解释</a></strong></p><p><strong><a href="http://www.sj33.cn/digital/wysj/201410/40324.html" target="_blank" rel="noopener">一些优秀的视差滚动设计的网站</a></strong></p><h2 id="视差滚动原理"><a href="#视差滚动原理" class="headerlink" title="视差滚动原理"></a>视差滚动原理</h2><pre class=" language-css"><code class="language-css"><span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span></code></pre><p><strong><a href="http://www.wufangbo.com/shi-jue-gun-dong-yuan-li/" target="_blank" rel="noopener">参考这篇文章</a></strong></p><h2 id="常用视差滚动库"><a href="#常用视差滚动库" class="headerlink" title="常用视差滚动库"></a>常用视差滚动库</h2><p><strong><a href="http://www.w3cplus.com/source/10-best-Parallax-Scrolling-plugin.html" target="_blank" rel="noopener">参考这里</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> parallax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置多个 ssh key</title>
      <link href="/2016/04/06/mutiple-ssh-key/"/>
      <url>/2016/04/06/mutiple-ssh-key/</url>
      
        <content type="html"><![CDATA[<p>有时候我们需要在一台电脑配置多个 <strong>ssh key</strong>，用于支持不同的 <code>git</code> 的平台或者在同一 <code>git</code> 平台使用几种不同的 <strong>ssh key</strong></p><a id="more"></a><h2 id="什么是-ssh"><a href="#什么是-ssh" class="headerlink" title="什么是 ssh"></a>什么是 ssh</h2><p>参考百度百科的说明 <strong><a href="http://baike.baidu.com/link?url=XjSCHYqkK3WP_a5tECSUPPVkXU12Ri8ILgyMnwHGO9jUtdJmXcW8kSpzlzd7Mps1CtE6DLNGPEclbm1aDhnHcK" target="_blank" rel="noopener">点这里</a></strong></p><h2 id="如何生成-ssh-key"><a href="#如何生成-ssh-key" class="headerlink" title="如何生成 ssh key"></a>如何生成 ssh key</h2><p>如何生成 <strong>ssh key</strong> 这里不做介绍，请查看 <strong><a href="https://help.github.com/articles/generating-an-ssh-key/" target="_blank" rel="noopener">https://help.github.com/articles/generating-an-ssh-key/</a></strong></p><h2 id="默认的-ssh-key"><a href="#默认的-ssh-key" class="headerlink" title="默认的 ssh key"></a>默认的 ssh key</h2><p>默认的 <strong>ssh key</strong> 记录在这里</p><p><img src="default-ssh-key.jpg" alt="default-ssh-key"></p><h2 id="生成不同的-ssh-key"><a href="#生成不同的-ssh-key" class="headerlink" title="生成不同的 ssh key"></a>生成不同的 ssh key</h2><p>与生成 ssh key 相同，区别在于这里</p><p><img src="generate-other-ssh-key.jpg" alt="generate-other-ssh-key"></p><p><img src="other-ssh-key.jpg" alt="other-ssh-key"></p><h2 id="添加到-ssh-agent"><a href="#添加到-ssh-agent" class="headerlink" title="添加到 ssh agent"></a>添加到 ssh agent</h2><p>生成好的 ssh key 我们需要添加到 ssh agent 中，与添加默认的 ssh key 一样</p><p><img src="add-to-ssh-agent.jpg" alt="add-to-ssh-agent"></p><h2 id="添加config文件"><a href="#添加config文件" class="headerlink" title="添加config文件"></a>添加config文件</h2><p>最后我们需要需要在 <strong>.ssh</strong> 目录中创建一个 <strong>config</strong> 文件</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># gitcafe</span>Host gitcafe.com  HostName gitcafe.com  PreferredAuthentications publickey  IdentityFile ~/.ssh/id_rsa.gitcafe</code></pre><p>现在我默认是使用的 github 的 ssh key，当 host 是 gitcafe.com 时则使用 gitcafe 的 ssh key</p><p><img src="test-ssh.jpg" alt="test-ssh"></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh-key </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你知道 pjax 吗？</title>
      <link href="/2016/03/25/pjax/"/>
      <url>/2016/03/25/pjax/</url>
      
        <content type="html"><![CDATA[<p>也许你知道 ajax，但你不一定知道 pjax。那么本文带你们进入 pjax 的世界一探究竟</p><a id="more"></a><h2 id="什么是-pjax"><a href="#什么是-pjax" class="headerlink" title="什么是 pjax"></a>什么是 pjax</h2><p><code>pjax</code> = <code>pushState</code> + <code>ajax</code></p><p>pjax 使用 ajax 和 pushState 技术实现快速浏览体验并保证真实的网页永久链接，页面标题和历史记录</p><p>pjax 首先使用 ajax 从服务器获取 html 并用获取到的 html 替换页面中指定容器中的内容，然后使用 pushState (无需刷新页面，无需重新加载 css 和 js) 更新浏览器当前的 url，给人一种快速加载页面的感觉</p><p>请记住！pjax 本质就是 pushState 和 ajax 的组合，高大上并且实用的功能往往就是如此简单 :)</p><h2 id="在线演示"><a href="#在线演示" class="headerlink" title="在线演示"></a>在线演示</h2><p>参考这个地址 <a href="http://pjax.herokuapp.com/" target="_blank" rel="noopener">http://pjax.herokuapp.com/</a></p><h2 id="目前支持-pushState-的浏览器"><a href="#目前支持-pushState-的浏览器" class="headerlink" title="目前支持 pushState 的浏览器"></a>目前支持 pushState 的浏览器</h2><p>参考这个地址 <a href="http://caniuse.com/#search=pushstate" target="_blank" rel="noopener">http://caniuse.com/#search=pushstate</a></p><h2 id="pjax-库"><a href="#pjax-库" class="headerlink" title="pjax 库"></a>pjax 库</h2><ul><li><strong><a href="https://github.com/defunkt/jquery-pjax" target="_blank" rel="noopener">https://github.com/defunkt/jquery-pjax</a></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在 Github 社区团队开发</title>
      <link href="/2016/03/23/how-to-contributing-on-github/"/>
      <url>/2016/03/23/how-to-contributing-on-github/</url>
      
        <content type="html"><![CDATA[<p>Github 是一个庞大的开源社区，上面有许许多多优秀的开源项目。</p><p>本文简单介绍如何在 github 参与项目，并贡献自己的代码</p><a id="more"></a><h2 id="发现好的项目时，fork-it"><a href="#发现好的项目时，fork-it" class="headerlink" title="发现好的项目时，fork it"></a>发现好的项目时，fork it</h2><p><img src="fork-it.jpg" alt="fork-it"></p><h2 id="克隆项目到本地"><a href="#克隆项目到本地" class="headerlink" title="克隆项目到本地"></a>克隆项目到本地</h2><pre class=" language-shell"><code class="language-shell">git clone git@github.com:<userName>/<projectName>.git</code></pre><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><pre class=" language-shell"><code class="language-shell">git checkout -b your-new-feature</code></pre><h2 id="提交更改"><a href="#提交更改" class="headerlink" title="提交更改"></a>提交更改</h2><pre class=" language-shell"><code class="language-shell">git commit -a -m 'add some feature'</code></pre><h2 id="提交分支到仓库"><a href="#提交分支到仓库" class="headerlink" title="提交分支到仓库"></a>提交分支到仓库</h2><pre class=" language-shell"><code class="language-shell">git push origin your-new-feature</code></pre><h2 id="提交-pull-request"><a href="#提交-pull-request" class="headerlink" title="提交 pull request"></a>提交 pull request</h2><p><img src="pull-request.jpg" alt="pull-request"></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识 chrome 扩展</title>
      <link href="/2016/03/21/extension-chrome/"/>
      <url>/2016/03/21/extension-chrome/</url>
      
        <content type="html"><![CDATA[<p>熟悉下 <strong>chrome</strong> 插件开发</p><a id="more"></a><h2 id="下载demo"><a href="#下载demo" class="headerlink" title="下载demo"></a>下载demo</h2><p>以 <strong>set_page_color</strong> 这个扩展为例 <strong><a href="https://developer.chrome.com/extensions/examples/api/browserAction/set_page_color.zip" target="_blank" rel="noopener">下载地址</a></strong></p><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><h3 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a>manifest.json</h3><p><strong>manifest.json</strong> 用于保存一些元数据。例如扩展的名称、描述、版本号等等</p><p><img src="manifest-json.jpg" alt="manifest.json"></p><h3 id="icon-png"><a href="#icon-png" class="headerlink" title="icon.png"></a>icon.png</h3><p>扩展图标，显示在工具条的右侧，称之为 <strong>browser action</strong></p><p><img src="browser-action.jpg" alt="browser-action"></p><h3 id="popup-html"><a href="#popup-html" class="headerlink" title="popup.html"></a>popup.html</h3><p><strong>popup.html</strong> 用于渲染点击 <strong>browser action</strong> 弹出的窗口</p><p><img src="popup-html.jpg" alt="popup-html"></p><h3 id="popup-js"><a href="#popup-js" class="headerlink" title="popup.js"></a>popup.js</h3><p><strong>popup.js</strong> 是 <strong>popup.html</strong> 的主要逻辑代码</p><p><img src="popup-js.jpg" alt="popup-js"></p><h2 id="调试扩展"><a href="#调试扩展" class="headerlink" title="调试扩展"></a>调试扩展</h2><h3 id="进入扩展程序"><a href="#进入扩展程序" class="headerlink" title="进入扩展程序"></a>进入扩展程序</h3><p>在浏览器地址栏输入：<strong>chrome://extensions/</strong></p><p><img src="extension-page.jpg" alt="extension-page"></p><h3 id="勾选开发者模式"><a href="#勾选开发者模式" class="headerlink" title="勾选开发者模式"></a>勾选开发者模式</h3><p><img src="check-developer-mode.jpg" alt="check-developer-mode"></p><h3 id="加载已解压的扩展"><a href="#加载已解压的扩展" class="headerlink" title="加载已解压的扩展"></a>加载已解压的扩展</h3><p><img src="load-unpacked-extension.jpg" alt="load-unpacked-extension"> <img src="extension-is-loaded.jpg" alt="extension-is-loaded"></p><h3 id="运行扩展程序"><a href="#运行扩展程序" class="headerlink" title="运行扩展程序"></a>运行扩展程序</h3><p><img src="run-extension.jpg" alt="run-extension"></p><h2 id="打包扩展"><a href="#打包扩展" class="headerlink" title="打包扩展"></a>打包扩展</h2><h3 id="点击打包扩展程序按钮"><a href="#点击打包扩展程序按钮" class="headerlink" title="点击打包扩展程序按钮"></a>点击打包扩展程序按钮</h3><p><img src="package-extension.jpg" alt="package-extension"></p><h3 id="选择扩展程序根目录"><a href="#选择扩展程序根目录" class="headerlink" title="选择扩展程序根目录"></a>选择扩展程序根目录</h3><p><img src="save-package.jpg" alt="save-package"></p><h3 id="生成打包文件"><a href="#生成打包文件" class="headerlink" title="生成打包文件"></a>生成打包文件</h3><p><img src="package.jpg" alt="package"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><strong><a href="https://developer.chrome.com/extensions/getstarted" target="_blank" rel="noopener">https://developer.chrome.com/extensions/getstarted</a></strong></li><li><strong><a href="https://developer.chrome.com/extensions/api_index" target="_blank" rel="noopener">https://developer.chrome.com/extensions/api_index</a></strong></li><li><strong><a href="https://developer.chrome.com/extensions/samples" target="_blank" rel="noopener">https://developer.chrome.com/extensions/samples</a></strong></li><li><strong><a href="https://developer.chrome.com/extensions/manifest" target="_blank" rel="noopener">https://developer.chrome.com/extensions/manifest</a></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> extension </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 中的 &lt;meta&gt;</title>
      <link href="/2016/03/17/html-meta-element/"/>
      <url>/2016/03/17/html-meta-element/</url>
      
        <content type="html"><![CDATA[<p>整理 html 中 <code>**&amp;lt;meta&amp;gt;**</code> 标签的一些用法</p><a id="more"></a><h2 id="设置网页字符编码"><a href="#设置网页字符编码" class="headerlink" title="设置网页字符编码"></a>设置网页字符编码</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>所有字符编码 <a href="http://www.iana.org/assignments/character-sets/character-sets.xhtml" target="_blank" rel="noopener">http://www.iana.org/assignments/character-sets/character-sets.xhtml</a></p><h2 id="设置网页关键字"><a href="#设置网页关键字" class="headerlink" title="设置网页关键字"></a>设置网页关键字</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HTML,CSS,XML,JavaScript<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h2 id="设置网页描述"><a href="#设置网页描述" class="headerlink" title="设置网页描述"></a>设置网页描述</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ryuu<span class="token punctuation">'</span>s blog<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h2 id="设置网页作者"><a href="#设置网页作者" class="headerlink" title="设置网页作者"></a>设置网页作者</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ryuu<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h2 id="设置-robots"><a href="#设置-robots" class="headerlink" title="设置 robots"></a>设置 robots</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>robots<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>contentValue<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>contentValue 可以是：</p><ul><li><strong>index</strong> 允许搜索引擎索引此网页</li><li><strong>noindex</strong> 阻止搜索引擎索引此网页</li><li><strong>follow</strong> 允许搜索引擎继续通过此网页的链接索引搜索其它的网页</li><li><strong>nofollow</strong> 阻止搜索引擎继续通过此网页的链接索引搜索其它的网页</li><li><strong>noodp</strong> 阻止<a href="http://www.dmoz.org/" target="_blank" rel="noopener">Open Directory Project</a>的使用 (Google, Yahoo, Bing)</li><li><strong>noarchive</strong> 阻止搜索引擎生成网页快照 (Google, Yahoo)</li><li><strong>nosnippet</strong> 阻止搜索引擎显示网页的描述 (Google)</li><li><strong>noimageindex</strong> 阻止引用网页时出现图片索引 (Google)</li><li><strong>noydir</strong> 阻止 Yahoo Directory description 的使用 (Yahoo)</li><li><strong>nocache</strong> 与 noarchive 相同 (Bing)</li><li><strong>all</strong> 等同于 “index,follow”</li><li><strong>none</strong> 等同于 “noindex, nofollow”</li></ul><h2 id="设置-googlebot"><a href="#设置-googlebot" class="headerlink" title="设置 googlebot"></a>设置 googlebot</h2><p>与 robots 等同，但只允许谷歌爬虫抓取</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>googlebot<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h2 id="设置-slurp"><a href="#设置-slurp" class="headerlink" title="设置 slurp"></a>设置 slurp</h2><p>与 robots 等同，但只允许雅虎的爬虫抓取</p><h2 id="设置生成器"><a href="#设置生成器" class="headerlink" title="设置生成器"></a>设置生成器</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>generator<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IntelliJ IDEA 15.0.4<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h2 id="控制-HTTP-Referer-请求头"><a href="#控制-HTTP-Referer-请求头" class="headerlink" title="控制 HTTP Referer 请求头"></a>控制 HTTP Referer 请求头</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>referrer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>contentValue<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>contentValue 可以是：</p><ul><li><strong>no-referrer</strong> 任何情况下都不发送 referrer 头</li><li><strong>origin</strong> 发送只包含 host 部分的 referrer。启用这个规则，无论是否发生协议降级，无论是本站链接还是站外链接，都会发送 referrer 头，但是只包含协议 + host 部分（不包含具体的路径及参数等信息）</li><li><strong>no-referrer-when-downgrade</strong> 仅当发生协议降级（如 HTTPS 页面引入 HTTP 资源，从 HTTPS 页面跳到 HTTP 等）时不发送 referrer 信息。这个规则是现在大部分浏览器默认所采用的</li><li><strong>origin-when-crossorigin</strong> 仅在发生跨域访问时发送只包含 host 的 referrer，同域下还是完整的。它与origin的区别是多判断了是否 cross-origin。需要注意的是协议、域名和端口都一致，才会被浏览器认为是同域</li><li><strong>unsafe-URL</strong> 无论是否发生协议降级，无论是本站链接还是站外链接，统统都发送 referrer 信息。正如其名，这是最宽松而最不安全的策略</li></ul><h2 id="设置创建者"><a href="#设置创建者" class="headerlink" title="设置创建者"></a>设置创建者</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>creator<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ryuu<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h2 id="设置发布者"><a href="#设置发布者" class="headerlink" title="设置发布者"></a>设置发布者</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>publisher<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ryuu<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h2 id="刷新网页"><a href="#刷新网页" class="headerlink" title="刷新网页"></a>刷新网页</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>content 为秒数</p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0; url<span class="token punctuation">=</span>http://f2e-tlj.me<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h2 id="兼容"><a href="#兼容" class="headerlink" title="兼容"></a>兼容</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge,chrome<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h2 id="移动设备"><a href="#移动设备" class="headerlink" title="移动设备"></a>移动设备</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h3 id="禁止缩放"><a href="#禁止缩放" class="headerlink" title="禁止缩放"></a>禁止缩放</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1, maximum-scale<span class="token punctuation">=</span>1, user-scalable<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h2 id="开放内容协议"><a href="#开放内容协议" class="headerlink" title="开放内容协议"></a>开放内容协议</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[name]<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>contentValue<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>[name] 有：</p><ul><li><strong>og:type</strong> 类型 比如 article video photo 等</li><li><strong>og:title</strong> 标题</li><li><strong>og:url</strong> 地址</li><li><strong>og:image</strong> 图片</li><li><strong>og:site_name</strong> 网站名</li><li><strong>og:description</strong> 描述</li><li><strong>og:updated_time</strong> 更新时间</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><strong><a href="http://www.w3schools.com/tags/tag_meta.asp" target="_blank" rel="noopener">http://www.w3schools.com/tags/tag_meta.asp</a></strong></li><li><strong><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</a></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> meta </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECMAScript2015(6) Functions</title>
      <link href="/2016/03/15/es6-functions/"/>
      <url>/2016/03/15/es6-functions/</url>
      
        <content type="html"><![CDATA[<p>本文记录 <strong>ES6</strong> 对 <strong>Function</strong> 类的增强与改进</p><a id="more"></a><h2 id="函数的默认参数"><a href="#函数的默认参数" class="headerlink" title="函数的默认参数"></a>函数的默认参数</h2><p>定义默认参数的形式是给形参赋值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token string">'World'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Hello World</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'China'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Hello China</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Hello</span></code></pre><p>默认参数只有在未指定该参数或该参数为 <strong>undefined</strong> 是才被使用</p><p><a href="https://leanpub.com/understandinges6/read/#leanpub-auto-functions-with-default-parameter-values" target="_blank" rel="noopener">more info about this section</a></p><h2 id="rest-参数"><a href="#rest-参数" class="headerlink" title="rest 参数"></a>rest 参数</h2><p>rest 参数是在参数前面加 <strong>…</strong> 前缀，它是表示一个包含函数剩余参数的数组</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">pick</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> <span class="token operator">...</span>keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      result<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> object<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="rest-参数只能有一个，并且是最后一个参数"><a href="#rest-参数只能有一个，并且是最后一个参数" class="headerlink" title="rest 参数只能有一个，并且是最后一个参数"></a>rest 参数只能有一个，并且是最后一个参数</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Syntax error: Can't have a named parameter after rest parameters</span><span class="token keyword">function</span> <span class="token function">pick</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> <span class="token operator">...</span>keys<span class="token punctuation">,</span> last<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      result<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> object<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="res-t参数不能用于对象字面量-setter"><a href="#res-t参数不能用于对象字面量-setter" class="headerlink" title="res t参数不能用于对象字面量 setter"></a>res t参数不能用于对象字面量 setter</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Syntax error: Can't use rest param in setter</span>  <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token operator">...</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// do something</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><a href="https://leanpub.com/understandinges6/read/#leanpub-auto-working-with-unnamed-parameters" target="_blank" rel="noopener">more info about this section</a></p><h2 id="Function-构造函数"><a href="#Function-构造函数" class="headerlink" title="Function 构造函数"></a>Function 构造函数</h2><h3 id="支持默认参数"><a href="#支持默认参数" class="headerlink" title="支持默认参数"></a>支持默认参数</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> add <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">,</span> <span class="token string">"second = first"</span><span class="token punctuation">,</span> <span class="token string">"return first + second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><h3 id="支持-rest-参数"><a href="#支持-rest-参数" class="headerlink" title="支持 rest 参数"></a>支持 rest 参数</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> pickFirst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">"...args"</span><span class="token punctuation">,</span> <span class="token string">"return args[0]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">pickFirst</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><p><a href="https://leanpub.com/understandinges6/read/#leanpub-auto-increased-capabilities-of-the-function-constructor" target="_blank" rel="noopener">more info about this section</a></p><h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><p>扩展运算符也是加前缀 <strong>…</strong> rest 将逗号分割的参数合并为数组，扩展运算符则将数组分解为逗号分割的参数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// equivalent to</span><span class="token comment" spellcheck="true">// console.log(Math.max(25, 50, 75, 100));</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 100</span></code></pre><p><a href="https://leanpub.com/understandinges6/read/#leanpub-auto-the-spread-operator" target="_blank" rel="noopener">more info about this section</a></p><h2 id="name-属性"><a href="#name-属性" class="headerlink" title="name 属性"></a>name 属性</h2><p>所有 es6 中的函数都有 <strong>name</strong> 属性</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token keyword">var</span> doAnotherThing <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doSomething<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "doSomething"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doAnotherThing<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "doAnotherThing"</span></code></pre><h3 id="特殊的-name-属性"><a href="#特殊的-name-属性" class="headerlink" title="特殊的 name 属性"></a>特殊的 name 属性</h3><p>对象中 getter 或 setter 函数的属性 name 会加上前缀 <strong>get</strong> 或 <strong>set</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> doSomething <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span> <span class="token function">firstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Nicholas"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    sayName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doSomething<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// "doSomethingElse"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>sayName<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// "sayName"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>firstName<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "get firstName"</span></code></pre><p>使用 <strong>bind</strong> 创建函数的 name 属性带有前缀 <strong>bound</strong>，使用 Function 构造函数创建 name 属性为 <strong>anonymous</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> doSomething <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doSomething<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// "bound doSomething"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// "anonymous"</span></code></pre><p><a href="https://leanpub.com/understandinges6/read/#leanpub-auto-ecmascript-6s-name-property" target="_blank" rel="noopener">more info about this section</a></p><h2 id="new-target"><a href="#new-target" class="headerlink" title="new.target"></a>new.target</h2><p>es6 引入 new.target 元属性，用于判断函数是否使用 new 关键字</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">new</span><span class="token punctuation">.</span>target <span class="token operator">!==</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// using new</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"You must use new with Person."</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> notAPerson <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"Michael"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error!</span></code></pre><p><a href="https://leanpub.com/understandinges6/read/#leanpub-auto-clarifying-the-dual-purpose-of-functions" target="_blank" rel="noopener">more info about this section</a></p><h2 id="块级函数"><a href="#块级函数" class="headerlink" title="块级函数"></a>块级函数</h2><p>es6 支持在代码块中声明函数</p><pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> doSomething<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "function"</span>  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span>  <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> doSomething<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "undefined"</span></code></pre><p><a href="https://leanpub.com/understandinges6/read/#leanpub-auto-block-level-functions" target="_blank" rel="noopener">more info about this section</a></p><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>es6 新增箭头函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> reflect <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> value<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// effectively equivalent to:</span><span class="token keyword">var</span> reflect <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="箭头函数的特性"><a href="#箭头函数的特性" class="headerlink" title="箭头函数的特性"></a>箭头函数的特性</h3><ul><li><strong>没有 this, super, arguments, and new.target 绑定</strong></li><li><strong>不能使用 new</strong></li><li><strong>没有 prototype</strong></li><li><strong>不能更改 this</strong></li><li><strong>没有 arguments 对象</strong></li><li><strong>不能重复命名参数</strong></li></ul><p><a href="https://leanpub.com/understandinges6/read/#leanpub-auto-arrow-functions" target="_blank" rel="noopener">more info about this section</a></p><h2 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h2><h3 id="什么是尾调用"><a href="#什么是尾调用" class="headerlink" title="什么是尾调用"></a>什么是尾调用</h3><p>函数的最后一步调用另一个函数，称作尾调用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// tail call</span><span class="token punctuation">}</span></code></pre><h3 id="尾调用优化-1"><a href="#尾调用优化-1" class="headerlink" title="尾调用优化"></a>尾调用优化</h3><pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// optimized</span>  <span class="token keyword">return</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>以下情况不能尾调用优化</p><pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// not optimized - no return</span>  <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// not optimized - must add after returning</span>  <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// not optimized - call isn't in tail position</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>        func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> num<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// not optimized - function is a closure</span>    <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a href="https://leanpub.com/understandinges6/read/#leanpub-auto-tail-call-optimization" target="_blank" rel="noopener">more info about this section</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://leanpub.com/understandinges6/read/#leanpub-auto-functions" target="_blank" rel="noopener">https://leanpub.com/understandinges6/read/#leanpub-auto-functions</a></li><li><a href="http://es6.ruanyifeng.com/#docs/function" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/function</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最新可用的免费 vpn</title>
      <link href="/2016/02/04/latest-free-vpn/"/>
      <url>/2016/02/04/latest-free-vpn/</url>
      
        <content type="html"><![CDATA[<p>搜集最新可用的免费 **<a href="http://baike.baidu.com/link?url=YaZ_RWXjB11y14b-YMl3YV3_Kqp4aKWmI5v0YuqrndYXDgSWZizPVuC_Kh9vYDSZi79n7I4cfphcy-p7IhYaUO6rjZs1rgd2sC_xZfjznM4iYdV-UyEVzuDFcbeWZY2E" target="_blank" rel="noopener" title="vpn">vpn</a>**，不定期更新</p><a id="more"></a><h2 id="XX-Net"><a href="#XX-Net" class="headerlink" title="XX-Net"></a>XX-Net</h2><p>接力 GoAgent 翻墙工具—-Anti-censorship tools</p><p><img src="./xx-net.png" alt="xx-net" title="xx-net"></p><ul><li>项目地址：<a href="https://github.com/XX-net/XX-Net" target="_blank" rel="noopener" title="XX-Net">https://github.com/XX-net/XX-Net</a></li></ul><h2 id="Lantern"><a href="#Lantern" class="headerlink" title="Lantern"></a>Lantern</h2><p>Lantern 是一个免费的应用程序。它能帮助你随时随地快速、可靠、安全地访问互联网。</p><p><img src="./lantern.png" alt="lantern" title="lantern"></p><ul><li>项目地址：<a href="https://github.com/getlantern/lantern" target="_blank" rel="noopener" title="Lantern">https://github.com/getlantern/lantern</a></li><li>官方网站：<a href="https://getlantern.org/" target="_blank" rel="noopener" title="Lantern">https://getlantern.org/</a></li></ul><h2 id="Psiphon"><a href="#Psiphon" class="headerlink" title="Psiphon"></a>Psiphon</h2><p>赛风是赛风公司的一款新翻墙工具，利用 VPN, SSH 和 HTTP 代理软件提供未经审查的访问互联网。</p><p><img src="./psiphon.png" alt="psiphon" title="psiphon"></p><ul><li>官方网站：<a href="http://psiphon-labs.github.io/" target="_blank" rel="noopener" title="Psiphon">http://psiphon-labs.github.io/</a></li><li>项目地址：<a href="https://github.com/Psiphon-Labs" target="_blank" rel="noopener">https://github.com/Psiphon-Labs</a></li></ul><h2 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a>Shadowsocks</h2><p>Shadowsocks（中文名称：影梭）是使用 Python、C++、C# 等语言开发的、基于 Apache 许可证的开放源代码软件，用于保护网络流量、加密数据传输。Shadowsocks 使用 Socks5 代理方式。</p><p>在中国大陆，本工具也被广泛用于突破防火长城（GFW），以浏览被封锁、屏蔽或干扰的内容。</p><p><img src="./Shadowsocks.png" alt="Shadowsocks" title="Shadowsocks"></p><ul><li>项目地址：<a href="https://github.com/shadowsocks/shadowsocks-windows" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-windows</a></li></ul><h2 id="Freegate"><a href="#Freegate" class="headerlink" title="Freegate"></a>Freegate</h2><p>自由门（英语：Freegate）是动态网公司开发的一种破网软件，一般用来突破中华人民共和国政府创建的防火长城以浏览被当局屏蔽的网站或收发邮件。由于防火长城不断加强封锁，所以该软件也不断升级以突破防火长城。除了中国大陆，在伊朗、叙利亚、阿联酋等含有互联网审查的国家中也有很多用户使用该软件访问被其政府屏蔽的网站。</p><p><img src="./Freegate.png" alt="Freegate" title="Freegate"></p><ul><li>官方网站：<a href="http://dongtaiwang.com/loc/download.php" target="_blank" rel="noopener">http://dongtaiwang.com/loc/download.php</a></li></ul><h2 id="New-Pac"><a href="#New-Pac" class="headerlink" title="New-Pac"></a>New-Pac</h2><p>new-pac 项目提供了许多自由上网的方法集合</p><p><img src="./new-pac.png" alt="New-Pac" title="New-Pac"></p><ul><li>项目地址：<a href="https://github.com/Alvin9999/new-pac/wiki" target="_blank" rel="noopener">https://github.com/Alvin9999/new-pac/wiki</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> vpn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> free </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识 firefox 扩展</title>
      <link href="/2016/02/03/extension-firefox/"/>
      <url>/2016/02/03/extension-firefox/</url>
      
        <content type="html"><![CDATA[<p><strong><a href="http://www.firefox.com.cn/download/" target="_blank" rel="noopener" title="firefox">firefox</a></strong> 社区有大量的插件可供使用，这些这件是怎么开发的呢，让我们一起来研究研究。</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 <strong>nodejs</strong></h3><p><strong>nodejs</strong> <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener" title="官方下载">官方下载</a></p><p><img src="./1_1.jpg" alt="1_1" title="1_1"></p><h3 id="安装-jpm"><a href="#安装-jpm" class="headerlink" title="安装 jpm"></a>安装 <strong>jpm</strong></h3><p><strong><a href="https://developer.mozilla.org/en-US/Add-ons/SDK/Tools/jpm" target="_blank" rel="noopener" title="jpm">jpm</a></strong> 工具用于开发、调试和打包 <strong><a href="http://www.firefox.com.cn/download/" target="_blank" rel="noopener" title="firefox">firefox</a></strong> 插件。它发布在 <strong><a href="https://www.npmjs.com/package/jpm" target="_blank" rel="noopener" title="npm">npm</a></strong> 上。</p><pre class=" language-sh"><code class="language-sh">npm i jpm --global</code></pre><p><img src="./1_2.jpg" alt="1_2" title="1_2"> <img src="./1_3.jpg" alt="1_3" title="1_3"></p><p>不想全局安装不加参数 <strong>&minus;&minus;global</strong> 即可</p><pre class=" language-sh"><code class="language-sh">npm i jpm</code></pre><h2 id="第一个插件"><a href="#第一个插件" class="headerlink" title="第一个插件"></a>第一个插件</h2><p>创建一个目录，进入目录，运行 <strong>jpm init</strong> ，根据提示完成初始化</p><pre class=" language-sh"><code class="language-sh">mkdir myaddon & cd myaddon & jpm init</code></pre><p><img src="./2_1.jpg" alt="2_1" title="2_1"></p><p>初始化后目录结构</p><p><img src="./2_2.jpg" alt="2_2" title="2_2"></p><p>使用你最爱的编辑器打开 <strong>index.js</strong> 加入以下代码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> buttons <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'sdk/ui/button/action'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> tabs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"sdk/tabs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> button <span class="token operator">=</span> buttons<span class="token punctuation">.</span><span class="token function">ActionButton</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  id<span class="token punctuation">:</span> <span class="token string">"mozilla-link"</span><span class="token punctuation">,</span>  label<span class="token punctuation">:</span> <span class="token string">"Visit Mozilla"</span><span class="token punctuation">,</span>  icon<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"16"</span><span class="token punctuation">:</span> <span class="token string">"./icon-16.png"</span><span class="token punctuation">,</span>    <span class="token string">"32"</span><span class="token punctuation">:</span> <span class="token string">"./icon-32.png"</span><span class="token punctuation">,</span>    <span class="token string">"64"</span><span class="token punctuation">:</span> <span class="token string">"./icon-64.png"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  onClick<span class="token punctuation">:</span> handleClick<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>  tabs<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"https://developer.mozilla.org/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在我们的插件根目录创建 <strong>data</strong> 目录，并保存3个尺寸的图标到该目录</p><pre class=" language-sh"><code class="language-sh">mkdir data</code></pre><p><img src="https://mdn.mozillademos.org/files/7635/icon-16.png"> <img src="https://mdn.mozillademos.org/files/7637/icon-32.png"> <img src="https://mdn.mozillademos.org/files/7639/icon-64.png"></p><p>运行命令 <strong>jpm run</strong></p><pre class=" language-sh"><code class="language-sh">jpm run</code></pre><p><img src="./2_3.jpg" alt="2_3" title="2_3"></p><p>它会调用 <strong>firefox</strong> 浏览器，并加载我们的插件</p><p><img src="./2_4.jpg" alt="2_4" title="2_4"></p><p>点击右上角的小图标，会打开新的标签页链接到 <strong><a href="https://developer.mozilla.org/" target="_blank" rel="noopener">https://developer.mozilla.org/</a></strong></p><p><img src="./2_5.jpg" alt="2_5" title="2_5"></p><p>开发完成我们需要打包插件，在插件根目录运行命令 <strong>jpm xpi</strong></p><pre class=" language-sh"><code class="language-sh">jpm xpi</code></pre><p><img src="./2_6.jpg" alt="2_6" title="2_6"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><strong><a href="https://developer.mozilla.org/en-US/Add-ons/SDK/Tools/jpm" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/Add-ons/SDK/Tools/jpm</a></strong></li><li><strong><a href="https://developer.mozilla.org/en-US/Add-ons/SDK/Tutorials/Getting&#95;Started&#95;&#40;jpm&#41;" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/Add-ons/SDK/Tutorials/Getting&#95;Started&#95;&#40;jpm&#41;</a></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> extension </category>
          
      </categories>
      
      
        <tags>
            
            <tag> firefox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 命令之 log</title>
      <link href="/2016/02/02/git-command-log/"/>
      <url>/2016/02/02/git-command-log/</url>
      
        <content type="html"><![CDATA[<p>查看 <strong>git</strong> 提交的信息日志，使用命令 <strong>git log</strong></p><a id="more"></a><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre class=" language-shell"><code class="language-shell">git log [<options>] [<revision range>] [[\--] <path>…​]</code></pre><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><h3 id="限制输出日志数目"><a href="#限制输出日志数目" class="headerlink" title="限制输出日志数目"></a>限制输出日志数目</h3><pre class=" language-shell"><code class="language-shell">git log -<number>|-n <number>|--max-count=<number></code></pre><p><img src="max-num.jpg" alt="max-num"></p><h3 id="跳过前x条日志"><a href="#跳过前x条日志" class="headerlink" title="跳过前x条日志"></a>跳过前x条日志</h3><pre class=" language-shell"><code class="language-shell">git log --skip=<number></code></pre><p><img src="skip-num.jpg" alt="skip-num"></p><h3 id="显示log-size"><a href="#显示log-size" class="headerlink" title="显示log size"></a>显示log size</h3><pre class=" language-shell"><code class="language-shell">git log --log-size</code></pre><p><img src="log-size.jpg" alt="log-size"></p><h3 id="显示source"><a href="#显示source" class="headerlink" title="显示source"></a>显示source</h3><pre class=" language-shell"><code class="language-shell">git log --source</code></pre><p><img src="source.jpg" alt="source"></p><h3 id="显示所有更改"><a href="#显示所有更改" class="headerlink" title="显示所有更改"></a>显示所有更改</h3><pre class=" language-shell"><code class="language-shell">git log --full-diff -p <path></code></pre><p><img src="full-diff.jpg" alt="full-diff"></p><h2 id="更多用法"><a href="#更多用法" class="headerlink" title="更多用法"></a>更多用法</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> log -h</code></pre><p><img src="2_1.jpg" alt="2_1" title="2_1"></p><p>或者查看帮助文档</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">help</span> log</code></pre><p><img src="2_2.jpg" alt="2_2" title="2_2"> <img src="2_3.jpg" alt="2_3" title="2_3"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><strong><a href="http://git-scm.com/docs/git-log" target="_blank" rel="noopener" title="git官方文档-----git-log命令">git官方文档—–git-log命令</a></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 命令之 commit</title>
      <link href="/2016/01/29/git-command-commit/"/>
      <url>/2016/01/29/git-command-commit/</url>
      
        <content type="html"><![CDATA[<p><strong>git commit</strong> 命令用于将已暂存的文件存储到 <strong>git</strong> 仓库</p><a id="more"></a><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><h3 id="不带参数提交"><a href="#不带参数提交" class="headerlink" title="不带参数提交"></a>不带参数提交</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> commit</code></pre><p><strong>git</strong> 会调用系统默认编辑器(或者调用你自己 <strong><a href="http://localhost:4000/2016/01/22/git-command-config/#%E9%85%8D%E7%BD%AE%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8" target="_blank" rel="noopener">配置</a></strong> 的编辑器)</p><p><img src="./images/1_1.jpg" alt="1_1" title="1_1"></p><p>敲击键盘 <strong>i</strong> 键，进入编辑状态，输入提交信息</p><p><img src="./images/1_2.jpg" alt="1_2" title="1_2"></p><p>然后按键盘左上角的 <strong>Esc</strong> 键退出编辑状态，输入 <strong>:wq</strong> 保存并退出编辑器</p><p><img src="./images/1_3.jpg" alt="1_3" title="1_3"> <img src="./images/1_4.jpg" alt="1_4" title="1_4"></p><h3 id="提交所有已跟踪的文件"><a href="#提交所有已跟踪的文件" class="headerlink" title="提交所有已跟踪的文件"></a>提交所有已跟踪的文件</h3><p>提交所有已跟踪的文件(不包括未跟踪的文件)，使用参数 <strong>&minus;a</strong> 或 <strong>&minus;&minus;all</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> commit -a</code></pre><p><img src="./images/1_5.jpg" alt="1_5" title="1_5"> <img src="./images/1_6.jpg" alt="1_6" title="1_6"></p><h3 id="查看差异"><a href="#查看差异" class="headerlink" title="查看差异"></a>查看差异</h3><p>提交时想查看一下文件差异，可以使用 <strong>&minus;v</strong> 或 <strong>&minus;&minus;verbose</strong> 参数</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> commit -a -v</code></pre><p><img src="./images/1_11.jpg" alt="1_11" title="1_11"></p><h3 id="命令行中输入提交信息"><a href="#命令行中输入提交信息" class="headerlink" title="命令行中输入提交信息"></a>命令行中输入提交信息</h3><p>如果觉得上面操作太复杂。没关系！我们可以使用参数 <strong>&minus;m</strong> 或 <strong>&minus;&minus;message</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> commit -a -m <span class="token string">'your commit message'</span></code></pre><p><img src="./images/1_7.jpg" alt="1_7" title="1_7"></p><h3 id="查看可提交信息"><a href="#查看可提交信息" class="headerlink" title="查看可提交信息"></a>查看可提交信息</h3><p>使用参数 <strong>&minus;&minus;dry&minus;run</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> commit --dry-run</code></pre><p><img src="./images/1_8.jpg" alt="1_8" title="1_8"></p><p>太长？没关系，有 <strong>&minus;&minus;short</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> commit --dry-run --short</code></pre><p><img src="./images/1_9.jpg" alt="1_9" title="1_9"></p><p><strong>&minus;&minus;short</strong> 后还可以跟 <strong>&minus;&minus;branch</strong> 显示当前分支</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> commit --dry-run --short --branch</code></pre><p><img src="./images/1_10.jpg" alt="1_10" title="1_10"></p><h2 id="更多用法"><a href="#更多用法" class="headerlink" title="更多用法"></a>更多用法</h2><p>我们使用在命令后跟上参数 <strong>&minus;h</strong> 查看更多关于 <strong>git commit</strong> 的用法</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> commit -h</code></pre><p><img src="./images/2_1.jpg" alt="2_1" title="2_1"></p><p>或者使用 <strong>git help commit</strong> 命令</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">help</span> commit</code></pre><p><img src="./images/2_2.jpg" alt="2_2" title="2_2"> <img src="./images/2_3.jpg" alt="2_3" title="2_3"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><strong><a href="http://git-scm.com/docs/git-commit" target="_blank" rel="noopener" title="git官方文档-----git-commit命令">git官方文档—–git-commit命令</a></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 命令之 status</title>
      <link href="/2016/01/29/git-command-status/"/>
      <url>/2016/01/29/git-command-status/</url>
      
        <content type="html"><![CDATA[<p><strong>git status</strong> 命令用于查看当前仓库的文件状态</p><a id="more"></a><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="不带参数"><a href="#不带参数" class="headerlink" title="不带参数"></a>不带参数</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> status</code></pre><p><img src="./images/1_1.jpg" alt="1_1" title="1_1"></p><h3 id="简短格式"><a href="#简短格式" class="headerlink" title="简短格式"></a>简短格式</h3><p>简短格式我们使用参数 <strong>&minus;s</strong> 或 <strong>&minus;&minus;short</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> status -s</code></pre><p><img src="./images/1_2.jpg" alt="1_2" title="1_2"></p><h3 id="分支信息"><a href="#分支信息" class="headerlink" title="分支信息"></a>分支信息</h3><p>显示分支信息(包括简短格式)使用参数 <strong>&minus;b</strong> 或 <strong>&minus;&minus;branch</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> status -b</code></pre><p><img src="./images/1_3.jpg" alt="1_3" title="1_3"></p><h3 id="详细信息"><a href="#详细信息" class="headerlink" title="详细信息"></a>详细信息</h3><p>查看详细信息可以使用参数 <strong>&minus;v</strong> 或 <strong>&minus;&minus;verbose</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> status -v</code></pre><p><img src="./images/1_4.jpg" alt="1_4" title="1_4"></p><h3 id="查看忽略的文件"><a href="#查看忽略的文件" class="headerlink" title="查看忽略的文件"></a>查看忽略的文件</h3><p>需要查看忽略的文件使用参数 <strong>&minus;&minus;ignored</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> status --ignored</code></pre><p><img src="./images/1_5.jpg" alt="1_5" title="1_5"></p><h2 id="更多用法"><a href="#更多用法" class="headerlink" title="更多用法"></a>更多用法</h2><p>我们使用参数 <strong>&minus;h</strong> 查看更多用法</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> status -h</code></pre><p><img src="./images/2_1.jpg" alt="2_1" title="2_1"></p><p>也可以使用如下命令，它会调用系统默认浏览器显示文档内容</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">help</span> status</code></pre><p><img src="./images/2_2.jpg" alt="2_2" title="2_2"> <img src="./images/2_3.jpg" alt="2_3" title="2_3"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><strong><a href="http://git-scm.com/docs/git-status" target="_blank" rel="noopener" title="git官方文档-----git-add命令">git官方文档—–git-add命令</a></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 命令之 add</title>
      <link href="/2016/01/27/git-command-add/"/>
      <url>/2016/01/27/git-command-add/</url>
      
        <content type="html"><![CDATA[<p>每次提交前，我们都需要使用 <strong>git add</strong> 命令把需要提交的文件放到暂存区</p><a id="more"></a><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="暂存单文件"><a href="#暂存单文件" class="headerlink" title="暂存单文件"></a>暂存单文件</h3><p>暂存文件我们使用 <strong>git add</strong> 后面跟上文件名</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add README.md</code></pre><p><img src="./images/1_1.jpg" alt="1_1" title="1_1"></p><h3 id="暂存所有文件"><a href="#暂存所有文件" class="headerlink" title="暂存所有文件"></a>暂存所有文件</h3><p>一次性暂存所有文件，使用参数 <strong>&minus;A</strong> 或 <strong>&minus;&minus;all</strong> 或 <strong>&minus;&minus;no-ignore-removal</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add -A</code></pre><p><img src="./images/1_2.jpg" alt="1_2" title="1_2"></p><h3 id="暂存已跟踪的文件"><a href="#暂存已跟踪的文件" class="headerlink" title="暂存已跟踪的文件"></a>暂存已跟踪的文件</h3><p>如果不想暂存未跟踪的文件，命令后面加上参数 <strong>&minus;u</strong> 或 <strong>&minus;&minus;update</strong></p><p><img src="./images/1_3.jpg" alt="1_3" title="1_3"></p><h3 id="暴力暂存"><a href="#暴力暂存" class="headerlink" title="暴力暂存"></a>暴力暂存</h3><p>暂存所有文件，包括.gitignore中的文件，使用参数 <strong>&minus;f</strong> 或 <strong>&minus;&minus;force</strong></p><p><img src="./images/1_4.jpg" alt="1_4" title="1_4"></p><h3 id="模拟暂存"><a href="#模拟暂存" class="headerlink" title="模拟暂存"></a>模拟暂存</h3><p>如果你只是想看看这个文件是否可以暂存，可以使用参数 <strong>&minus;n</strong> 或 <strong>&minus;&minus;dry-run</strong>。实际上并不会真正暂存</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add -A -n</code></pre><p><img src="./images/1_5.jpg" alt="1_5" title="1_5"></p><h3 id="显示暂存明细"><a href="#显示暂存明细" class="headerlink" title="显示暂存明细"></a>显示暂存明细</h3><p>如果想查看暂存明细，可以使用参数 <strong>&minus;v</strong> 或 <strong>&minus;&minus;verbose</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add -A -v</code></pre><p><img src="./images/1_6.jpg" alt="1_6" title="1_6"></p><h2 id="更多用法"><a href="#更多用法" class="headerlink" title="更多用法"></a>更多用法</h2><p>查看 <strong>git add</strong> 更多的用法，使用参数 <strong>&minus;h</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add -h</code></pre><p><img src="./images/2_1.jpg" alt="2_1" title="2_1"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><strong><a href="http://git-scm.com/docs/git-add" target="_blank" rel="noopener" title="git官方文档-----git-add命令">git官方文档—–git-add命令</a></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 命令之 clone</title>
      <link href="/2016/01/26/git-command-clone/"/>
      <url>/2016/01/26/git-command-clone/</url>
      
        <content type="html"><![CDATA[<p>克隆仓库到新的目录，使用 <strong>git clone</strong> 命令</p><a id="more"></a><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="默认克隆"><a href="#默认克隆" class="headerlink" title="默认克隆"></a>默认克隆</h3><p>假设我们想克隆 <strong>jquery</strong> 仓库</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:jquery/jquery.git</code></pre><p><img src="./images/1_1.jpg" alt="1_1" title="1_1"></p><h3 id="自定义目录名"><a href="#自定义目录名" class="headerlink" title="自定义目录名"></a>自定义目录名</h3><p>如果你想指定目录可以在命令后面跟上目录名</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:jquery/jquery.git jq</code></pre><p><img src="./images/1_2.jpg" alt="1_2" title="1_2"></p><h3 id="克隆分支"><a href="#克隆分支" class="headerlink" title="克隆分支"></a>克隆分支</h3><p>克隆分支，需要在命令后跟参数 <strong>&minus;&minus;branch</strong> 或者 <strong>&minus;b</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:jquery/jquery.git -b 2.2-stable jq2.2</code></pre><p><img src="./images/1_3.jpg" alt="1_3" title="1_3"></p><h2 id="更多用法"><a href="#更多用法" class="headerlink" title="更多用法"></a>更多用法</h2><p>查看更多 <strong>git clone</strong> 参数用法，可以使用 <strong>&minus;h</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone -h</code></pre><p><img src="./images/2_1.jpg" alt="2_1" title="2_1"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><strong><a href="http://git-scm.com/docs/git-clone" target="_blank" rel="noopener" title="git官方文档-----git-clone命令">git官方文档—–git-clone命令</a></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 命令之 init</title>
      <link href="/2016/01/25/git-command-init/"/>
      <url>/2016/01/25/git-command-init/</url>
      
        <content type="html"><![CDATA[<p>创建一个新的 <strong>Git</strong> 仓库或重新初始化一个已存在的 <strong>Git</strong> 仓库我们使用 <strong>git init</strong> 命令</p><a id="more"></a><h2 id="git-init-基本用法"><a href="#git-init-基本用法" class="headerlink" title="git init 基本用法"></a><strong>git init</strong> 基本用法</h2><h3 id="当前目录中初始化"><a href="#当前目录中初始化" class="headerlink" title="当前目录中初始化"></a>当前目录中初始化</h3><p>假设我的项目目录为 <strong>proj1</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> proj1</code></pre><p><img src="./images/1_1.jpg" alt="1_1" title="1_1"></p><p>先进入项目目录，然后运行 <strong>git init</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> init</code></pre><p><img src="./images/1_2.jpg" alt="1_2" title="1_2"></p><p>初始化成功后，项目目录中会生成 <strong>.git</strong> 目录，用户存放 <strong>git</strong> 信息和文件</p><p><img src="./images/1_3.jpg" alt="1_3" title="1_3"></p><h3 id="指定目录初始化"><a href="#指定目录初始化" class="headerlink" title="指定目录初始化"></a>指定目录初始化</h3><p>假设在 <strong>D</strong> 盘中有 <strong>proj2</strong> 而当前目录在 <strong>D</strong> 盘根，那么我们可以指定目录初始化 <strong>git</strong> 仓库</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> init proj2</code></pre><p><img src="./images/1_4.jpg" alt="1_4" title="1_4"></p><p>我们进入 <strong>proj2</strong> 查看是否初始化成功</p><p><img src="./images/1_5.jpg" alt="1_5" title="1_5"> <img src="./images/1_6.jpg" alt="1_6" title="1_6"></p><h2 id="git-init-更多用法"><a href="#git-init-更多用法" class="headerlink" title="git init 更多用法"></a><strong>git init</strong> 更多用法</h2><p>查看 <strong>git init</strong> 的更多用法，我们使用只需要在命令后面加上参数 <strong>&minus;h</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> init -h</code></pre><p><img src="./images/2_1.jpg" alt="2_1" title="2_1"></p><h2 id="有关资料"><a href="#有关资料" class="headerlink" title="有关资料"></a>有关资料</h2><ul><li><strong><a href="http://git-scm.com/docs/git-init" target="_blank" rel="noopener" title="git-init">git官方文档—–git-init命令</a></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 命令之 config</title>
      <link href="/2016/01/22/git-command-config/"/>
      <url>/2016/01/22/git-command-config/</url>
      
        <content type="html"><![CDATA[<p>一般在新的系统上，我们都需要先配置下自己的 <strong>Git</strong> 工作环境。配置工作只需一次，以后升级时还会沿用现在的配置。当然，如果需要，你随时可以用相同的命令修改已有的配置。</p><a id="more"></a><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p><strong>Git</strong> 提供了一个叫做 <strong>git config</strong> 的工具(实际是 <strong>git-config</strong> 命令，只不过可以通过 <strong>git</strong> 加一个名字来呼叫此命令。)，专门用来配置或读取相应的工作环境变量。而正是由这些环境变量，决定了 <strong>Git</strong> 在各个环节的具体工作方式和行为。这些变量可以存放在三个不同的地方：</p><ol><li><strong>/etc/gitconfig</strong> 文件：系统中对所有用户都普遍适用的配置。若使用 <strong>git config</strong> 时用 <strong>&minus;&minus;system</strong> 选项，读写的就是这个文件。</li><li><strong>~/.gitconfig</strong> 文件：用户目录下的配置文件只适用于该用户。若使用 <strong>git config</strong> 时用 <strong>&minus;&minus;global</strong> 选项，读写的就是这个文件。</li><li>当前项目的 <strong>git</strong> 目录中的配置文件(也就是工作目录中的 <strong>.git/config</strong> 文件)：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 <strong>.git/config</strong> 里的配置会覆盖 <strong>/etc/gitconfig</strong> 中的同名变量。</li></ol><p>在 <strong>Windows</strong> 系统上，<strong>Git</strong> 会找寻用户主目录下的 <strong>.gitconfig</strong> 文件。主目录即 <strong>$HOME</strong> 变量指定的目录，一般都是 <strong>C:\Documents and Settings$USER</strong>。此外，Git 还会尝试找寻 <strong>/etc/gitconfig</strong> 文件，只不过看当初 <strong>Git</strong> 装在什么目录，就以此作为根目录来定位。</p><h2 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h2><h3 id="配置用户名"><a href="#配置用户名" class="headerlink" title="配置用户名"></a>配置用户名</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">'ryuu'</span></code></pre><h3 id="配置邮箱"><a href="#配置邮箱" class="headerlink" title="配置邮箱"></a>配置邮箱</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.email <span class="token string">'ryuu@123.com'</span></code></pre><p>用户名和邮箱是必须配置的，用于说明是谁提交了更新。如果只需要在当前项目中配置，只需要去掉 <strong>&minus;&minus;global</strong> 。</p><h2 id="配置文本编辑器"><a href="#配置文本编辑器" class="headerlink" title="配置文本编辑器"></a>配置文本编辑器</h2><p>输入提交信息时 <strong>Git</strong> 会自动调用一个外部编辑器，默认使用操作系统指定的默认编辑器，一般是 <strong>Vi</strong> 或 ** Vim ** 。如果你喜欢 <strong>Emacs</strong>，我们也可以配置</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global core.editor emacs</code></pre><h2 id="配置差异分析工具"><a href="#配置差异分析工具" class="headerlink" title="配置差异分析工具"></a>配置差异分析工具</h2><p>解决合并冲突时，我们会用到差异分析工具。比如要改用 <strong>vimdiff</strong>：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global merge.tool vimdiff</code></pre><p><strong>Git</strong> 可以理解 <strong>kdiff3</strong>，<strong>tkdiff</strong>，<strong>meld</strong>，<strong>xxdiff</strong>，<strong>emerge</strong>，<strong>vimdiff</strong>，<strong>gvimdiff</strong>，<strong>ecmerge</strong> 和 <strong>opendiff</strong> 等合并工具的输出信息</p><h2 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h2><h3 id="查看所有信息"><a href="#查看所有信息" class="headerlink" title="查看所有信息"></a>查看所有信息</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --list</code></pre><p>可能会有重复的变量名，说明它们来自不同文件(<strong>/etc/gitconfig</strong> 和 <strong>~/.gitconfig</strong>)，<strong>Git</strong> 实际采用最后一个</p><h3 id="查看指定信息"><a href="#查看指定信息" class="headerlink" title="查看指定信息"></a>查看指定信息</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config user.name</code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开学学习魔方还原</title>
      <link href="/2016/01/09/begin-to-learn-cube/"/>
      <url>/2016/01/09/begin-to-learn-cube/</url>
      
        <content type="html"><![CDATA[<p>我最近新入坑魔方界。虽然小时候接触过魔方，但是也只是一知半解，没有深入。最近公司同事有个魔方，就开始捣腾起来了。为了学习魔方，我开始上网查资料(小时候没这个条件，有电脑的都是土豪- -)。先去了百度贴吧魔方吧，然后找到了视频教程(<a href="http://www.rubik.com.cn/" target="_blank" rel="noopener" title="魔方小站">魔方小站</a>)。我现在学习的是三阶魔方的还原。</p><a id="more"></a><h2 id="三阶魔方还原根据教程分为7个步骤"><a href="#三阶魔方还原根据教程分为7个步骤" class="headerlink" title="三阶魔方还原根据教程分为7个步骤"></a>三阶魔方还原根据教程分为7个步骤</h2><h3 id="第一步-对好第一面十字"><a href="#第一步-对好第一面十字" class="headerlink" title="第一步 对好第一面十字"></a>第一步 对好第一面十字</h3><p><img src="images/step1.gif" alt="step1" title="step1"></p><p>视频教程<a href="https://imofang.taobao.com/p/jiaocheng31.htm" target="_blank" rel="noopener">戳这里</a></p><h3 id="第二步-对好第一面加上四个侧面的T字形"><a href="#第二步-对好第一面加上四个侧面的T字形" class="headerlink" title="第二步 对好第一面加上四个侧面的T字形"></a>第二步 对好第一面加上四个侧面的T字形</h3><p><img src="images/step2.gif" alt="step2" title="step2"></p><p>视频教程<a href="https://imofang.taobao.com/p/jiaocheng32.htm" target="_blank" rel="noopener">戳这里</a></p><h3 id="第三步-处理第二层的四个棱色块，对好前两层"><a href="#第三步-处理第二层的四个棱色块，对好前两层" class="headerlink" title="第三步 处理第二层的四个棱色块，对好前两层"></a>第三步 处理第二层的四个棱色块，对好前两层</h3><p><img src="images/step3.gif" alt="step3" title="step3"></p><p>视频教程<a href="https://imofang.taobao.com/p/jiaocheng33.htm" target="_blank" rel="noopener">戳这里</a></p><h3 id="第四步-在新的黄色顶面画十字"><a href="#第四步-在新的黄色顶面画十字" class="headerlink" title="第四步 在新的黄色顶面画十字"></a>第四步 在新的黄色顶面画十字</h3><p><img src="images/step4.gif" alt="step4" title="step4"></p><p>视频教程<a href="https://imofang.taobao.com/p/jiaocheng34.htm" target="_blank" rel="noopener">戳这里</a></p><h3 id="第五步-调整顶层角色块的朝向，对好顶层黄色面"><a href="#第五步-调整顶层角色块的朝向，对好顶层黄色面" class="headerlink" title="第五步 调整顶层角色块的朝向，对好顶层黄色面"></a>第五步 调整顶层角色块的朝向，对好顶层黄色面</h3><p><img src="images/step5.gif" alt="step5" title="step5"></p><p>视频教程<a href="https://imofang.taobao.com/p/jiaocheng35.htm" target="_blank" rel="noopener">戳这里</a></p><h3 id="第六步-调整顶层角色块顺序"><a href="#第六步-调整顶层角色块顺序" class="headerlink" title="第六步 调整顶层角色块顺序"></a>第六步 调整顶层角色块顺序</h3><p><img src="images/step6.gif" alt="step6" title="step6"></p><p>视频教程<a href="https://imofang.taobao.com/p/jiaocheng36.htm" target="_blank" rel="noopener">戳这里</a></p><h3 id="第七步-调整顶层棱色块顺序，将魔方最后还原"><a href="#第七步-调整顶层棱色块顺序，将魔方最后还原" class="headerlink" title="第七步 调整顶层棱色块顺序，将魔方最后还原"></a>第七步 调整顶层棱色块顺序，将魔方最后还原</h3><p><img src="images/step7.gif" alt="step7" title="step7"></p><p>视频教程<a href="https://imofang.taobao.com/p/jiaocheng37.htm" target="_blank" rel="noopener">戳这里</a></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>当然，我也不忘在<a href="http://www.rubik.com.cn/" target="_blank" rel="noopener" title="魔方小站">魔方小站</a>买个好一点的魔方(这不是做广告，嘿嘿)</p><p><img src="images/get-cube.jpg" alt="入手魔方" title="入手魔方"></p>]]></content>
      
      
      <categories>
          
          <category> cube </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECMAScript2015(6) RegExp</title>
      <link href="/2015/12/29/es6-regular-expressions/"/>
      <url>/2015/12/29/es6-regular-expressions/</url>
      
        <content type="html"><![CDATA[<p>ES6 对 RegExp 类做了扩展。</p><a id="more"></a><h2 id="RegExp-构造函数"><a href="#RegExp-构造函数" class="headerlink" title="RegExp 构造函数"></a>RegExp 构造函数</h2><p>es6 中 RegExp 构造函数允许使用第二个参数覆盖传入的正则表达式的 flags</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> re1 <span class="token operator">=</span> <span class="token regex">/ab/i</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// throws an error in ES5, okay in ES6</span>    re2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>re1<span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "/ab/i"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "/ab/g"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"AB"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"AB"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span></code></pre><h2 id="u-flag"><a href="#u-flag" class="headerlink" title="u flag"></a>u flag</h2><p>称作 <strong>unicode</strong> ，处理 <strong>unicode code points</strong> 序列模式</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token string">"𠮷"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/^.$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex">/^.$/u</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span></code></pre><h2 id="y-flag"><a href="#y-flag" class="headerlink" title="y flag"></a>y flag</h2><p>称作 <strong>sticky</strong> 。<strong>y</strong> 修饰符的作用与 <strong>g</strong> 修饰符类似，也是全局匹配，后一次匹配都从上一次匹配成功的下一个位置开始。不同之处在于，<strong>g</strong> 修饰符只要剩余位置中存在匹配就可，而 <strong>y</strong> 修饰符确保匹配必须从剩余的第一个位置开始</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token string">"hello1 hello2 hello3"</span><span class="token punctuation">,</span>    pattern <span class="token operator">=</span> <span class="token regex">/hello\d\s?/</span><span class="token punctuation">,</span>    result <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span>    globalPattern <span class="token operator">=</span> <span class="token regex">/hello\d\s?/g</span><span class="token punctuation">,</span>    globalResult <span class="token operator">=</span> globalPattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span>    stickyPattern <span class="token operator">=</span> <span class="token regex">/hello\d\s?/y</span><span class="token punctuation">,</span>    stickyResult <span class="token operator">=</span> stickyPattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// "hello1 "</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalResult<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// "hello1 "</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stickyResult<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// "hello1 "</span>pattern<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>globalPattern<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>stickyPattern<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>result <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>globalResult <span class="token operator">=</span> globalPattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>stickyResult <span class="token operator">=</span> stickyPattern<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// "hello1 "</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalResult<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// "hello2 "</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stickyResult<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Error! stickyResult is null</span></code></pre><h2 id="flags-属性"><a href="#flags-属性" class="headerlink" title="flags 属性"></a>flags 属性</h2><p>返回正则表达式中的 flags</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex">/ab/g</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "ab"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "g"</span></code></pre><h2 id="sticky-属性"><a href="#sticky-属性" class="headerlink" title="sticky 属性"></a>sticky 属性</h2><p>正则表达式中 flags 有 <strong>y</strong> 返回 true，否则返回 false</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex">/hello\d/y</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span>sticky<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><strong><a href="https://leanpub.com/understandinges6/read/#leanpub-auto-strings-and-regular-expressions" target="_blank" rel="noopener">https://leanpub.com/understandinges6/read/#leanpub-auto-strings-and-regular-expressions</a></strong></li><li><strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp</a></strong></li><li><strong><a href="http://es6.ruanyifeng.com/#docs/regex" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/regex</a></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECMAScript2015(6) Number</title>
      <link href="/2015/12/29/es6-number-extention/"/>
      <url>/2015/12/29/es6-number-extention/</url>
      
        <content type="html"><![CDATA[<p>ES6 扩展了 Number 类。</p><a id="more"></a><style>.super{vertical-align:super;font-size:.6em}</style><h2 id="二进制和八进制表示法"><a href="#二进制和八进制表示法" class="headerlink" title="二进制和八进制表示法"></a>二进制和八进制表示法</h2><pre class=" language-js"><code class="language-js"><span class="token number">0b1101111000</span> <span class="token operator">===</span> <span class="token number">888</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => true</span><span class="token number">0o1570</span> <span class="token operator">===</span> <span class="token number">888</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => true</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'0b1101111000'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => 888</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'0o1570'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => 888</span></code></pre><p>0b(0B) 表示二进制数, 0o(0O) 表示八进制数。二进制或八进制转十进制使用 <strong>Number()</strong></p><p><strong>Number</strong> 类的详细信息请 <strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number" target="_blank" rel="noopener">戳这里</a></strong></p><h2 id="Number-类新增方法"><a href="#Number-类新增方法" class="headerlink" title="Number 类新增方法"></a>Number 类新增方法</h2><h3 id="Number-isFinite"><a href="#Number-isFinite" class="headerlink" title="Number.isFinite()"></a>Number.isFinite()</h3><pre class=" language-js"><code class="language-js">Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">2e64</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false, 全局函数 isFinite('0') 会返回 true</span></code></pre><p><strong>Number.isFinite()</strong> 用于检测传入的参数是否是有穷数</p><p><strong>Number.isFinite()</strong> 的详细信息 <strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite" target="_blank" rel="noopener">戳这里</a></strong></p><h3 id="Number-isInteger"><a href="#Number-isInteger" class="headerlink" title="Number.isInteger()"></a>Number.isInteger()</h3><pre class=" language-js"><code class="language-js">Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// true</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// true</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// false</span></code></pre><p><strong>Number.isInteger()</strong> 方法用于检测参数是否是整数</p><p><strong>Number.isInteger()</strong> 的详细信息 <strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger" target="_blank" rel="noopener">戳这里</a></strong></p><h3 id="Number-isNaN"><a href="#Number-isNaN" class="headerlink" title="Number.isNaN()"></a>Number.isNaN()</h3><pre class=" language-js"><code class="language-js">Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// true</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// 下面这几个如果使用全局的 isNaN() 时，会返回 true。</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"NaN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// false，字符串 "NaN" 不会被隐式转换成数字 NaN。</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"blabla"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">// 下面的都返回 false</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"37"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">"37.37"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>Number.isNaN()</strong> 用于检测传入的值是否是 <strong>NaN</strong></p><p><strong>Number.isNaN()</strong> 与全局 <strong>isNaN()</strong> 的区别是 <strong>Number.isNan()</strong> 不会强制把参数转为数字</p><p><strong>Number.isNaN()</strong> 的详细信息 <strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN" target="_blank" rel="noopener">戳这里</a></strong></p><h3 id="Number-isSafeInteger"><a href="#Number-isSafeInteger" class="headerlink" title="Number.isSafeInteger()"></a>Number.isSafeInteger()</h3><pre class=" language-js"><code class="language-js">Number<span class="token punctuation">.</span><span class="token function">isSafeInteger</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// true</span>Number<span class="token punctuation">.</span><span class="token function">isSafeInteger</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isSafeInteger</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// true</span>Number<span class="token punctuation">.</span><span class="token function">isSafeInteger</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isSafeInteger</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isSafeInteger</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isSafeInteger</span><span class="token punctuation">(</span><span class="token number">3.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// false</span>Number<span class="token punctuation">.</span><span class="token function">isSafeInteger</span><span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// true</span></code></pre><p><strong>Number.isSafeInteger()</strong> 用于检测传入的值是否是 <strong>安全整数</strong> (处于 -(2<span class="super">53</span>-1) 和 2<span class="super">53</span>-1 之间的整数)</p><p><strong>Number.isSafeInteger()</strong> 的详细信息 <strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger" target="_blank" rel="noopener">戳这里</a></strong></p><h3 id="Number-parseFloat"><a href="#Number-parseFloat" class="headerlink" title="Number.parseFloat()"></a>Number.parseFloat()</h3><p><strong>Number.parseFloat()</strong> 方法可以把一个字符串解析成浮点数。该方法与全局的 parseFloat() 函数相同，并且处于 ECMAScript 6 规范中（用于全局变量的模块化）。</p><p><strong>Number.parseFloat()</strong> 的详细信息 <strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat" target="_blank" rel="noopener">戳这里</a></strong></p><h3 id="Number-parseInt"><a href="#Number-parseInt" class="headerlink" title="Number.parseInt()"></a>Number.parseInt()</h3><p><strong>Number.parseInt()</strong> 方法可以根据给定的进制数把一个字符串解析成整数。</p><p><strong>Number.parseInt()</strong> 的详细信息 <strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt" target="_blank" rel="noopener">戳这里</a></strong></p><h2 id="新增属性"><a href="#新增属性" class="headerlink" title="新增属性"></a>新增属性</h2><h3 id="Number-EPSILON"><a href="#Number-EPSILON" class="headerlink" title="Number.EPSILON"></a>Number.EPSILON</h3><pre class=" language-js"><code class="language-js">x <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">;</span>y <span class="token operator">=</span> <span class="token number">0.3</span><span class="token punctuation">;</span>z <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span>equal <span class="token operator">=</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> y <span class="token operator">+</span> z<span class="token punctuation">)</span> <span class="token operator">&lt;</span> Number<span class="token punctuation">.</span>EPSILON<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>Number.EPSILON</strong> 常量表示一个极小数, 可以用于表示浮点运算允许的误差范围。</p><p><strong>Number.EPSILON</strong> 的详细信息 <strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON" target="_blank" rel="noopener">戳这里</a></strong> 也可以 <strong><a href="http://es6.ruanyifeng.com/#docs/number#Number-EPSILON" target="_blank" rel="noopener">戳这里</a></strong></p><h3 id="Number-MAX-SAFE-INTEGER"><a href="#Number-MAX-SAFE-INTEGER" class="headerlink" title="Number.MAX_SAFE_INTEGER"></a>Number.MAX_SAFE_INTEGER</h3><pre class=" language-js"><code class="language-js">Number<span class="token punctuation">.</span>MAX_SAFE_INTEGER <span class="token comment" spellcheck="true">// 9007199254740991</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>     <span class="token comment" spellcheck="true">// 9007199254740991</span></code></pre><p><strong>Number.MAX_SAFE_INTEGER</strong> 常量表示 JS 中的最大安全整数 (2<span class="sup">53</span> - 1)</p><p><strong>Number.MAX_SAFE_INTEGER</strong> 的详细信息 <strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER" target="_blank" rel="noopener">戳这里</a></strong> 也可以 <strong><a href="http://es6.ruanyifeng.com/#docs/number#%E5%AE%89%E5%85%A8%E6%95%B4%E6%95%B0%E5%92%8CNumber-isSafeInteger" target="_blank" rel="noopener">戳这里</a></strong></p><h3 id="Number-MIN-SAFE-INTEGER"><a href="#Number-MIN-SAFE-INTEGER" class="headerlink" title="Number.MIN_SAFE_INTEGER"></a>Number.MIN_SAFE_INTEGER</h3><pre class=" language-js"><code class="language-js">Number<span class="token punctuation">.</span>MIN_SAFE_INTEGER <span class="token comment" spellcheck="true">// -9007199254740991</span><span class="token operator">-</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// -9007199254740991</span></code></pre><p><strong>Number.MIN_SAFE_INTEGER</strong> 常量表示 JS 中的最小安全整数 (-(2<span class="sup">53</span> - 1))</p><p><strong>Number.MIN_SAFE_INTEGER</strong> 的详细信息 <strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER" target="_blank" rel="noopener">戳这里</a></strong> 也可以 <strong><a href="http://es6.ruanyifeng.com/#docs/number#%E5%AE%89%E5%85%A8%E6%95%B4%E6%95%B0%E5%92%8CNumber-isSafeInteger" target="_blank" rel="noopener">戳这里</a></strong></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://es6.ruanyifeng.com/#docs/number" target="_blank" rel="noopener" title="es6入门 阮一峰">es6入门 阮一峰</a> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number" target="_blank" rel="noopener" title="MDN Number">MDN Number</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECMAScript2015(6) String</title>
      <link href="/2015/12/29/es6-string-extention/"/>
      <url>/2015/12/29/es6-string-extention/</url>
      
        <content type="html"><![CDATA[<p>ES6 对 String 类做了扩展</p><a id="more"></a><h2 id="新增静态方法"><a href="#新增静态方法" class="headerlink" title="新增静态方法"></a>新增静态方法</h2><h3 id="String-fromCodePoint"><a href="#String-fromCodePoint" class="headerlink" title="String.fromCodePoint()"></a>String.fromCodePoint()</h3><pre class=" language-js"><code class="language-js">String<span class="token punctuation">.</span><span class="token function">fromCodePoint</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// "*"</span>String<span class="token punctuation">.</span><span class="token function">fromCodePoint</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// "AZ"</span>String<span class="token punctuation">.</span><span class="token function">fromCodePoint</span><span class="token punctuation">(</span><span class="token number">0x404</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// "\u0404"</span>String<span class="token punctuation">.</span><span class="token function">fromCodePoint</span><span class="token punctuation">(</span><span class="token number">0x2F804</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "\uD87E\uDC04"</span>String<span class="token punctuation">.</span><span class="token function">fromCodePoint</span><span class="token punctuation">(</span><span class="token number">194564</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// "\uD87E\uDC04"</span>String<span class="token punctuation">.</span><span class="token function">fromCodePoint</span><span class="token punctuation">(</span><span class="token number">0x1D306</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x1D307</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "\uD834\uDF06a\uD834\uDF07"</span>String<span class="token punctuation">.</span><span class="token function">fromCodePoint</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// RangeError</span>String<span class="token punctuation">.</span><span class="token function">fromCodePoint</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// RangeError</span>String<span class="token punctuation">.</span><span class="token function">fromCodePoint</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// RangeError</span>String<span class="token punctuation">.</span><span class="token function">fromCodePoint</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// RangeError</span>String<span class="token punctuation">.</span><span class="token function">fromCodePoint</span><span class="token punctuation">(</span><span class="token number">3e-2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// RangeError</span>String<span class="token punctuation">.</span><span class="token function">fromCodePoint</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// RangeError</span><span class="token comment" spellcheck="true">// String.fromCharCode() alone cannot get the character at such a high code point</span><span class="token comment" spellcheck="true">// The following, on the other hand, can return a 4-byte character as well as the</span><span class="token comment" spellcheck="true">// usual 2-byte ones (i.e., it can return a single character which actually has</span><span class="token comment" spellcheck="true">// a string length of 2 instead of 1!)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCodePoint</span><span class="token punctuation">(</span><span class="token number">0x2F804</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// or 194564 in decimal</span></code></pre><p><strong>String.fromCodePoint()</strong> 按参数顺序返回代码点的字符串。如果参数不是有效的 <strong>Unicode</strong> 代码点则抛出 <strong>RangeError</strong></p><p>ES5 中 <strong>String.fromCharCode()</strong> 不能正确获取 32 位 (大于 0xFFFF ) 的 Unicode 代码点, ES6 中 <strong>String.fromCodePoint()</strong> 则可以</p><p>更多 <strong>String.fromCodePoint()</strong> 细节请 <strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint" target="_blank" rel="noopener">使劲点这里</a></strong></p><h2 id="新增原型方法"><a href="#新增原型方法" class="headerlink" title="新增原型方法"></a>新增原型方法</h2><h3 id="String-prototype-codePointAt"><a href="#String-prototype-codePointAt" class="headerlink" title="String.prototype.codePointAt()"></a>String.prototype.codePointAt()</h3><pre class=" language-js"><code class="language-js"><span class="token string">'ABC'</span><span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 66</span><span class="token string">'\uD800\uDC00'</span><span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 65536</span><span class="token string">'XYZ'</span><span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><p><strong>String.prototype.codePointAt()</strong> 方法返回字符串指定位置的代码点。如果指定的位置没有匹配的元素，返回 <strong>undefined</strong></p><p>ES5 中 <strong>String.prototype.charCodeAt()</strong> 不能正确返回 32 位 Unicode 字符的代码点，ES6 <strong>String.prototype.codePointAt()</strong> 可以</p><p>更多 <strong>String.prototype.codePointAt()</strong> 细节请 <strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt" target="_blank" rel="noopener">使劲点这里</a></strong></p><h3 id="String-prototype-startsWith"><a href="#String-prototype-startsWith" class="headerlink" title="String.prototype.startsWith()"></a>String.prototype.startsWith()</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"To be, or not to be, that is the question."</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"To be"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// true</span><span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"not to be"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// false</span><span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"not to be"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p><strong>String.prototype.startsWith()</strong> 方法用来判断当前字符串是否是以另外一个给定的子字符串“开头”的，根据判断结果返回 true 或 false</p><p>更多 <strong>String.prototype.startsWith()</strong> 细节请 <strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith" target="_blank" rel="noopener">使劲点这里</a></strong></p><h3 id="String-prototype-endsWith"><a href="#String-prototype-endsWith" class="headerlink" title="String.prototype.endsWith()"></a>String.prototype.endsWith()</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"To be, or not to be, that is the question."</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"question."</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span><span class="token function">alert</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"to be"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// false</span><span class="token function">alert</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"to be"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span><span class="token function">alert</span><span class="token punctuation">(</span> str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"To be"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// true</span></code></pre><p><strong>String.prototype.endsWith()</strong> 方法用来判断当前字符串是否是以另外一个给定的子字符串“结尾”的，根据判断结果返回 true 或 false</p><p>更多 <strong>String.prototype.endsWith()</strong> 细节请 <strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith" target="_blank" rel="noopener">使劲点这里</a></strong></p><h3 id="String-prototype-includes"><a href="#String-prototype-includes" class="headerlink" title="String.prototype.includes()"></a>String.prototype.includes()</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"To be, or not to be, that is the question."</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"To be"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"question"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"To be"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre><p><strong>String.prototype.includes()</strong> 方法判断一个字符串是否被包含在另一个字符串中, 如果是返回 true , 否则返回 false</p><p>更多 <strong>String.prototype.includes()</strong> 细节请 <strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes" target="_blank" rel="noopener">使劲点这里</a></strong></p><h3 id="String-prototype-normalize"><a href="#String-prototype-normalize" class="headerlink" title="String.prototype.normalize()"></a>String.prototype.normalize()</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Initial string</span><span class="token comment" spellcheck="true">// U+1E9B: LATIN SMALL LETTER LONG S WITH DOT ABOVE</span><span class="token comment" spellcheck="true">// U+0323: COMBINING DOT BELOW</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'\u1E9B\u0323'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Canonically-composed form (NFC)</span><span class="token comment" spellcheck="true">// U+1E9B: LATIN SMALL LETTER LONG S WITH DOT ABOVE</span><span class="token comment" spellcheck="true">// U+0323: COMBINING DOT BELOW</span>str<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token string">'NFC'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// '\u1E9B\u0323'</span>str<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// same as above</span><span class="token comment" spellcheck="true">// Canonically-decomposed form (NFD)</span><span class="token comment" spellcheck="true">// U+017F: LATIN SMALL LETTER LONG S</span><span class="token comment" spellcheck="true">// U+0323: COMBINING DOT BELOW</span><span class="token comment" spellcheck="true">// U+0307: COMBINING DOT ABOVE</span>str<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token string">'NFD'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// '\u017F\u0323\u0307'</span><span class="token comment" spellcheck="true">// Compatibly-composed (NFKC)</span><span class="token comment" spellcheck="true">// U+1E69: LATIN SMALL LETTER S WITH DOT BELOW AND DOT ABOVE</span>str<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token string">'NFKC'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// '\u1E69'</span><span class="token comment" spellcheck="true">// Compatibly-decomposed (NFKD)</span><span class="token comment" spellcheck="true">// U+0073: LATIN SMALL LETTER S</span><span class="token comment" spellcheck="true">// U+0323: COMBINING DOT BELOW</span><span class="token comment" spellcheck="true">// U+0307: COMBINING DOT ABOVE</span>str<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token string">'NFKD'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// '\u0073\u0323\u0307'</span></code></pre><p><strong>String.prototype.normalize()</strong> 方法会按照指定的一种 Unicode 正规形式将当前字符串正规化</p><p>参数形式如下：</p><ol><li><strong>NFC(default)</strong> - <em>Normalization Form Canonical Composition</em></li><li><strong>NFD</strong> - <em>Normalization Form Canonical Decomposition</em></li><li><strong>NFKC</strong> - <em>Normalization Form Compatibility Composition</em></li><li><strong>NFKD</strong> - <em>Normalization Form Compatibility Decomposition</em></li></ol><p>更多 <strong>String.prototype.normalize()</strong> 细节请 <strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize" target="_blank" rel="noopener">使劲点这里</a></strong> 或 <strong><a href="http://es6.ruanyifeng.com/#docs/string#normalize" target="_blank" rel="noopener">这里</a></strong></p><h3 id="String-prototype-repeat"><a href="#String-prototype-repeat" class="headerlink" title="String.prototype.repeat()"></a>String.prototype.repeat()</h3><pre class=" language-js"><code class="language-js"><span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// RangeError: repeat count must be positive and less than inifinity</span><span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// ""</span><span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// "abc"</span><span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// "abcabc"</span><span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// "abcabcabc" 参数count将会被自动转换成整数.</span><span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// RangeError: repeat count must be positive and less than inifinity</span><span class="token punctuation">(</span><span class="token punctuation">{</span>toString <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"abc"</span><span class="token punctuation">,</span> repeat <span class="token punctuation">:</span> String<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>repeat<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//"abcabc",repeat是一个通用方法,也就是它的调用者可以不是一个字符串对象.</span></code></pre><p><strong>String.prototype.repeat()</strong> 构造并返回一个重复当前字符串若干次数的新字符串</p><p>更多 <strong>String.prototype.repeat()</strong> 细节请 <strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat" target="_blank" rel="noopener">使劲点这里</a></strong></p><h3 id="String-prototype-iterator"><a href="#String-prototype-iterator" class="headerlink" title="String.prototype@@iterator"></a>String.prototype<a href="">@@iterator</a></h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'A\uD835\uDC68'</span><span class="token punctuation">;</span><span class="token keyword">var</span> strIter <span class="token operator">=</span> string<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strIter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "A"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strIter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "\uD835\uDC68"</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'A\uD835\uDC68B\uD835\uDC69C\uD835\uDC6A'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> v <span class="token keyword">of</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// "A"</span><span class="token comment" spellcheck="true">// "\uD835\uDC68"</span><span class="token comment" spellcheck="true">// "B"</span><span class="token comment" spellcheck="true">// "\uD835\uDC69"</span><span class="token comment" spellcheck="true">// "C"</span><span class="token comment" spellcheck="true">// "\uD835\uDC6A"</span></code></pre><p><strong>String.prototype<a href="">@@iterator</a></strong> 返回一个新的迭代器对象来遍历代码点上的字符串并返回每个代码点对应的字符串</p><p>更多 <strong>String.prototype<a href="">@@iterator</a></strong> 细节请 <strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/%40%40iterator">使劲点这里</a></strong></p><h3 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h3><ul><li><a href="http://es6.ruanyifeng.com/#docs/string" target="_blank" rel="noopener" title="ECMAScript 6 入门">ECMAScript 6 入门</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noopener" title="MDN String">MDN String</a><h1 id="Understanding-ECMAScript-6"><a href="#Understanding-ECMAScript-6" class="headerlink" title="Understanding ECMAScript 6"></a><a href="https://leanpub.com/understandinges6/read/#leanpub-auto-strings-and-regular-expressions" target="_blank" rel="noopener" title="Understanding ECMAScript 6">Understanding ECMAScript 6</a></h1></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECMAScript2015(6) Block Bindings</title>
      <link href="/2015/12/21/es6-block-bindings/"/>
      <url>/2015/12/21/es6-block-bindings/</url>
      
        <content type="html"><![CDATA[<p>众所周知，javascript 是没有块级作用域的概念的。很多刚学习 javascript 的小伙伴们常常为此而陷入困惑。不过好在 ES6 为 javascript 解决了这个问题。ES6 为 javascript 新增 2 种变量声明的方式 <strong>let</strong> 和 <strong>const</strong> 。</p><a id="more"></a><h2 id="var-声明和变量声明提升-Var-Declarations-and-Hoisting"><a href="#var-声明和变量声明提升-Var-Declarations-and-Hoisting" class="headerlink" title="var 声明和变量声明提升 (Var Declarations and Hoisting)"></a>var 声明和变量声明提升 (Var Declarations and Hoisting)</h2><p>让我们先来看一看传统 var 声明变量的运行机制，很多小伙伴曾经都被坑过((┬＿┬)我也是)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// other code</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// value exists here with a value of undefined</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// value exists here with a value of undefined</span><span class="token punctuation">}</span></code></pre><p>如果你对 javascript 不是很熟悉，你会认为只有当条件为 true 时 value 才被创建。事实上在 getValue 中变量 value 无论如何都会被创建，原因是 javascript 引擎会这样解析你的代码:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> value<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    value <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// other code</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>函数声明被移至作用域的顶部，这就意味着在 getValue 作用域中，value 都是可以访问的。只有当 condition 为 true 时，它才被初始化为 ‘blue’ 。而在 else 中访问 value 则为 undefined 。因为它还未初始化。</p><h2 id="块级声明-Block-Level-Declarations"><a href="#块级声明-Block-Level-Declarations" class="headerlink" title="块级声明 (Block-Level Declarations)"></a>块级声明 (Block-Level Declarations)</h2><p>块级声明是指在指定的块级作用域内声明的变量，该变量在作用域外部无法访问。块级作用域存在于:</p><ul><li>函数体内</li><li>代码块内(既 ‘<strong>{</strong>‘ 和 ‘<strong>}</strong>‘ 中)</li></ul><p>ES6 中加入了块级作用域，使得 javascript 与其他基于 C 的语言一样，变得更加灵活和规范。</p><h3 id="let-声明-Let-Declarations"><a href="#let-声明-Let-Declarations" class="headerlink" title="let 声明 (Let Declarations)"></a>let 声明 (Let Declarations)</h3><p>let 声明变量与 var 一样，唯一不同的是 let 声明的变量作用域是块级的。由于 let 不存在变量声明提升，我们一般将其放在代码块的顶端，确保在当前作用域中都可以访问到它。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// other code</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// value doesn't exist here</span>    <span class="token keyword">return</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// value doesn't exist here</span><span class="token punctuation">}</span></code></pre><p>这个版本的 getValue 非常接近其他基于 C 的语言。变量 value 使用 let 代替 var。这就表示变量声明不会被提升至函数顶部，变量 value 在 if 块内执行一次，出了 if 就销毁。如果条件为 false，则不会声明和初始化 value 。</p><h3 id="禁止重复声明-No-Redeclaration"><a href="#禁止重复声明-No-Redeclaration" class="headerlink" title="禁止重复声明 (No Redeclaration)"></a>禁止重复声明 (No Redeclaration)</h3><p>如果在当前作用域内已经声明了变量 a，我们在用 let 声明变量 a 则会抛出错误。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// syntax error</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span></code></pre><h3 id="const-声明-Constant-Declarations"><a href="#const-声明-Constant-Declarations" class="headerlink" title="const 声明 (Constant Declarations)"></a>const 声明 (Constant Declarations)</h3><p>ES6 中另一种声明变量的方式是使用 const 。const 声明的变量是常量，表示它们的值设置一次后不能被更改。因此，const 变量必须在声明的同时初始化，否则抛出异常</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Valid constant</span><span class="token keyword">const</span> maxItems <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Syntax error: missing initialization</span><span class="token keyword">const</span> name<span class="token punctuation">;</span></code></pre><h3 id="const，let-的共同点与不同点-Similarities-and-Differences-from-Let"><a href="#const，let-的共同点与不同点-Similarities-and-Differences-from-Let" class="headerlink" title="const，let 的共同点与不同点 (Similarities and Differences from Let)"></a>const，let 的共同点与不同点 (Similarities and Differences from Let)</h3><p>const 与 let 一样是块级声明，不会声明提升，执行跳出块时变量销毁。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> maxItems <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// more code</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// maxItems isn't accessible here</span></code></pre><p>maxItems 声明在 if 块中，if 执行完成，maxItems 则销毁。if 块外部无法访问变量 maxItems。</p><p>const 也禁止重复声明</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">"Hello!"</span><span class="token punctuation">;</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Each of these would throw an error given the previous declarations</span><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">"Goodbye!"</span><span class="token punctuation">;</span><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span></code></pre><p>如果是单独声明 2 个常量是有效的，由于前面声明过了同名变量，则这两个常量不能如期工作。</p><p>我们需要记住 const 与 let 最大的不同点，那就是无论在严格模式 (strict modes) 下和非严格模式 (non-strict modes) 下尝试给之前定义过的 const 变量赋值都将抛出错误。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> maxItems <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>maxItems <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// throws error</span></code></pre><p>与大多数其他语言一样，常量 maxItems 的不能改变。但是与其他语言的常量不同，ES6 中的常量的值是对象 (object) 时可以修改。</p><h3 id="声明-const-对象-Declaring-Objects-with-Const"><a href="#声明-const-对象-Declaring-Objects-with-Const" class="headerlink" title="声明 const 对象 (Declaring Objects with Const)"></a>声明 const 对象 (Declaring Objects with Const)</h3><p>const 声明阻止对变量值的修改和绑定引用的修改。也就是说 const 声明为对象，则不会阻止对该对象内容的修改。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'Nicholas'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// works</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Greg'</span><span class="token punctuation">;</span>person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'Greg'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这里 person 绑定了一个带有 name 属性的对象。我们可以正常修改 person.name，因为这是 person 对象内部属性的修改，并没有改变 person 绑定的对象。当我们尝试分配另一个对象给 person (尝试改变绑定的引用)，则会抛出错误。我们很容易对此造成误解。请记住：const 阻止绑定的修改，而不是绑定的值的修改。</p><h3 id="暂时性死区-The-Temporal-Dead-Zone"><a href="#暂时性死区-The-Temporal-Dead-Zone" class="headerlink" title="暂时性死区 (The Temporal Dead Zone)"></a>暂时性死区 (The Temporal Dead Zone)</h3><p>与 <strong>var</strong> 不同，<strong>let</strong> 和 <strong>const</strong> 没有变量提升特点。变量只有在声明之后才能访问。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//ReferenceError!</span>  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里我们使用 let 声明并初始化变量 value ，但是语句永远不会执行，因为前一行已经抛出错误。这个问题我们称之为暂时性死区 (TDZ)。TDZ 在 ES6 规范中没有明确命名，不过它是常常用于描述非变量提升声明 (<strong>let</strong> 和 <strong>const</strong>) 的行为的术语。</p><p>当 javascript 引擎解析到一个代码块并且发现变量声明，它会将声明提升 (<strong>var</strong>) 或者将声明放进 TDZ (<strong>let</strong>和<strong>const</strong>) 。任何尝试访问 TDZ 中的变量都会导致运行时错误。只有当变量声明执行完毕从 TDZ 中移除时，我们才可以安全的使用它。</p><p>不过在if块的外面不会抛出错误。</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'undefined'</span><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>typeof</strong> 操作的变量 <strong>value</strong> 是在非块级作用域中已经声明的。只是没有绑定值，所以 <strong>typeof</strong> 操作返回 ‘<strong>undefined</strong>‘ 。</p><p>TDZ 存在于块级作用域，也存在于循环中。</p><h2 id="循环中的块作用域-Block-Binding-in-Loops"><a href="#循环中的块作用域-Block-Binding-in-Loops" class="headerlink" title="循环中的块作用域 (Block Binding in Loops)"></a>循环中的块作用域 (Block Binding in Loops)</h2><p>javascript 中，我们常常会看到这样的循环代码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">process</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// i is still accessible here</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span></code></pre><p>由于 <strong>var</strong> 存在变量声明提升导致循环外部我们仍然可以访问变量 <strong>i</strong> ，这不是我们希望的，我们只希望计数器 <strong>i</strong> 只在循环内部可用。我们稍作修改</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">process</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// i is not accessible here - throws an error</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们使用 <strong>let</strong> 代替 <strong>var</strong> ，这样就形成了块级作用域，计数器 <strong>i</strong> 只有在循环块中可以访问。一旦循环结束变量就被销毁，外部不再可以访问。</p><h3 id="循环中的函数-Functions-in-Loops"><a href="#循环中的函数-Functions-in-Loops" class="headerlink" title="循环中的函数 (Functions in Loops)"></a>循环中的函数 (Functions in Loops)</h3><p>由于 <strong>var</strong> 存在变量声明提升，这会导致在循环中创建的函数无法得到预期结果。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  funcs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>funcs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// outputs the number '10' then times</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们希望的结果是输出 0-9，但是结果是输出 10 次 10 。这是因为当循环结束，<strong>i</strong> 的值已经为 10。</p><p>为了解决这个问题，开发者们使用立即调用函数表达式 (immediately-invoked function expressions)简称(IIFEs)。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  funcs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>funcs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// outputs 0, then 1, then2, up to 9</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们把变量 <strong>i</strong> 传给 IIFE，它会在创建一个新的 <strong>i</strong> 副本 <strong>value</strong> ，所以在其内部 <strong>value</strong> 的值就是循环计数器 0-9，然后运行结果就和我们预期的一样了。很幸运，现在有了块级作用域，就不用这么麻烦了。</p><h3 id="循环中的-let声明-Let-Declarations-in-Loops"><a href="#循环中的-let声明-Let-Declarations-in-Loops" class="headerlink" title="循环中的 let声明 (Let Declarations in Loops)"></a>循环中的 let声明 (Let Declarations in Loops)</h3><p>我们可以使用 <strong>let</strong> 简化之前的 IIEF</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  funcs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>funcs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// outputs 0, then 1, then 2, up to 9</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>for-in 循环和 for-of 循环中同样适用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  object <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  funcs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>funcs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// outputs 'a', then 'b', then 'c'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>有一点很重要的需要明白，循环中的 <strong>let</strong> 声明是 ES6 规范中特殊定义的行为与 <strong>let</strong> 的非变量提升特点没有必然的关系。事实上，早期实现的 <strong>let</strong> 没有这个行为，它是后期才被添加进来的。</p><h3 id="循环中的常量声明-Constant-Declarations-in-Loops"><a href="#循环中的常量声明-Constant-Declarations-in-Loops" class="headerlink" title="循环中的常量声明 (Constant Declarations in Loops)"></a>循环中的常量声明 (Constant Declarations in Loops)</h3><p>ES6 规范没有明确不允许在循环中使用 <strong>const</strong> 声明。但是它的行为有点不同。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// throws an error after one iteration</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  funcs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们使用 <strong>const</strong> 声明变量 <strong>i</strong> 。第一次迭代运行正常。然而当 <strong>i++</strong> 执行抛出错误，因为试图改变 <strong>i</strong> 的值。因此我们只能在循环初始化时使用 <strong>const</strong> 声明变量，并且不能修改变量的值。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  object <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// doesn't cause an error</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  funcs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ley<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>funcs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// outputs 'a', then 'b', then 'c'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>for-in 循环和 for-of 循环中可以使用 <strong>const</strong> 正常工作，这是因为每次循环初始化都会创建一个新的绑定，而不是修改值的绑定 (for 循环也是一样的道理)。</p><h2 id="全局块作用域-Global-Block-Bindings"><a href="#全局块作用域-Global-Block-Bindings" class="headerlink" title="全局块作用域 (Global Block Bindings)"></a>全局块作用域 (Global Block Bindings)</h2><p>在全局作用域中使用 <strong>let</strong> 或 <strong>const</strong> 是不常见的。如果这么做了，我们需要了解潜在的命名冲突，因为全局对象有预定义的属性。大多数 javascript 环境，全局变量都被分配为全局对象的属性，全局对象的属性是透明访问的非限制标识符(如 name 或 location)。使用块级声明定义变量与全局属性共享一个名称可能会引发错误，因为全局对象属性可能是不可配置的 (nonconfigurable) 。由于块级作用域不允许在同一作用域重定义同一个标识符，所以不可能 shadow 不可配置的全局属性。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> RegExp <span class="token operator">=</span> <span class="token string">'Hello!'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ok</span><span class="token keyword">let</span> undefined <span class="token operator">=</span> <span class="token string">'Hello!'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// throws error</span></code></pre><p>第一行重定义了全局 <strong>RegExp</strong> 为字符串。尽管这是有问题的，不过没有发生错误。第二行抛出错误，因为 <strong>undefined</strong> 是一个不可配置的全局私有属性。由于它的定义在环境中被锁定，所以 <strong>let</strong> 声明是非法的。</p><h2 id="块作用域最佳实践-Emerging-Best-Practices-for-Block-Bindings"><a href="#块作用域最佳实践-Emerging-Best-Practices-for-Block-Bindings" class="headerlink" title="块作用域最佳实践 (Emerging Best Practices for Block Bindings)"></a>块作用域最佳实践 (Emerging Best Practices for Block Bindings)</h2><p>默认使用 <strong>const</strong> 声明变量，当我们知道变量需要修改时使用 <strong>let</strong> 。因为大多数变量在初始化后不应该改变它们的值，意外改变变量值是导致 bugs 产生的根源。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://leanpub.com/understandinges6/read/#leanpub-auto-block-bindings" target="_blank" rel="noopener" title="https://leanpub.com/understandinges6/read/#leanpub-auto-block-bindings">understandinges6</a></li><li><a href="http://es6.ruanyifeng.com/#docs/let" target="_blank" rel="noopener" title="ECMAScript6入门">ECMAScript6入门</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let" target="_blank" rel="noopener" title="MDN">MDN</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/2015/11/24/js-pattern-factory/"/>
      <url>/2015/11/24/js-pattern-factory/</url>
      
        <content type="html"><![CDATA[<p>一个类或对象中往往会包含别的对象。在创建这种成员对象时，你可能习惯于使用常规方式，也即用 new 关键字和类构造函数。问题在于这会导致相关的两个类之间产生依赖性。我们讲述一种有助于消除这两个类之间的依赖性的模式，它使用一个方法来决定究竟要实例化那个具体的类。我们既要讨论简单工厂模式，也要讨论更复杂的工厂模式。前者另外使用一个类(通常是一个单体)来生成实例，而后者则使用子类来决定一个成员变量应该是哪个具体的类的实例。</p><a id="more"></a><h2 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h2><p>最好用一个例子来说明简单工厂模式的概念。假设你想开几个自行车商店，每个店都有几种型号的自行车出售。这可以用一个类来表示：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*自行车商店类*/</span><span class="token keyword">var</span> BicycleShop <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>BicycleShop<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  sellBicycle<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> bicycle<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>model<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">'The Speedster'</span><span class="token punctuation">:</span>        bicycle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Speedster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'The Lowrider'</span><span class="token punctuation">:</span>        bicycle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lowrider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'The Comfort Cruiser'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        bicycle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComforCruiser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Interface<span class="token punctuation">.</span><span class="token function">ensuerImplements</span><span class="token punctuation">(</span>bicycle<span class="token punctuation">,</span> Bicycle<span class="token punctuation">)</span><span class="token punctuation">;</span>    bicycle<span class="token punctuation">.</span><span class="token function">assemble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bicycle<span class="token punctuation">.</span><span class="token function">wash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bicycle<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>sellBicycle 方法根据所要求的自行车型号用 switch 语句创建一个自行车的实例。各种型号的自行车实例可以互换使用，因为它们都实现了 Bicycle 接口：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*自行车接口*/</span><span class="token keyword">var</span> Bicycle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Interface</span><span class="token punctuation">(</span><span class="token string">'Bicycle'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'assemble'</span><span class="token punctuation">,</span> <span class="token string">'wash'</span><span class="token punctuation">,</span> <span class="token string">'ride'</span><span class="token punctuation">,</span> <span class="token string">'repair'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*高速自行车接口*/</span><span class="token keyword">var</span> Speedster <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Speedster<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  assemble<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  wash<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  ride<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  repair<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>要出售某种型号的自行车，只要调用 sellBicycle 方法即可：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> californiaCruisers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BicycleShop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> yourNewBike <span class="token operator">=</span> californiaCruisers<span class="token punctuation">.</span><span class="token function">sellBicycle</span><span class="token punctuation">(</span><span class="token string">'The Speedster'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在情况发生变化之前，这倒也挺管用。但要是你想在供货目录中加入一款新车型又会怎么样呢？你得为此修改 BicycleShop 的代码，哪怕这个类的实际功能实际上并没有发生改变–依旧是创建一个自行车的新实例，组装它，清洗它，然后把它交给顾客。更好的解决办法是把 sellBicycle 方法中”创建实例”这部分工作转交给一个简单工厂对象：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*自行车工厂*/</span><span class="token keyword">var</span> BicycleFactory <span class="token operator">=</span> <span class="token punctuation">{</span>  createBicycle<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> bicycle<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>model<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">'The Speedster'</span><span class="token punctuation">:</span>        bicycle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Speedster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'The Lowrider'</span><span class="token punctuation">:</span>        bicycle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lowrider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'The Comfort Cruiser'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        bicycle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComforCruiser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Interface<span class="token punctuation">.</span><span class="token function">ensuerImplements</span><span class="token punctuation">(</span>bicycle<span class="token punctuation">,</span> Bicycle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bicycle<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>BicycleFactory 是一个单体，用来把 createBicycle 方法封装在一个命名空间中。这个方法返回一个实现了 Bicycle 接口的对象，然后你可以照常对其进行组装和清洗:</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*自行车商店类, 改进版*/</span><span class="token keyword">var</span> BicycleShop <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  BicycleShop<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>    sellBicycle<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>model<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> bicycle <span class="token operator">=</span> BicycleFactory<span class="token punctuation">.</span><span class="token function">createBicycle</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>      bicycle<span class="token punctuation">.</span><span class="token function">assemble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bicycle<span class="token punctuation">.</span><span class="token function">wash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> bicycle<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个 BicycleFactory 对象可以供各种类来创建新的自行车实例。有关可供车型的所有信息都集中在一个地方管理，所以添加更多车型很容易:</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*自行车工厂，添加更多车型*/</span><span class="token keyword">var</span> BicycleFactory <span class="token operator">=</span> <span class="token punctuation">{</span>  createBicycle<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> bicycle<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>model<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">'The Speedster'</span><span class="token punctuation">:</span>        bicycle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Speedster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'The Lowrider'</span><span class="token punctuation">:</span>        bicycle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lowrider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'The Flatlander'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token string">'The Comfort Cruiser'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        bicycle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComforCruiser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Interface<span class="token punctuation">.</span><span class="token function">ensuerImplements</span><span class="token punctuation">(</span>bicycle<span class="token punctuation">,</span> Bicycle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bicycle<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>BicycleFactory 就是简单工厂的一个很好的例子。这种模式把成员对象的创建工作转交给一个外部对象。这个外部对象可以像本例中一样是一个简单的命名空间，也可以是一个类的实例。如果负责创建实例的方法的逻辑不会发生变化，那么一般说来用单体或静态类方法创建这些成员实例是合乎情理的。但如果你要提供几种不同品牌的自行车，那么更恰当的做法是把这个创建方法实现在一个类中，并从该类派生出一些子类。</p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>真正的工厂模式与简单工厂模式的区别在于，他不是另外使用一个类或对象来创建自行车(就像前面的例子中所做的那样)，而是使用一个子类。按照正式定义，工厂是一个将其成员对象的实例化推迟到子类中进行的类。我们还是以 BicycleShop 为例来说明简单工厂和工厂模式之间的差别。</p><p>我们打算让各个自行车商店自行决定从哪个生产厂家进货。出于这个原因，单单一个 BicycleFactory 对象将无法提供需要的所有自行车实例。我们可以把 BicycleShop 设计为抽象类，让子类根据各自的进货渠道实现其 createBicycle 方法:</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* BicycleShop Class (abstract) */</span><span class="token keyword">var</span> BicycleShop <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>BicycleShop<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  sellBicycle<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> bicycle <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createBicycle</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>    bicycle<span class="token punctuation">.</span><span class="token function">assemble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bicycle<span class="token punctuation">.</span><span class="token function">wash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bicycle<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  createBicycle<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Unsupported operation on an abstract class.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这个类中定义了 createBicycle 方法，但真要调用这个方法的话，会抛出一个错误。现在 BicycleShop 是一个抽象类，它不能被实例化，只能用来派生子类。设计一个经销特定自行车生产厂家产品的子类需要扩展 BicycleShop，重定义其中的 createBicycle。下面是两个子类的例子，其中一个子类代表的商店从 Acme 公司进货，而另一个则从 General Products 公司进货:</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* AcmeBicycleShop class */</span><span class="token keyword">var</span> AcmeBicycleShop <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">extend</span><span class="token punctuation">(</span>AcmeBicycleShop<span class="token punctuation">,</span> BicycleShop<span class="token punctuation">)</span><span class="token punctuation">;</span>AcmeBicycleShop<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>createBicycle <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>model<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> bicycle<span class="token punctuation">;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'The Speedster'</span><span class="token punctuation">:</span>      bicycle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AcmeSpeedster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'The lowrider'</span><span class="token punctuation">;</span>      bicycle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AcmeLowrider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'The Flatlander'</span><span class="token punctuation">:</span>      bicycle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AcmeFlatlander</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'The Comfort Cruiser'</span><span class="token punctuation">:</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      bicycle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AcmeComfortCrusier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Interface<span class="token punctuation">.</span><span class="token function">ensureImplements</span><span class="token punctuation">(</span>bicycle<span class="token punctuation">,</span> Bicycle<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> bicycle<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* GeneralProductsBicycleShop class */</span><span class="token keyword">var</span> GeneralProductsBicycleShop <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">extend</span><span class="token punctuation">(</span>GeneralProductsBicycleShop<span class="token punctuation">,</span> BicycleShop<span class="token punctuation">)</span><span class="token punctuation">;</span>GeneralProductsBicycleShop<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>createBicycle <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>model<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> bicycle<span class="token punctuation">;</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'The Speedster'</span><span class="token punctuation">:</span>      bicycle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GeneralProductsSpeedster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'The Lowrider'</span><span class="token punctuation">:</span>      bicycle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GeneralProductsLowrider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'The Flatlander'</span><span class="token punctuation">:</span>      bicycle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GeneralProductsFlatlander</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'The Comfort Cruiser'</span><span class="token punctuation">:</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      bicycle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GeneralProductsComfortCruiser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Interface<span class="token punctuation">.</span><span class="token function">ensureImplements</span><span class="token punctuation">(</span>bicycle<span class="token punctuation">,</span> Bicycle<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> bicycle<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这些工厂方法生成的对象都实现了 Bicycle 接口，所以在其他代码眼里它们完全可以互换。自行车的销售工作还是与以前一样，只是现在所开的商店可以是 Acme 或 General Products 自行车专卖店:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> alecsCruisers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AcmeBicycleShop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> yourNewBike <span class="token operator">=</span> alecsCruisers<span class="token punctuation">.</span><span class="token function">sellBicycle</span><span class="token punctuation">(</span><span class="token string">'The Lowrider'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> bobsCruisers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GeneralProductsBicycleShop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> yourSecondNewBike <span class="token operator">=</span> bobsCruisers<span class="token punctuation">.</span><span class="token function">sellBicycle</span><span class="token punctuation">(</span><span class="token string">'The Lowrider'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>因为两个生产厂家生产的自行车款式完全相同，所以顾客买车时可以不用关心车究竟是哪家生产的。要是他们只想要 Acme 生产的自行车，他们可以去 Acme 专卖店买。</p><p>增加对其他生产厂家的支持很简单，只要再创建一个 BicycleShop 的子类并重定义其 createBicycle 工厂方法即可。我们也可以对各个子类进行修改，以支持相关厂家其他型号的产品。这是工厂模式最重要的特点。对 Bicycle 进行一般性操作的代码可以全部写在父类 BicycleShop 中，而对具体的 Bicycle 对象进行实例化的工作则被留到子类中。一般性的代码被集中在一个位置，而个体性的代码则被封装在子类中。</p><p>##工厂模式的适用场合</p><p>创建新对象最简单的办法是使用 new 关键字和具体类。只有在某些场合下，创建和维护对象工厂所带来的额外复杂性才是物有所值的。</p><h3 id="动态实现"><a href="#动态实现" class="headerlink" title="动态实现"></a>动态实现</h3><p>如果需要像前面自行车的例子一样，创建一些用不同方式实现同一接口的对象，那么可以使用一个工厂方法或简单工厂对象来简化选择实现的过程。这种选择可以是明确进行的也可以是隐含的。前者如自行车那个例子，顾客可以选择需要的自行车型号;之后的 XHR 工厂的例子属于后者，该例中所返回的连接对象的类型取决于所探查到的带宽和网络延时等因素。在这些场合下，你通常要与一系列实现了同一个接口、可以被同等对待的类打交道。这是 JavaScript 中使用工厂模式的最常见的原因。</p><h3 id="节省设置开销"><a href="#节省设置开销" class="headerlink" title="节省设置开销"></a>节省设置开销</h3><p>如果对象需要进行复杂并且彼此相关的设置，那么使用工厂模式可以减少每种对象所需的代码量。如果这种设置只需要为特定类型的所有实例执行一次即可，这种作用尤其突出。把这种设置代码放到类的构造函数中并不是一种高效的做法，这是因为即便设置工作已经完成，每次创建新实例的时候这些代码还是会执行，而且这样做会把设置代码分散到不同的类中。工厂方法非常适合于这种场合。它可以在实例化所有需要的对象的对象之前先一次性地进行设置。无论有多少不同的类会被实例化，这种办法都可以让设置代码集中在一个地方。</p><p>如果所用的类要求加载外部库的话，这尤其有用。工厂方法可以对这些库进行检查并动态加载那些未找到的库。这些设置代码只存在于一个地方，因此以后改起来也方便得多。</p><h3 id="用许多小型对象组成一个大对象"><a href="#用许多小型对象组成一个大对象" class="headerlink" title="用许多小型对象组成一个大对象"></a>用许多小型对象组成一个大对象</h3><p>工厂方法可以用来创建封装了许多较小对象的对象。考虑一下自行车对象的构造函数。自行车包含着许多更小的子系统：车轮、车架、传动部件以及车闸等。如果你不想让某个子系统与较大的那个对象之间形成强耦合，而是想在运行时从许多子系统中进行挑选的话，那么工厂方法是一个理想的选择。使用这种技术，某天你可以为售出的所有自行车配上某种链条，要是第二天找到另一种更中意的链条，可以改而采用这个新品种。实现这种改变很容易，因为这些自行车类的构造函数并不依赖于某种特定的链条品种。</p><h2 id="示例：XHR-工厂"><a href="#示例：XHR-工厂" class="headerlink" title="示例：XHR 工厂"></a>示例：XHR 工厂</h2><p>用 Ajax 技术发起异步请求是现在 Web 开发中的一个常见任务。用于发起请求的对象是某种类的实例，具体是哪种类取决于用户的浏览器。如果代码中需要多次执行 Ajax 请求，那么明知的做法是把创建这种对象的代码提取到一个类中，并创建一个包装器来包装在实际发起请求时所要经历的一系列步骤。简单工厂非常适合这种场合，它可以用来根据浏览器能力的不同生成一个 XMLHttpRequest 或 ActiveXObject 实例。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* AjaxHandler interface */</span><span class="token keyword">var</span> AjaxHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Interface</span><span class="token punctuation">(</span><span class="token string">'AjaxHandler'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token string">'createXhrObject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* SimpleHandler class */</span><span class="token keyword">var</span> SimpleHandler <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// implements AjaxHandler</span>SimpleHandler<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  request<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> postVars<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createXhrObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">?</span> callback<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">,</span> xhr<span class="token punctuation">.</span>responseXML<span class="token punctuation">)</span> <span class="token punctuation">:</span>        callback<span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">!==</span> <span class="token string">'POST'</span><span class="token punctuation">)</span> postVars <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>postVars<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// Factory method</span>  createXhrObject<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">'Msxml2.XMLHTTP'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">'Microsoft.XMLHTTP'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> methods<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        methods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// if we reach this point, method[i] worked.</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>createXhrObject <span class="token operator">=</span> methods<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//Memoize the method</span>      <span class="token keyword">return</span> methods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// if we reach this point, none of the methods worked</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'SimpleHandler: Could not create an XHR object.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>request 这个便利函数负责执行发出请求和处理响应结果所需要的一系列操作。它先创建一个 XHR 对象并对其进行配置，然后再发送请求。这里所关注的是用于创建 XHR 对象的代码。</p><p>createXhrObject 这个工厂方法根据当前环境的具体情况返回一个 XHR 对象。在首次执行时，它会依次尝试三种用于创建 XHR 对象的不同方法，一旦遇到一种管用的，它就会返回所创建的对象并将自身改为用以创建那个对象的函数。这个新函数于是摇身一变成了 createXhrObject 方法。这种技术被称为 memoizing，它可以用来创建存储着复杂计算的函数和方法，以免再次进行这种计算。所有那些复杂的设置代码只会在方法首次执行时被调用一次，此后就只有针对当前浏览器的代码会被执行。假如前面的代码运行在一个实现了 XMLHttpRequest 类的浏览器中，那么第二次执行时的 createXhrObject 方法实际上是这个样子：</p><pre class=" language-js"><code class="language-js">createXhrObject<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>memoizing 技术可以提高代码的效率，因为所有设置和检测代码都只会执行一次。工厂方法是这种代码的理想封装工具，不管代码运行在什么平台上，它都能返回正确的对象。这一任务涉及的复杂性由此被集中在一个地方。</p><p>用 SimpleHandler 类发起异步请求的过程很简单，只要创建该类的一个实例，调用它的 request 方法即可：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> myHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> callback <span class="token operator">=</span> <span class="token punctuation">{</span>  success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>responseText<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Success: '</span> <span class="token operator">+</span> responseText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  failure<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>statusCode<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Failure: '</span> <span class="token operator">+</span> statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>myHandler<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'script.php'</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="专用型连接对象"><a href="#专用型连接对象" class="headerlink" title="专用型连接对象"></a>专用型连接对象</h3><p>这个例子可以进一步扩展，把工厂模式用在两个地方，以便根据网络条件创建专门的请求对象。在创建 XHR 对象时已经用过了简单工厂模式。另一个工厂则用来返回各种处理器类，它们都派生自 SimpleHandler。</p><p>首先要做的是创建两个新的处理器类。QueueHandler 会在发起新的请求之前先确保所有请求都已经成功处理。而 OfflineHandler 则会在用户处于离线状态时把请求缓存起来。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* QueuedHandler class */</span><span class="token comment" spellcheck="true">// implements AjaxHandler</span><span class="token keyword">var</span> QueueHandler <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>requestInProgress <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>retryDelay <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// In seconds.</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">extend</span><span class="token punctuation">(</span>QueueHandler<span class="token punctuation">,</span> SimpleHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>QueueHandler<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>request <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> postVars<span class="token punctuation">,</span> override<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>requestInProgress <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>override<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      method<span class="token punctuation">:</span> method<span class="token punctuation">,</span>      url<span class="token punctuation">:</span> url<span class="token punctuation">,</span>      callback<span class="token punctuation">:</span> callback<span class="token punctuation">,</span>      postVars<span class="token punctuation">:</span> postVars    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>requestInProgress <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createXhrObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        callback<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">,</span> xhr<span class="token punctuation">.</span>responseXML<span class="token punctuation">)</span><span class="token punctuation">;</span>        that<span class="token punctuation">.</span><span class="token function">advanceQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        callback<span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          that<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> postVars<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> that<span class="token punctuation">.</span>retryDelay <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">!==</span> <span class="token string">'POST'</span><span class="token punctuation">)</span> postVars <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>postVars<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>QueueHandler<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>advanceQueue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>requestInProgress <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> req <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>method<span class="token punctuation">,</span> req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> req<span class="token punctuation">.</span>callback<span class="token punctuation">,</span> req<span class="token punctuation">.</span>postVars<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>QueueHandler 的 request 方法与 SimpleHandler 的看上去差不多，但在允许发起新请求之前它会先检查一下，以确保当前没有别的请求正在处理。如果有哪个请求未能成功处理，那么它还会在指定的时间间隔之后再次重复这个请求，直到该请求被成功处理为止。</p><p>OfflineHandler 要简单一点：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* OfflineHandler class. */</span><span class="token comment" spellcheck="true">// implements AjaxHandler</span><span class="token keyword">var</span> OfflineHandler <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>storedRequests <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">extend</span><span class="token punctuation">(</span>OfflineHandler<span class="token punctuation">,</span> SimpleHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>OfflineHandler<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>request <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> postVars<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>XhrManager<span class="token punctuation">.</span><span class="token function">isOffline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Store the requests until we are online.</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>storedRequests<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      method<span class="token punctuation">:</span> method<span class="token punctuation">,</span>      url<span class="token punctuation">:</span> url<span class="token punctuation">,</span>      callback<span class="token punctuation">:</span> callback<span class="token punctuation">,</span>      postVars<span class="token punctuation">:</span> postVars    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Call SimpleHandler's request method if we are online.</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">flushStoredRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OfflineHandler<span class="token punctuation">.</span>superclass<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> postVars<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>OfflineHandler<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>flushStoredRequest <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storedRequest<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> req <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storedRequests<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  OfflineHandler<span class="token punctuation">.</span>superclass<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>method<span class="token punctuation">,</span> req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> req<span class="token punctuation">.</span>callback<span class="token punctuation">,</span> req<span class="token punctuation">.</span>postVars<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>XhrManager.isOffline 方法(稍后会详细介绍)的作用在于判断用户是否处于在线状态。OfflineHandler 只有在用户处于在线状态时才会使用 SimpleHandler 的 request 方法实际发起请求。而且一旦探测到用户处于在线状态，它还会立即执行所有缓存中的请求。</p><h3 id="在运行时选择连接对象"><a href="#在运行时选择连接对象" class="headerlink" title="在运行时选择连接对象"></a>在运行时选择连接对象</h3><p>现在该用到工厂模式了。因为程序员根本不可能知道各个最终用户实际面临的网络条件，所以不可能要求他们在开发过程中选择使用哪个处理类，而是应该用一个工厂在运行时选择最合适的类。程序员只需要调用这个工厂方法并使用其返回的对象即可。因为所有这些处理器类都实现了 AjaxHandler 接口，所以它们可以被同等对待。接口是相同的，区别只在于其实现：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* XhrManager singleton. */</span><span class="token keyword">var</span> XhrManager <span class="token operator">=</span> <span class="token punctuation">{</span>  createXhrHandler<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> xhr<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isOffline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OfflineHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isHighLatency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueuedHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Interface<span class="token punctuation">.</span><span class="token function">ensureImplements</span><span class="token punctuation">(</span>xhr<span class="token punctuation">,</span> AjaxHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> xhr<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  isOffline<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Do a quick request with SimpleHandler and see if it succeeds.</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  isHighLatency<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Do a series of requests with SimpleHandler and time the responses.Best done once, as a branching function.</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>现在程序员就可以使用这个工厂方法，而不必实例化一个特性的类了：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> myHandler <span class="token operator">=</span> XhrManager<span class="token punctuation">.</span><span class="token function">createXhrHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> callback <span class="token operator">=</span> <span class="token punctuation">{</span>  success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>responseText<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Success: '</span> <span class="token operator">+</span> responseText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  failure<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>statusCode<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Failure: '</span> <span class="token operator">+</span> statusCode<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>myHandler<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'script.php'</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>createXhrHandler 方法返回的各种对象都具有我们所需要的一些方法。而且，因为它们都派生自 SimpleHandler，所以 createXhrObject这个复杂的方法只需要在这个类中实现一次即可，那些子类可以使用这个方法。OfflineHandler 中还有多出使用了 SimpleHandler的 request，这进一步实现了代码的重用。</p><p>这里省略了 isOffline 和 isHighLatency 方法的实现细节。在实际实现这些方法的时候，需要先编写一个方法，它会用 setTimeout 安排执行一些异步请求，并记录它们的往返时间。只要这些请求中的任何一个得到回应，isOffline 方法就会返回 false，否则它会返回 true。而 isHighLatency 方法会检查请求得到回应所经历的时间，并根据其长短来决定该返回 true 还是 false。这些方法的具体实现都是些细枝末节，这里不在赘述。</p><h2 id="示例：RSS-阅读器"><a href="#示例：RSS-阅读器" class="headerlink" title="示例：RSS 阅读器"></a>示例：RSS 阅读器</h2><p>下面要设计的是一个用来在网页上显示来自 RSS 源的最新信息的小工具。我们打算重用一些现有模块，比如前面例子中的 XHR 处理器，而不是从头做起。最终得到的是一个 RSS 阅读器对象，它的成员对象包括一个 XHR 处理器对象、一个显示对象以及一个配置对象。</p><p>由于我们只想跟 RSS 容器对象打交道，所以用一个工厂来实例化这些内部对象并把他们组装到一个 RSS 阅读器对象中。使用工厂方法的好处在于，我们创建的 RSS 阅读器类不会与那些成员对象紧密耦合在一起。我们可以使用任何一个显示模块，只要它实现了必要的方法就行，因此大可不必让阅读器类套牢在某个特定的显示类上。</p><p>有了这个工厂方法，只要愿意，我们可以随时换掉任何一个模块，不管是在开发期间还是在运行期间。使用这个 API 的程序员得到的还是一个完整的 RSS 阅读器对象，其中所有的成员对象都已经实例化并配置完毕，但其中涉及的类之间的耦合都比较松散，因此可以随意更换。</p><p>先来看看要在工厂方法中进行实例化的那些类。XHR 处理器类你已经见过了。本例使用 XhrManager.createXhrHandler 方法创建所用的处理器对象。下一个类是显示类。为了满足 RSS 阅读器类的需要，它需要实现几个方法。下面是一个实现了那些方法的显示类，它把输出内容包装为一个序列表：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* 显示模块接口 */</span><span class="token keyword">var</span> DisplayModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Interface</span><span class="token punctuation">(</span><span class="token string">'DisplayModule'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'append'</span><span class="token punctuation">,</span> <span class="token string">'remove'</span><span class="token punctuation">,</span> <span class="token string">'clear'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 列表展示类 */</span><span class="token keyword">var</span> ListDisplay <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>  parent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ListDisplay<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  append<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ver newEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newEl<span class="token punctuation">)</span><span class="token punctuation">;</span>    newEl<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> text<span class="token punctuation">;</span>    <span class="token keyword">return</span> newEl<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  remove<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  clear<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>下一个要用到的是配置对象。这只是一个对象字面量，它包含着一些供阅读器类及其成员对象使用的设置：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* 配置对象 */</span><span class="token keyword">var</span> conf <span class="token operator">=</span> <span class="token punctuation">{</span>  id<span class="token punctuation">:</span> <span class="token string">'cnn-top-stories'</span><span class="token punctuation">,</span>  feedUrl<span class="token punctuation">:</span> <span class="token string">'http://rss.cnn.com/rss/cnn_topstories.rss'</span><span class="token punctuation">,</span>  updateInterval<span class="token punctuation">:</span> <span class="token number">60</span><span class="token punctuation">,</span>  parent<span class="token punctuation">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'feed-readers'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这些类都由一个名为 FeedReader 的类组合使用。它用 XHR 处理器从 RSS 源获取 XML 格式的数据并用一个内部方法对其进行解析，然后用显示模块将解析出来的信息输出到网页上：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* FeedReader 类 */</span><span class="token keyword">var</span> FeedReader <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>display<span class="token punctuation">,</span> xhrHandler<span class="token punctuation">,</span> conf<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>display <span class="token operator">=</span> display<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>xhrHandler <span class="token operator">=</span> xhrHandler<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>conf <span class="token operator">=</span> conf<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">startUpdates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>FeedReader<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  fetchFeed<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> callback <span class="token operator">=</span> <span class="token punctuation">{</span>      success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>text<span class="token punctuation">,</span> xml<span class="token punctuation">)</span> <span class="token punctuation">{</span>        that<span class="token punctuation">.</span><span class="token function">parseFeed</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> xml<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      failure<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        that<span class="token punctuation">.</span><span class="token function">showError</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>xhrHandler<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'feedProxy.php?feed='</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>conf<span class="token punctuation">.</span>feedUrl<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  parseFeed<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>responseText<span class="token punctuation">,</span> responseXML<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>display<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> items <span class="token operator">=</span> responseXML<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'item'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> title <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> link <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'link'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>display<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;a href="'</span> <span class="token operator">+</span> link<span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">'">'</span> <span class="token operator">+</span> title<span class="token punctuation">.</span>firstChild<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">'&lt;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  showError<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>statusCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>display<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>display<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'Error fetching feed.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  stopUpdates<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  startUpdates<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchFeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>interval <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      that<span class="token punctuation">.</span><span class="token function">fetchFeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>conf<span class="token punctuation">.</span>updateInterval <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>XHR 请求中使用的 feedProxy.php 脚本是一个代理。可以用它从外部域获取数据，以应对 JavaScript 的同源限制机制。那种允许从任何 URL 获取数据的开放性代理容易被滥用，因此应该避免使用。像本例中这样使用代理时，应该硬性设定一个允许访问的 URL 的白名单 (whitelist)，拒绝对未列入其中的 URL 的访问。</p><p>现在还差一个部分，即把所有这些类和对象拼装起来的那个工厂方法。它被实现为一个简单工厂：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> FeedManager <span class="token operator">=</span> <span class="token punctuation">{</span>  createFeedReader<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>conf<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> displayModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListDisplay</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">'-display'</span><span class="token punctuation">,</span> conf<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>    Interface<span class="token punctuation">.</span><span class="token function">ensureImplements</span><span class="token punctuation">(</span>displayModule<span class="token punctuation">,</span> DisplayModule<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> xhrHandler <span class="token operator">=</span> XhrManager<span class="token punctuation">.</span><span class="token function">createXhrHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Interface<span class="token punctuation">.</span><span class="token function">ensureImplements</span><span class="token punctuation">(</span>xhrHandler<span class="token punctuation">,</span> AjaxHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FeedReader</span><span class="token punctuation">(</span>displayModule<span class="token punctuation">,</span> xhrHandler<span class="token punctuation">,</span> conf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个工厂方法先实例化所需要的模块，确认它们实现正确的方法，然后把它们传递给 FeedReader 构造函数。</p><p>这个示例中的工厂方法能带来什么好处呢？使用这个API的程序员当然可以手工创建一个 FeedReader 对象，而不必借助 FeedManager.createFeedReader 方法。但使用这个工厂方法，可以把 FeedReader 类所需要的复杂设置封装起来，并且可以确保其成员对象都实现了所需接口。它还把对所使用的特定模块的硬性设定 (ListDisplay和XhrManager.createXhrHandler) 集中在一个位置。哪天要是想使用 ParagraphDisplay 和 QueuedHandler ，做起来也同样简单，只要改改这个工厂方法内部的代码就行。你也可以添加一些代码，像 XHR 处理器示例中所示的那样在运行期间从一些可用的模块中进行选择。总而言之，这是一个阐明”用许多小型对象组成一个大对象”这个用途的绝佳示例。它使用工厂模式，先创建出所有要用到的对象，然后再生成并返回那个作为容器的 FeedReader 类型大对象。</p><h2 id="工厂模式之利"><a href="#工厂模式之利" class="headerlink" title="工厂模式之利"></a>工厂模式之利</h2><p>工厂模式的主要好处在于消除对象间的耦合。通过使用工厂方法而不是 new 关键字及具体类，你可以把所有实例化代码集中在一个位置。这可以大大简化更换所用的类或在运行期间动态选择所用的类的工作。在派生子类时它也提供了更大的灵活性。使用工厂模式，你可以先创建一个抽象的父类，然后在子类中创建工厂方法，从而把成员对象的实例化推迟到更专门化的子类中进行。</p><p>所有这些好处都与面向对象设计的这两条原则有关：弱化对象间的耦合;防止代码的重复。在一个方法中进行类的实例化，可以消除重复性的代码。这是在用一个对接口的调用取代一个具体的实现。这些都有助于创建模块化的代码。</p><h2 id="工厂模式之弊"><a href="#工厂模式之弊" class="headerlink" title="工厂模式之弊"></a>工厂模式之弊</h2><p>可能有人禁不住想把工厂方法当万金油用，把普通的构造函数扔在一边。这并不值得提倡。如果根本不可能另外换用一个类，或者不需要在运行期间在一系列可互换的类中进行选择，那就不应该使用工厂方法。大多数类最好使用 new 关键字和构造函数公开地进行实例化。这可以让代码更简单易读。你可以一眼就看到调用的是什么构造函数，而不必去查看某个工厂方法以便知道实例化的是什么类。工厂方法在其适用场合非常有用，但切勿滥用。如果拿不定主意，那就不要用，因为以后在重构代码时还有机会使用工厂模式。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>我们讨论了简单工厂和工厂模式。我们以自行车商店为例说明了二者之间的差别：简单工厂通常另外使用一个类或对象封装实例化操作，而真正的工厂模式则要实现一个抽象的工厂方法并把实例化工作推迟到子类中进行。这种模式有几种明确的应用场合。它主要用在所实例化的类的类型不能在开发期间确定，而只能在运行期间确定的情况下。此外，如果存在着许多具有复杂的设置开销的相关对象，或者想创建一个包含了一些成员对象的类但又想避免把它们紧密耦合在一起的话，那么这也是这种模式的用武之地。不要盲目地把工厂模式用于所有的实例化任务。但如果运用得当的话，它将是 JavaScript 程序员手中的一大利器。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单体模式</title>
      <link href="/2015/09/25/js-pattern-singleton/"/>
      <url>/2015/09/25/js-pattern-singleton/</url>
      
        <content type="html"><![CDATA[<p>单体 (singleton) 模式是 JavaScript 中最基本但又最有用的模式之一，它可能比其他任何模式都更常用。这种模式提供了一种将代码组织为一个逻辑单元的手段，这个逻辑单元中的代码可以通过单一的变量进行访问。通过确保单体对象只存在一份实例，你就可以确信自己的所有代码使用的都是同样的全局资源。</p><p>单体类在 JavaScript 中有许多用途。它们可以用来划分命名空间，以减少网页中全局变量的数目。它们还可以在一种名为分支 (branching) 的技术中用来封装浏览器之间的差异(借助分支技术，你在使用各种常用的工具函数时就不必再操心浏览器嗅探的事)。更重要的是，借助于单体模式，你可以把代码组织得更为一致，从而使其更容易阅读和维护。</p><p>这种模式在 JavaScript 中非常重要，也许比在其他任何语言中都更重要。在网页上使用全局变量有很大的风险，而用单体对象创建的命名空间则是清除这些全局变量的最佳手段之一。仅此一个原因你就该掌握这种模式，更别说它还有许多别的用途。</p><a id="more"></a><h2 id="单体的基本结构"><a href="#单体的基本结构" class="headerlink" title="单体的基本结构"></a>单体的基本结构</h2><p>最简单的单体实际上就是一个对象字面量，它把一批有一定关联的方法和属性组织在一起</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Singleton <span class="token operator">=</span> <span class="token punctuation">{</span>  attribute1<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  attribute2<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  method1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  method2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>在这个示例中，所有那些成员现在都可以通过变量 Singleton 来访问。可以使用圆点运算符</p><pre class=" language-js"><code class="language-js">Singleton<span class="token punctuation">.</span>attribute1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">var</span> total <span class="token operator">=</span> Singleton<span class="token punctuation">.</span>attribute2 <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个单体对象可以被修改。你可以为其添加新成员，这一点与别的对象字面量没什么不同。你也可以用 delete 运算符删除其现有成员。这实际上违背了面向对象设计的一条原则：类可以被扩展，但不应该被修改。JavaScript 中的所有对象都是易变的，这正是它与 C++ 和 Java 等别的面向对象语言的区别之一。你不必为此忧心忡忡(Python、Ruby 和 Smalltalk 都允许在定义了类之后又对其进行修改)，但是你应该清楚在这种语言中无法阻止对象的修改。如果某些变量需要保护，那么你可以将其定义在闭包之中。</p><p>你可能还是没有发觉这种单体对象与普通对象字面量有什么不同。按传统的定义，单体是一个只能被实例化一次并且可以通过一个众所周知的访问点访问的类。要是严格地按这个定义来说，前面的例子所示的并不是一个单体，因为它不是一个可实例化的类。我们打算把单体模式定义得更广义一些：单体是一个用来划分命名空间并将一批相关方法和属性组织在一起的对象，如果它可以被实例化，那么它只能被实例化一次。</p><p>对象字面量只是用以创建单体的方法之一。另外，并非所有对象字面量都是单体。如果它只是用来模仿关联数组或容纳数据的话，那就显然不是单体。但如果它是用来组织一批相关方法和属性的话，那就可能是单体。其区别主要在于设计者的意图。</p><h2 id="划分命名空间"><a href="#划分命名空间" class="headerlink" title="划分命名空间"></a>划分命名空间</h2><p>单体对象由两个部分组成：包含着方法和属性成员的对象自身，以及用于访问它的变量。这个变量通常是全局性的，以便在网页上任何地方都能直接访问到它所指向的单体对象。这是单体模式的一个要点。虽然按定义单体不必是全局性的，但它应该在各个地方都能被访问。因为单体对象的所有内部成员都被包装在这个对象中，所以它们不是全局性的。由于这些成员只能通过这个单体对象变量进行访问，因此在某种意义上，可以说它们被单体对象圈在了一个命名空间中。</p><p>命名空间是可靠的 JavaScript 编程的一个重要工具。在 JavaScript 中什么都可以被改写，程序员一不留神就会擦除一个变量、函数甚至整个类，而自己却毫无察觉。这种错误查找起来非常费时</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//声明一个全局函数</span><span class="token keyword">function</span> <span class="token function">findProduct</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//随后，另一个程序员添加了</span><span class="token keyword">var</span> resetProduct <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#reset-product-button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> findProduct <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#find-product-button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//findProduct函数被改写</span></code></pre><p>有个问题虽然与这个例子没有直接关系，但却也值得提一句。函数中声明变量时使用的 var 关键字很重要，如果不使用它，那么变量将被声明为全局性的，因此更容易干扰到全局命名空间中的其他代码。</p><p>现在回头来看前面的例子。为了避免无意中改写变量，最好的解决办法之一是用单体对象将代码组织在命名空间之中。下面是前面的例子用单体模式改良后的结果</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//使用命名空间</span><span class="token keyword">var</span> MyNamespace <span class="token operator">=</span> <span class="token punctuation">{</span>  findProduct<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//随后，另一个程序员添加代码</span><span class="token keyword">var</span> resetProduct <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#reset-product-button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> findProduct <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#find-product-button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//什么都没有被改写</span></code></pre><p>现在 findProduct 函数是 MyNamespace 中的一个方法，它不会被全局命名空间中声明的任何新变量改写。要注意，该方法仍然可以从各个地方访问。不同之处在于现在其调用方式不是 findProduct(id)，而是 MyNamespace.findProduct(id)。还有一个好处就是，这可以让其他程序员大体知道这个方法的声明地点及其作用。用命名空间把类似的方法组织到一起，也有助于增强代码的文档性。</p><p>命名空间还可以进一步分割。现在网页上的 JavaScript 代码往往不止有一个来源。其中除了你写的代码之外，还会有库代码、广告代码和徽章代码。这些变量都出现在网页的全局命名空间中。为了避免冲突，可以定义一个用来包含自己的所有代码的全局对象：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> giantCorp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>然后可以分门别类地把自己的代码和数据组织到这个全局对象中的各个对象(单体)中：</p><pre class=" language-js"><code class="language-js">GiantCorp<span class="token punctuation">.</span>Common <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 公共模块</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误处理</span>GiantCorp<span class="token punctuation">.</span>ErrorCodes <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 错误处理</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//页面</span>GiantCorp<span class="token punctuation">.</span>PageHandler <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 页面交互</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>来源于外部的代码与 GiantCorp 这个变量发生冲突的可能性很小。如果真有冲突，其造成的问题会非常明显，所以很容易被发现。想到自己办事牢靠，没有把全局命名空间搞得一片狼藉，你大可高枕无忧。你只是在全局命名空间中加入了一个变量，这是一个 JavaScript 程序员可望获得的最小地盘。</p><h2 id="用作特定网页专用代码的包装器的单体"><a href="#用作特定网页专用代码的包装器的单体" class="headerlink" title="用作特定网页专用代码的包装器的单体"></a>用作特定网页专用代码的包装器的单体</h2><p>你已经了解了如何把单体作为命名空间使用，现在我们再介绍单体模式的一个特殊用途。在那种拥有许多网页的网站中，有些 JavaScript 代码是所有网页都要用到，它们通常被存放在独立的文件中：而有些代码则是某个网页专用的，不会被用到其他地方。最好把这两种代码分别包装在自己的单体对象中。</p><p>用来包装各个网页专用的代码的单体通常看起来都差不多。它需要封装一些数据(也许是作为常量)、为各网页特有的行为定义一些方法以及定义初始化方法。涉及 DOM 中特有元素的大多数代码，比如添加事件监听器的代码，只有在这些元素加载之后才能工作。你可以通过创建一个 init 方法并将其关联到窗口的 load 事件(或类似的其他事件，比如由此派生出来的 DOMContentLoaded 事件或 DOMLoaded 事件)，将所有这些初始化代码组织到一个地方。</p><p>下面是用来包装特定网页专用代码的单体的骨架：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//通用页面对象</span>Namespace<span class="token punctuation">.</span>PageName <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//页面常量</span>  CONSTANT_1<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  CONSTANT_2<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//页面方法</span>  method1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  method2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//初始化方法</span>  init<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//页面加载后调用初始化方法</span><span class="token function">addLoadEvent</span><span class="token punctuation">(</span>Namespace<span class="token punctuation">.</span>PageName<span class="token punctuation">.</span>init<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们用一个 Web 开发中很常见的任务为例示范一下它的用法。我们经常想要用 JavaScript 为表单添加功能。出于平稳退化方面的考虑，通常先创建一个不依赖于 JavaScript 的、使用普通提交机制完成任务的纯 HTML 网页。然后再用 JavaScript 控制表单的行为，以提供额外的特性。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 页面注册单体，页面处理对象</span>GiantCorp<span class="token punctuation">.</span>RegPage <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 常量</span>  FORM_ID<span class="token punctuation">:</span> <span class="token string">'reg-form'</span><span class="token punctuation">,</span>  OUTPUT_ID<span class="token punctuation">:</span> <span class="token string">'reg-results'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 表单处理方法</span>  handleSubmit<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 阻止传统表单提交</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> inputs <span class="token operator">=</span> GiantCorp<span class="token punctuation">.</span>RegPage<span class="token punctuation">.</span>formEl<span class="token punctuation">.</span><span class="token function">getElementByTagName</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 收集表单中input中的值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> inputs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      data<span class="token punctuation">[</span>inputs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> inputs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 发送表单数据到服务器</span>    GiantCorp<span class="token punctuation">.</span>RegPage<span class="token punctuation">.</span><span class="token function">sendRegistration</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  sendRegistration<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用ajax请求并当请求返回后调用displayResult()方法。</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  displayResult<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 输出返回信息到指定的输出元素。我们假设服务器返回格式化好的HTML。</span>    GiantCorp<span class="token punctuation">.</span>RegPage<span class="token punctuation">.</span>outputEl<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> response<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//初始化方法</span>  init<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取表单和输出元素</span>    GiantCorp<span class="token punctuation">.</span>RegPage<span class="token punctuation">.</span>formEl <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>GiantCorp<span class="token punctuation">.</span>RegPage<span class="token punctuation">.</span>FORM_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>    GiantCorp<span class="token punctuation">.</span>RegPage<span class="token punctuation">.</span>outputEl <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>GiantCorp<span class="token punctuation">.</span>RegPage<span class="token punctuation">.</span>OUTPUT_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 劫持表单提交</span>    <span class="token function">addEvent</span><span class="token punctuation">(</span>GiantCorp<span class="token punctuation">.</span>RegPage<span class="token punctuation">.</span>formEl<span class="token punctuation">,</span> <span class="token string">'submit'</span><span class="token punctuation">,</span> GiantCorp<span class="token punctuation">.</span>RegPage<span class="token punctuation">.</span>handleSubmit<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 页面加载后调用初始化方法</span><span class="token function">addLoadEvent</span><span class="token punctuation">(</span>GiantCorp<span class="token punctuation">.</span>RegPage<span class="token punctuation">.</span>init<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上述代码中首先假定 GiantCorp 命名空间已经作为一个空的对象字面量被创建好了。如若不然，代码的第一行就会引发一个错误。下面这行代码可以防止这种错误，如果 GiantCorp 还不存在，它就会定义这个对象，其中使用的逻辑“或”运算符可以在未找到一个属性时为其提供一个默认值：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> GiantCorp <span class="token operator">=</span> window<span class="token punctuation">.</span>GiantCorp <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>在前面的例子中，我们把所关注的两个 HTML 元素的 ID 值作为常量保存起来，这是因为在程序执行期间它们不会发生变化。</p><p>其中的初始化方法先获取那两个 HTML 元素的引用，然后把它们作为单体的新属性保存起来。这没问题，你可以在运行时添加或删除单体的成员。这个方法还把一个方法关联到表单的 submit 的事件。此后当表单被提交时，其正常行为会被阻止(这是 e.preventDefault() 的作用)取而代之的是收集表单数据并用 Ajax 方式将其发回服务器的操作。</p><h2 id="拥有私用成员的单体"><a href="#拥有私用成员的单体" class="headerlink" title="拥有私用成员的单体"></a>拥有私用成员的单体</h2><p>使用真正的私用方法的一个缺点在于它们比较耗费内存，因为每个实例都具有方法的一份新副本。不过，由于单体对象只会被实例化一次，因此为其定义真正的私用方法时不必顾虑内存方面的问题。尽管如此，创建伪私用成员还是更容易一些，所以我们先谈谈这种做法。</p><h3 id="使用下划线表示法"><a href="#使用下划线表示法" class="headerlink" title="使用下划线表示法"></a>使用下划线表示法</h3><p>在单体对象内创建私用成员最简单、最直截了当的办法是使用下划线表示法。这可以让其他程序员知道相关方法或属性是私用的，只在对象内部使用。在单体对象中使用下划线表示法是一种告诫其他程序员不要直接访问特定成员的简明办法：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//数据解析单体，字符串分割成数组</span>GiantCorp<span class="token punctuation">.</span>DataParser <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//私有方法</span>  _stripWhitespace<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s+/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  _stringSplit<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>str<span class="token punctuation">,</span> delimiter<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>delimiter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//公有方法</span>  stringToArray<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>str<span class="token punctuation">,</span> delimiter<span class="token punctuation">,</span> stripWS<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stripWS<span class="token punctuation">)</span> <span class="token punctuation">{</span>      str <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_stripWhitespace</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> outputArray <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_stringSplit</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> delimiter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> outputArray<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这个例子中的单体对象有一个公用方法 stringToArray。该方法的参数包括一个字符串、一个分隔符，以及一个用以指示是否要删除所有空白字符的可选的布尔值。它的工作主要靠 _stripWhitespace 和 _stringSplit 这两个私用方法完成。这两个方法不是该单体有记载的接口的一部分，以后更新时不见得还会存在，所以它们不应该被公开。将它们设计为私用方法，重构所有内部代码时就不必担心会殃及别人的程序。比如说，后来你检查了一下这个对象，觉得 <code>_stringSplit</code> 没有必要作为一个单独的函数存在。你可以将其彻底删除，而且因为这是用下划线标记的私用方法，可以确信没人会直接调用它(如果真有这样的人，他们活该遭受报应)。</p><p>stringToArray 方法中用 this 访问单体中的其他方法。这是访问单体中其他成员的最简单的做法。但这样做也有一点风险，因为 this 并不一定就指向 GiantCorp.DataParser 。例如，如果把某个方法用作事件监听器，那么其中的 this 可能会指向 window 对象，这意味着 _stripWhitespace 和 _stringSplit 这两个方法不会被找到。虽然大多数 JavaScript 库都会为事件关联进行作用域校正，但还是使用全名 GiantCorp.DataParser 访问单体内的其他成员更保险一点。</p><h3 id="使用闭包"><a href="#使用闭包" class="headerlink" title="使用闭包"></a>使用闭包</h3><p>在单体对象中创建私用成员的第二种办法需要借助闭包。把变量和函数定义在构造函数体内(不使用 this 关键字)以使其成为私用成员，此外还在构造函数体内定义了所有的特权方法并用 this 关键字使其可被外界访问。每生成一个该类的实例时，所有声明在构造函数内的方法和属性都会再次创建一份。这可能会非常低效。</p><p>因为单体只会被实例化一次，所以你不用担心自己在构造函数中声明了多少成员。每个方法和属性都会被创建一次，所以你可以把它们都声明在构造函数内部(因此也就位于同一个闭包中)。先前你所见的单体都是这样的对象字面量：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//对象字面量单体</span>MyNamespace<span class="token punctuation">.</span>Singleton <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>现在我们用一个在定义后立即执行的函数创建单体：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//带有私有成员的单体, step 1</span>MyNamespace<span class="token punctuation">.</span>Singleton <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上述两个例子中所创建的两个 MyNamespace.Singleton 完全相同。要注意在第二个例子中并没有把一个函数赋给 MyNamespace.Singleton。那个匿名函数返回一个对象，而赋给 MyNamespace.Singleton 变量的正是这个对象。为了立即执行这个匿名函数，只需在其定义的最后那个大括号后面放上一对圆括号即可。</p><p>有写程序员喜欢在那个匿名函数定义外再套上一对圆括号，以表示它会在声明之后立即执行。这在所创建的单体较为庞大时尤其有用，因为你只要瞟一眼就能看出该函数只是用来创建一个闭包。额外加上这对圆括号，前面创建单体那个例子就变成下面的样子：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//带有私有成员的单体, step 1</span>MyNamespace<span class="token punctuation">.</span>Singleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>你可以像以前那样把公用成员添加到作为单体返回的那个对象字面量中：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//带有私有成员的单体, step 2</span>MyNamespace<span class="token punctuation">.</span>Singleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 公有方法</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    publicAttribute1<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    publicAttribute2<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    publicMethod1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    publicMethod2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>要是这样得到的结果与直接使用一个对象字面量没什么区别，那又何必劳神加上那层函数包裹呢?原因在于这个包装函数创建了一个可以用来添加真正的私用成员的闭包。任何声明在这个匿名函数中(但不是在那个对象字面中)的变量或函数都只能被在同一个闭包中声明的其他函数访问。这个闭包在匿名函数执行结束后依然存在，所以在其中声明的函数和变量总能从匿名函数所返回的对象内部(并且也只能从内部)访问。</p><p>下面的代码示范了在那个匿名函数中添加私用成员的做法：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//带有私有成员的单体, step 3</span>MyNamespace<span class="token punctuation">.</span>Singleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//私有成员</span>  <span class="token keyword">var</span> privateArrtibute1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> privateArrtibute2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">privateMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">privateMethod2</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 公有成员</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    publicAttribute1<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    publicAttribute2<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    publicMethod1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    publicMethod2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这种单体模式又称模块模式 (module pattern)，指的是它可以把一批相关方法和属性组织为模块并起到划分命名空间的作用。</p><h3 id="两种技术的比较"><a href="#两种技术的比较" class="headerlink" title="两种技术的比较"></a>两种技术的比较</h3><p>现在回到 DataParser 这个例子中来，看看如何在其实现中使用真正的私用成员。现在我们不再为每个私用方法名称的开头添加一个下划线，而是把这些方法定义在闭包中：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//数据解析单体，字符串分割成数组</span><span class="token comment" spellcheck="true">//现在使用真正的私有方法</span>GiantCorp<span class="token punctuation">.</span>DataParser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 私有属性</span>  <span class="token keyword">var</span> whitespaceRegex <span class="token operator">=</span> <span class="token regex">/\s+/</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 私有方法</span>  <span class="token keyword">function</span> <span class="token function">stripWhitespace</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>whitespaceRegex<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">stringSplit</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> delimiter<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>delimiter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 返回的对象字面量中的成员是公有的，但是可以访问以上在闭包中创建的成员</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//公有方法</span>    stringToArray<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>str<span class="token punctuation">,</span> delimiter<span class="token punctuation">,</span> stripWS<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>stripWS<span class="token punctuation">)</span> <span class="token punctuation">{</span>        str <span class="token operator">=</span> <span class="token function">stripWhitespace</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">var</span> outputArray <span class="token operator">=</span> <span class="token function">stringSplit</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> delimiter<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> outputArray<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用函数并将返回的对象字面量赋值给GiantCorp.DataParser</span></code></pre><p>现在这些私用方法和属性可以直接用其名称访问，不必在其前面加上 “this.” 或 “GiantCorp.DataParser”，这些前缀只用于访问单体对象的公用成员。</p><p>这种模式与使用下划线表示法的模式相比有几点优势。把私用放到闭包中可以确保其不会在单体对象之外被使用。你可以自由地改变对象的实现细节，这不会殃及别人的代码。还可以用这种办法对数据进行保护和封装(尽管单体很少被这样用，除非那些数据只能被保存在一个地方)。</p><p>在使用这种模式时，你可以享受到真正的私用成员带来的所有好处，而不必付出什么代价，这是因为单体类只会被实例化一次，单体模式之所以是 JavaScript 中最流行、应用最广泛的模式之一，原因即在于此。</p><h2 id="惰性实例化"><a href="#惰性实例化" class="headerlink" title="惰性实例化"></a>惰性实例化</h2><p>前面所讲的单体模式的各种实现方式有一个共同点：单体对象都是在脚本加载时被创建出来。对于资源密集型的或配置开销甚大的单体，也许更合理的做法是将其实例化推迟到需要使用它的时候，这种技术被称为惰性加载 (lazy loading)，它最常用于那些必须加载大量数据的单体。而那些被用作命名空间、特定网页专用代码包装器或组织相关实用方法的工具的单体最好还是立即实例化。</p><p>这种惰性加载单体的特别之处在于，对它们的访问必须借助于一个静态方法。应该这样调用其方法：Singleton.getInstance().methodName()，而不是这样调用：Singleton.methodName()。getInstance 方法会检查该单体是否已经被实例化。如果还没有，那么它将创建并返回其实例。如果单体已经实例化过，那么它将返回现有实例。下面我们从前面那个拥有真正的私用成员单体的基本框架出发示范一下如何把普通单体转化为惰性加载单体：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 私有成员单体，step 3</span>MyNamespace<span class="token punctuation">.</span>Singleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//私有成员</span>  <span class="token keyword">var</span> privateAttribute1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> privateAttribute2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">privateMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">privateMethod2</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//公有成员</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    publicAttribute1<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    publicAttribute2<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    publicMethod1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    publicMethod2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这段代码还没有进行任何修改。转化工作的第一步是把单体的所有代码移到一个名为 constructor 的方法中：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 惰性加载单体通用骨架，step 1.</span>MyNamespace<span class="token punctuation">.</span>Singleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 所有通用单体代码写在在这</span>  <span class="token keyword">function</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有成员</span>    <span class="token keyword">var</span> privateAttribute1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> privateAttribute2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">privateMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">privateMethod2</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//公有成员</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      publicAttribute1<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      publicAttribute2<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>      publicMethod1<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      publicMethod2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个方法不能从闭包外部访问，这是件好事，因为我们想全权控制其调用时机。公用方法 getInstance 就是用来实现这种控制的。为了使其成为公用方法，只需将其放到一个对象字面量中并返回该对象即可：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 惰性加载单体通用骨架，step 2.</span>MyNamespace<span class="token punctuation">.</span>Singleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 所有通用单体代码写在这里</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    getInstance<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 控制代码写在这里</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>现在开始编写用于控制单体类实例化时机的代码。它需要做两件事。第一，它必须知道该类是否已经被实例化过，那么它需要掌握其实例的情况，以便能返回这个实例。办这两件事需要用到一个私用属性和已有的私用方法 constructor：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 惰性加载单体通用骨架，step 3.</span>MyNamespace<span class="token punctuation">.</span>Singleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//私有属性保存单个实例</span>  <span class="token keyword">var</span> uniqueInstance<span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    getInstance<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>uniqueInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        uniqueInstance <span class="token operator">=</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> uniqueInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>把一个单体转化为惰性加载单体后，你必须对调用它的代码进行修改。在本例中，像这样的方法调用：</p><pre class=" language-js"><code class="language-js">MyNamespace<span class="token punctuation">.</span>Singleton<span class="token punctuation">.</span><span class="token function">publicMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>应该被改为下面的形式：</p><pre class=" language-js"><code class="language-js">MyNamespace<span class="token punctuation">.</span>Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">publicMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>惰性加载单体的缺点之一在于其复杂性。用于创建这种类型的单体的代码并不直观，而且不易理解(不过良好的文档可以提供帮助)。如果你需要创建一个延迟实例化的单体，那么最好为其编写一条注释解释这样做的原因，以免别人把它简化为普通单体。</p><p>顺便提一句，如果觉得命名空间名称太长，可以创建一个别名来简化它。这种别名只不过是一个保存了对特定对象的引用的变量。在本例中，可以把 MyNamespace.Singleton 简化为 MNS ：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> MNS <span class="token operator">=</span> MyNamespace<span class="token punctuation">.</span>Singleton<span class="token punctuation">;</span></code></pre><p>这样做会创建一个全局变量，所以最好还是把它声明在一个特定网页专用代码包装器单体中。在存在单体嵌套的情况下，会出现一些作用域方面的问题。在这种场合下访问其他成员最好使用完全限定名(比如 GiantCorp.SingletonName )而不是 this 。</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>分支 (branching) 是一种用来把浏览器间的差异封装到在运行期间进行设置的动态方法中的技术。举个例来说，假设我们需要创建一个返回 XHR 对象的方法。这种 XHR 对象在大多数浏览器中是 XMLHTTPRequest 类的实例，而在 IE 早期版本中则是某种 ActiveX 类的实例。这样一个方法通常会进行某种浏览器嗅探或对象探测。如果不用分支技术，那么每次调用这方法时，所有那些浏览器嗅探代码都要再次运行。要是这个方法的调用很频繁，那么这样做会严重缺乏效率。</p><p>更有效的做法是只在脚本加载时一次性地确定针对特定浏览器的代码。这样一来，在初始化完成之后，每种浏览器都只会执行针对它的 JavaScript 实现而设计的代码。能够在运行时动态确定函数代码的能力，正是 JavaScript 的高度灵活性和强大表现能力的一种体现。这种类型的优化很容易理解，它能提高调用这些函数的效率。</p><p>你可能一时还难以明白分支这个话题与单体模式有什么关系。在前面所讲的三种模式中，单体对象的所有代码都是在运行时确定的。这在用闭包创建私用成员的模式中最容易看出来：</p><pre class=" language-js"><code class="language-js">MyNamespace<span class="token punctuation">.</span>Singleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>那个匿名函数在运行时得以执行，其返回的对象字面量被赋值给 MyNamespace.Singleton 变量。我们可以创建两个不同的对象字面量，并根据某种条件将其中之一赋给那个变量：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 单体分支</span>MyNamespace<span class="token punctuation">.</span>Singleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> objectA <span class="token operator">=</span> <span class="token punctuation">{</span>    method1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    method2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> objectB <span class="token operator">=</span> <span class="token punctuation">{</span>    method1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    method2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>someCondition<span class="token punctuation">)</span> <span class="token operator">?</span> objectA <span class="token punctuation">:</span> objectB<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上述代码中创建了两个对象字面量，它们拥有相同的一套方法。对于使用这个单体的程序员来说，赋给 MyNamespace.Singleton 的究竟是哪个对象无关紧要，因为这两个对象实现了同样的接口，可以执行同样的任务，不同之处仅仅在于对象的方法具体使用的代码。你并不是只能使用两个分支，只要有理由，你也可以创建具有三四个分支的单体。据以在分支中进行选择的条件值在运行时进行确定。这种条件通常是某种能力检测的结果，意在确保运行代码的 JavaScript 环境实现了所需要的特性。如若不然，则将改而使用应变代码 (fallback code)。</p><p>分支技术并不总是更高效的选择。在前面的例子中，有两个对象(objectA 和 objectB)被创建出来并保存在内存中，但派上用场的只有一个。在考虑是否使用这种技术的时候，你必须在缩短计算时间(因为判断该使用哪个对象的代码只会执行一次)和占用更多内存这一利一弊之间权衡一下。下一个例子就属于适合采用分支技术的情况，因为其中的分支对象较小而判断使用哪个对象的开销较大。</p><h2 id="示例：用分支技术创建-XHR-对象"><a href="#示例：用分支技术创建-XHR-对象" class="headerlink" title="示例：用分支技术创建 XHR 对象"></a>示例：用分支技术创建 XHR 对象</h2><p>在本例中我们要创建一个单体，它有一个用来生成XHR对象实例的方法。我们首先应该判断需要多少分支。因为所能实例化的对象只有 3 种不同类型，所以我们需要 3 个分支。这些分支分别按其返回的 XHR 对象类型命名：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//简单的XHR单体工厂, step 1</span><span class="token keyword">var</span> SimpleXhrFactory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> standard <span class="token operator">=</span> <span class="token punctuation">{</span>    createXhrObject<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> activeXNew <span class="token operator">=</span> <span class="token punctuation">{</span>    createXhrObject <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">'Msxml2.XMLHTTP'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> activeXOld <span class="token operator">=</span> <span class="token punctuation">{</span>    createXhrObject<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">'Microsoft.XMLHTTP'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这3个分支各含一个对象字面量，它们都有一个名为 createXhrObject 的方法。这个方法所做的只是返回一个可以用来执行异步请求的新对象。</p><p>创建分支型单体的第2步是根据条件将 3 个分支中某一分支的对象赋给那个变量。其具体做法是逐一尝试每种 XHR 对象，直到遇到一个当前 JavaScript 环境所支持的对象为止：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//简单的XHR单体工厂, step 1</span><span class="token keyword">var</span> SimpleXhrFactory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> standard <span class="token operator">=</span> <span class="token punctuation">{</span>    createXhrObject<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> activeXNew <span class="token operator">=</span> <span class="token punctuation">{</span>    createXhrObject <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">'Msxml2.XMLHTTP'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> activeXOld <span class="token operator">=</span> <span class="token punctuation">{</span>    createXhrObject<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">'Microsoft.XMLHTTP'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> testObject<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    testObject <span class="token operator">=</span> standard<span class="token punctuation">.</span><span class="token function">createXhrObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> standard<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      testObject <span class="token operator">=</span> activeXNew<span class="token punctuation">.</span><span class="token function">createXhrObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> activeXNew<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        testObject <span class="token operator">=</span> activeXOld<span class="token punctuation">.</span><span class="token function">createXhrObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> activeXOld<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'No XHR object found in this environment'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个单体现在就可以用来生成 XHR 对象的实例。使用该API的程序员只要调用 SimpleXhrFactory.createXhrObject() 就能得到适合特定的运行时环境的 XHR 对象。用了分支技术后，所有那些特性嗅探代码都只会执行一次，而不是每生成一个对象就要执行一次。</p><p>这是一种非常有效的技术，它适用于任何只有运行时才能确定具体实现的情况。</p><h2 id="单体模式的适用场合"><a href="#单体模式的适用场合" class="headerlink" title="单体模式的适用场合"></a>单体模式的适用场合</h2><p>从为代码提供命名空间和增强其模块性这个角度来说，你应该尽量多使用单体模式。单体是 JavaScript 中最有用的模式之一，几乎适用于所有大大小小的项目。在简单的快餐型项目中，你可以只是把单体用作命名空间，将自己的所有代码组织在一个全局变量名下。在稍大、稍复杂一点的项目中，单体可以用来把相关代码组织在一起以便日后维护，或者用来把数据或代码安置在一个众所周知的单一位置。在大型或复杂的项目中，它可以起到优化作用：那些开销较大却有很少使用的组件可以被包装到惰性加载单体中，而针对特定环境的代码则可以被包装到分支型单体中。</p><p>很少见到有哪个项目用不到某种形式的单体模式。JavaScript 的灵活性使单体可以被用于多种不同任务。可以说，这种模式在 JavaScript 中的重要性大大超过它在其他语言中的重要性。这主要是因为它可以用来创建命名空间以减少全局变量的数目。这种作用对于 JavaScript 非常重要，因为这种语言中的全局变量比其他语言中的更有危险性。网页包含的 JavaScript 代码往往有着五花八门的来源，其编写者形形色色，所以全局变量和函数很容易被改写，从而导致你的代码失灵。可以解决这种问题的单体模式无疑是程序员们工具箱中的一大利器。</p><h2 id="单体模式之利"><a href="#单体模式之利" class="headerlink" title="单体模式之利"></a>单体模式之利</h2><p>单体模式的主要好处在于它对代码的组织作用。把相关方法和属性组织在一个不太会被多次实例化的单体中，可以使代码的调试和维护变得更轻松。描述性的命名空间还可以增强代码的自我说明性，有利于新手阅读和理解。把你的方法包裹在单体中，可以防止它们被其他程序员误改，还可以防止全局命名空间被一大堆变量弄得一团糟。单体可以把你的代码与第三方的库代码和广告代码隔离开来，从而在整理上提高网页的稳定性。</p><p>单体模式的一些高级变体可以在开发周期的后期用于对脚本进行优化，提升其性能。使用惰性实例化技术，可以直到需要一个对象的时候才创建它，从而减少那些不需要它的用户承受的不必要的内存消耗(还可能包括带宽消耗)。分支技术则可以用来创建高效的方法，不用管浏览器的兼容性如何。通过根据运行时的条件确定赋给单体变量的对象字面量，你可以创建出为特定环境量身定制的方法，这种方法不会在每次调用时都一再浪费时间去检查运行环境。</p><h2 id="单体模式之弊"><a href="#单体模式之弊" class="headerlink" title="单体模式之弊"></a>单体模式之弊</h2><p>由于单体模式提供的是一种单点访问，所有它有可能导致模块间的强耦合。这是这种模式受到的主要批评，这个批评也很中肯。有时创建一个可实例化的类更为可取，哪怕它只会被实例化一次。因为这种模式可能会导致类间的强耦合，所以它也不利于单元测试。你无法单独测试一个调用了来自单体的方法的类，而只能把它与那个单体作为一个单元一起测试。单体最好还是留给定义命名空间和实现分支型方法这些用途。在这些情况下，耦合不是什么问题。</p><p>有时某种更高级的模式会更符合任务的需要。与惰性加载单体相比，虚拟代理能给予你对类实例化方式更多的控制权。你也可以用一个真正的对象工厂来取代分支型单体(虽说这个工厂可能也是一个单体)。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>单体模式是 JavaScript 中最基本的模式之一。它不仅可以单独使用，还能以这样或那样的形式与大多数模式配合使用。例如，对象工厂就可以被设计为单体，组合对象的所有子对象也可以被封装进一个单体命名空间中。把你的代码包装在一个单体中，就不必担心别人在使用他们时会改写到他们自己的全局变量，这是向创建供大众使用的API这个方向迈出的一大步。这也是成为一个值得信赖的高级 JavaScript 程序员所要经历的第一步。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript中的继承</title>
      <link href="/2015/09/22/javascript-inheritance/"/>
      <url>/2015/09/22/javascript-inheritance/</url>
      
        <content type="html"><![CDATA[<p>在 JavaScript 中继承是一个非常复杂的话题，比其他任何面向对象的语言中的继承都复杂得多。在大多数其他面向对象语言中，继承一个类只需要使用一个关键字即可。与它们不同，在 JavaScript 中要想达到传承公用成员的目的，需要采取一系列措施。更有甚者，JavaScript 属于使用原型式继承的少数语言之一。得益于这种语言的灵活性，你既可使用标准的基于类的继承，也可使用更微妙一些的原型式继承。</p><a id="more"></a><h2 id="为什么需要继承"><a href="#为什么需要继承" class="headerlink" title="为什么需要继承"></a>为什么需要继承</h2><p>一般来说，在设计类的时候，我们希望能减少重复性的代码，并且尽量弱化对象间的耦合。使用继承符合前一个设计原则的需要。借助这种机制，你可以在现有类的基础上进行设计并充分利用它们已经具备的各种方法，而对设计进行修改也更为轻松。假设你需要让几个类都拥有一个按特定方式输出类结构的 toString 方法，当然可以用复制加黏贴的办法把定义 toString 方法的代码添加到每一个类中，但这样做的话，每当需要改变这个方法的工作方式时，你将不得不在每一个类中重复同样的修改。反之，如果你先创建一个 toStringProvider 类，然后让那些类继承这个类，那么 toString 这个方法只需在一个地方声明即可。</p><h2 id="类式继承"><a href="#类式继承" class="headerlink" title="类式继承"></a>类式继承</h2><p>JavaScript 可以被装扮成使用类式继承的语言。通过用函数来声明类、用关键字 new 来创建实例，JavaScript 中的对象也能惟妙惟肖地模仿 Java 或 C++ 中的对象。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Person 类</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>首先要做的是创建构造函数。按惯例，其名称就是类名，首字母应大写。在构造函数中，创建实例属性要使用关键字 this。类的方法则被添加到其 prototype 对象中，就像例中的 Person.prototype.getName 那样。要创建该类的实例，只需要结合关键字 new 调用这个构造函数即可</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'John Smith'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>reader<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后你可以访问所有的实例属性，也可以调用所有的实例方法。这是 JavaScript 中一个非常简单的类的例子。</p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>创建继承 Person 的类则要复杂一些</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Author类</span><span class="token keyword">function</span> <span class="token function">Author</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> books<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Person<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>books <span class="token operator">=</span> books<span class="token punctuation">;</span><span class="token punctuation">}</span>Author<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Author<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Author<span class="token punctuation">;</span>Author<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getBooks <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>让一个类继承另一个类需要用到许多行代码(不像大多数别的面向对象的语言中那样只用一个关键字 extend 即可)。首先要做的是像前一个示例中那样创建一个构造函数。在构造函数中，调用超类的构造函数，并将 name 参数传给它。这行代码需要解释一下。在使用 new 运算符的时候，系统会为你做一些事。它先创建一个空对象，然后调用构造函数，在此过程中这个空对象处于作用域的最前端。而在 Author 函数中调用超类的构造函数时，你必须手工完成同样的任务。Person.call(this, name) 这条语句调用了 Person 构造函数，并且在此过程中让那个空对象(用 this 代表)处于作用域的最前端，而 name 则被作为参数传入。</p><p>下一步是设置原型链。尽管相关代码比较简单，但这实际上是一个非常复杂的话题。在访问对象的某个成员时(比如 reader.getName)，如果这个成员未见于当前对象，那么 JavaScript 会在其原型对象中查找它。如果在那个对象中也没有找到，那么 JavaScript 会沿着原型链向上逐一访问每个原型对象，直到找到这个成员(或已经查过原型链最顶端的 Object.prototype 对象)。这意味着为了让一个类继承另一个类，只需将子类的 prototype 设置为指向超类的一个实例即可。这与其他语言中的继承机制迥然不同，可能会非常令人费解，而且有违直觉。</p><p>为了让 Author 继承 Person，必须手工将 Author 的 prototype 设置为 Person 的一个实例。最后一个步骤是将 prototype的 constructor 属性重设为 Author (因为把 prototype 属性设置为 Person 的实例时，其 constructor 属性被抹除了)</p><p>尽管本例中为实现继承需要额外使用三行代码，但是创建这个新的子类的实例与创建 Person 的实例没什么不同</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> author <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>author<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token string">'author1'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'book1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>author<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token string">'author2'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'book2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>author<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>author<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>由此可见，类式继承的所有复杂性只限于类的声明，创建新实例的过程仍然很简单。</p><h3 id="extend-函数"><a href="#extend-函数" class="headerlink" title="extend 函数"></a>extend 函数</h3><p>为了简化类的声明，可以把派生子类的整个过程包装在一个名为 extend 的函数中。它的作用与其他语言中的 extend 关键字类似，即基于一个给定的类结构创建一个新的类</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// extend 函数</span><span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span>subClass<span class="token punctuation">,</span> superClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> F <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> superClass<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>  subClass<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  subClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> subClass<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个函数所做的事与先前我们手工做的一样。它设置了 prototype，然后再将其 constructor 重设为恰当的值。作为一项改进，它添加了一个空函数 F，并将用它创建的一个对象实例插入原型链中。这样做可以避免创建超类的新实例，因为它可能会比较庞大，而且有时超类的构造函数有一些副作用，或者会执行一些需要进行大量计算的任务。</p><p>使用了 extend 函数后，前面那个 Person/Author 例子变成了这个样子</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Person类</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Author类</span><span class="token keyword">function</span> <span class="token function">Author</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> books<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Person<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>books <span class="token operator">=</span> books<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">extend</span><span class="token punctuation">(</span>Author<span class="token punctuation">,</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span>Author<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getBooks <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>本例不像先前那样手工设置 prototype 和 constructor 属性，而是通过在类声明之后（在向 prototype 添加任何方法之前）立即调用 extend 函数来达到同样的目的。唯一的问题是超类 (Person) 的名称被固化在了 Author 类的声明之中。更好的做法是像下面这样用一种更具普适性的方式来引用父类</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 改进extend函数</span><span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span>subClass<span class="token punctuation">,</span> superClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> F <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> superClass<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>  subClass<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  subClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> subClass<span class="token punctuation">;</span>  subClass<span class="token punctuation">.</span>superclass <span class="token operator">=</span> superClass<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>superClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    superClass<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> superClass<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个版本要长一点，它提供了 superclass 属性，这个属性可以用来弱化 Author 与 Person 之间的耦合。该函数的前面 4 行与前一版本相同。它的最后 3 行代码则用来确保超类原型的 constructor 属性已被正确设置，在用这个新的 superClass 属性调用超类的构造函数时这个问题很重要</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Author</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> books<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Author<span class="token punctuation">.</span>superclass<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>books <span class="token operator">=</span> books<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">extend</span><span class="token punctuation">(</span>Author<span class="token punctuation">,</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span>Author<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getBooks <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>有了 superclass 属性，就可以直接调用超类中的方法。这在既要重定义超类的某个方法而又想访问其在超类中的实现时可以派上用场。例如，为了用一个新的 getName 方法重定义 Person 类中的同名方法，你可以先用 Author.superclass.getName 获得作者的名字，然后在此基础上添加其他信息：</p><pre class=" language-js"><code class="language-js">Author<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> Author<span class="token punctuation">.</span>superclass<span class="token punctuation">.</span>getName<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">', Author of '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h2><p>原型式继承与类式继承截然不同。我们发现在谈到它的时候，最好忘掉自己关于类和实例的一切知识，只从对象的角度来思考。用基于类的办法来创建对象包括两个步骤：首先，用一个类的声明定义对象的结构；第二，实例化该类以创建一个新对象。用这种方式创建的对象都有一套该类所有实例属性的副本。每一个实例方法都只存在一份，但每个对象都有一个指向它的链接。</p><p>使用原型式继承时，并不需要用类来定义对象的结构，只需要直接创建一个对象即可。这个对象随后可以被新的对象重用，这得益于原型链查找的工作机制。该对象被成为原型对象 (prototype object) ，这是因为它为其他对象应有的模样提供了一个原型。这正是原型式继承这个名称的由来。</p><p>下面我们将使用原型式继承来重新设计 Person 和 Author</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'default name'</span><span class="token punctuation">,</span>  getName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这里并没有使用一个名为 Person 的构造函数来定义类的结构，Person 现在是一个对象字面量。它是所要创建的其他各种类 Person 对象的原型对象。其中定义了所有类 Person 对象都要具备的属性和方法，并为它们提供了默认值。方法的默认值可能不会被改变，而属性的默认值一般都会被改变</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出default name</span><span class="token function">alert</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>reader<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'John Smith'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出John Smith</span><span class="token function">alert</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>clone 函数可以用来创建新的类 Person 对象。它会创建一个空对象，而该对象的原型对象被设置成为 Person。这意味着在这个新对象中查找某个方法或属性时，如果找不到，那么查找过程会在其原型对象中继续进行。</p><p>你不必为创建 Author 而定义一个 Person 的子类，只要执行一次克隆即可</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Author原型对象</span><span class="token keyword">var</span> Author <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">;</span>Author<span class="token punctuation">.</span>books <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>Author<span class="token punctuation">.</span>getBooks <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>然后你可以重定义该克隆中的方法和属性。可以修改在 Person 中提供的默认值，也可以添加新的属性和方法。这样一来就创建了一个新的原型对象，你可以将其用于创建新的类 Author 对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> author <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>author<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>Author<span class="token punctuation">)</span><span class="token punctuation">;</span>author<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Dustin Diaz'</span><span class="token punctuation">;</span>author<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>books <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'JavaScript Design Patterns'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>author<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>Author<span class="token punctuation">)</span><span class="token punctuation">;</span>author<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Ross Harmes'</span><span class="token punctuation">;</span>author<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>books <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'JavaScript Design Patterns'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>author<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>author<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="对继承而来的成员的读和写的不对等性"><a href="#对继承而来的成员的读和写的不对等性" class="headerlink" title="对继承而来的成员的读和写的不对等性"></a>对继承而来的成员的读和写的不对等性</h3><p>前面说过，为了有效地使用原型式继承，你必须忘记有关类式继承的一切。这里就是一个例子。在类式继承中，Author 的每一个实例都有一份自己的 books 数组副本。你可以用代码 author[1].books.push(‘New Book Title’) 为其添加元素。但是对于使用原型式继承方式创建的类 Author 对象来说，由于原型链接的工作方式，这种做法并非一开始就能行得通。一个克隆并非其原型对象的一份完全独立的副本，它只是一个以那个对象为原型对象的空对象而已。克隆刚被创建时，author[1].name 其实是一个返指最初的 Person.name 的链接。对于从原型对象继承而来的成员，其读和写具有内在的不对等性。在读取 author[1].name 的值时，如果你还没有直接为 author[1] 实例定义 name 属性的话，那么所得到的是其原型对象的同名属性值。而在写入 author[1].name 的值时，你是在直接为 author[1] 对象定义一个新属性。</p><p>下面这个示例显示了这种不对等性</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> authorClone <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>Author<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 访问Person.name的值default name</span><span class="token function">alert</span><span class="token punctuation">(</span>authorClone<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 自身添加name属性</span>authorClone<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'new name'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 现在访问authorClone.name的值new name</span><span class="token function">alert</span><span class="token punctuation">(</span>authorClone<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// authorClone.books引用的是Author.books。我们只修改了原型对象的默认值，</span><span class="token comment" spellcheck="true">// 其他继承该对象的对象将得到一个新的默认值为'new book'的books数组</span>authorClone<span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'new book'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 为authorClone自身添加一个新books副本</span>authorClone<span class="token punctuation">.</span>books <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 现在我们修改该数组</span>authorClone<span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'new book'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这也说明了为什么必须为通过引用传递的数据类型的属性创建新副本。在上面的例子中，向 authorClone.books 数组添加新元素实际上是把这个元素添加到 Author.books 数组中。这可不是什么好事，因为你对那个值的修改不仅会影响到 Author，而且会影响到所有继承了 Author 但还未改写那个属性的默认值的对象。在改变所有那些数组和对象的成员之前，必须先为其创建新的副本。稍不留声，你可能就会忘记这个问题并改动原型对象的值。这种错误必须尽量避免，因为这类问题调式起来会非常费时。在这类场合中，可以使用 hasOwnProperty 方法来区分对象的实际成员和它继承而来的成员。</p><p>有时原型对象自己也含有子对象。如果想覆盖其子对象中的一个属性值，你不得不重新创建整个子对象。这可以通过将该子对象设置为一个空对象字面量，然后对其进行重塑而办到。但这意味着克隆出来的对象必须知道其原型对象的每一个子对象的确切结构和默认值。为了尽量弱化对象之间的耦合，任何复杂的子对象都应该使用方法来创建</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> CompoundObject <span class="token operator">=</span> <span class="token punctuation">{</span>  string1<span class="token punctuation">:</span> <span class="token string">'default value'</span><span class="token punctuation">,</span>  childObject<span class="token punctuation">:</span> <span class="token punctuation">{</span>    bool<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    num<span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> compoundObjectClone <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>CompoundObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不要这样修改子对象值</span>compoundObjectClone<span class="token punctuation">.</span>childObject<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 好的方式是创建一个新对象，不过需要知道原型对象子对象的确切结构。</span><span class="token comment" spellcheck="true">// 这就使得原型对象和继承它的对象之间形成了强耦合</span>compoundObjectClone<span class="token punctuation">.</span>childObject <span class="token operator">=</span> <span class="token punctuation">{</span>  bool<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  num<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>在这个例子中，为 compoundObjectClone 对象新添加了一个 childObject 属性，并修改了它所指向的对象的 num 属性。问题在于 compoundObjectClone 必须知道 childObject 具有两个默认值分别为 true 和 10 的属性。更好的办法是用一个工厂方法来创建 childObject</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> CompoundObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>CompoundObject<span class="token punctuation">.</span>string1 <span class="token operator">=</span> <span class="token string">'default value'</span><span class="token punctuation">;</span>CompoundObject<span class="token punctuation">.</span>createChildObject <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    bool<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    num<span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>CompoundObject<span class="token punctuation">.</span>childObject <span class="token operator">=</span> CompoundObject<span class="token punctuation">.</span><span class="token function">createChildObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> compoundObjectClone <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>CompoundObject<span class="token punctuation">)</span><span class="token punctuation">;</span>compoundObjectClone<span class="token punctuation">.</span>childObject <span class="token operator">=</span> CompoundObject<span class="token punctuation">.</span><span class="token function">createChildObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>compoundObjectClone<span class="token punctuation">.</span>childObject<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></code></pre><h3 id="clone-函数"><a href="#clone-函数" class="headerlink" title="clone 函数"></a>clone 函数</h3><p>在前面的例子中用来创建克隆对象的奇妙函数究竟是个什么样子呢？答案如下</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// clone函数</span><span class="token keyword">function</span> <span class="token function">clone</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> object<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>clone 函数首先创建了一个新的空函数F，然后将 F 的 prototype 属性设置为作为参数 object 传入的原型对象。由此可以体会到 JavaScript 最初的设计者的用意。prototype 属性就是用来指向原型对象的，通过原型链接机制，它提供了到所有继承而来的成员的链接。该函数最后通过把 new 运算符作用于F创建出一个新对象，然后把这个新对象作为返回值返回。函数所返回的这个克隆结果是一个以给定对象为原型对象的空对象。</p><h2 id="类式继承和原型式继承的对比"><a href="#类式继承和原型式继承的对比" class="headerlink" title="类式继承和原型式继承的对比"></a>类式继承和原型式继承的对比</h2><p>类式继承和原型式继承是大相径庭的两种继承范型，它们生成的对象也有不同的行为方式。两种继承范型都各有其优缺点，为了判断在特定场合下应该使用哪一种，你需要对此有所了解。</p><p>包括 JavaScript 程序员在内的整个程序员群体对类式继承都比较熟悉。几乎所有用面向对象方式编写的 JavaScript 代码中都用到了这种继承范型。如果你设计的是一个供众人使用的 API，或者可能会有不熟悉原型式继承的其他程序员基于你的代码进行设计，那么最好还是使用类式继承。在各种流行语言中只有 JavaScript 使用原型式继承，因此可能很多人从来没有用过这种继承。而对象具有到自己的原型对象的反向链接，这也是一个令人困惑的机制。那些没有完全理解原型式继承的程序员会把它视为某种反向继承，即父类继承子类。即使事实并非如此，原型式继承仍然会是一个令人费解话题。但是，因为 JavaScript 中的类式继承仅仅是对真正基于类的继承的一种模仿，所以那些高级 JavaScript 程序员总有一天需要懂得原型式继承的工作机制。有人认为隐瞒这一事实其实是弊大于利。</p><p>原型式继承更能节约内存。原型链读取成员的方式使得所有克隆出来的对象都共享每个属性和方法的唯一一份实例，只有在直接设置了某个克隆出来的对象的属性和方法时，情况才会有所变化。与此相比，在类式继承方式中创建的每一个对象在内存中都有自己的一套属性（和私用方法）的副本。原型式继承在这方面的节约效果很突出。这种继承也比类式继承显得更为简练，它只用到了一个 clone 函数，不像后者那样需要为每一个想扩展的类写上好几行像 <strong>SuperClass.call(this, arg)</strong> 和 <strong>SubClass.prototype = new SuperClass</strong> 这样的晦涩代码（当然，这几行代码中的一部分也可以被塞到 extend 函数中）。不要把原型式继承的简洁看作是简陋，它的力量蕴涵在其简洁之中。</p><p>该使用类式继承还是原型式继承也许主要还是取决于你更喜欢哪种范型。有些人似乎天生就容易被原型式继承的简洁性吸引，而另一些人却对更面熟的类式继承情有独钟。</p><h2 id="继承与封装"><a href="#继承与封装" class="headerlink" title="继承与封装"></a>继承与封装</h2><p>到目前为止基本没提到过封装对继承的影响。从现有的类派生出一个子类时，只有公用和特权成员会被承袭下来。这与其他面向对象语言中的情况类似。以 Java 为例，其子类就无法访问到父类的私用方法；为了将一个方法遗传给子类，必须在定义它时使用关键字 protected。</p><p>由于这个原因，门户大开型类是最适合于派生子类的。它们的所有成员都是公开的，因此可以被遗传给子类。如果某个成员需要稍加隐藏，你可以使用下划线符号规范。</p><p>在派生具有真正的私用成员的类时，因为其特权方法是公用的，所以它们会被遗传下来。籍此可以在子类中间接访问父类的私用属性，但子类自身的实例方法都不能直接访问这些私用属性。父类的私用成员只能通过这些既有的特权方法进行访问，你不能在子类中添加能够直接访问它们的新的特权方法。</p><h2 id="掺元类"><a href="#掺元类" class="headerlink" title="掺元类"></a>掺元类</h2><p>有一种重用代码的方法不需要用到严格的继承。如果想把一个函数用到多个类中，可以通过扩充 (augmentation) 的方式让这些类共享该函数。其实际做法大体为：先创建一个包含各种通用方法的类，然后再用它扩充其他类。这种包含通用方法的类称为掺元类 (mixin class)。它们通常不会被实例化或直接调用。其存在的目的只是向其他类提供自己的方法。咱们最好还是用一个示例来演示一下</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 掺元类</span><span class="token keyword">var</span> Mixin <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Mixin<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  serialize<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> output <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      output<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">': '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> output<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这个 Mixin 类只有一个名为 serialize 的方法。这个方法遍访this对象的所有成员并将它们的值组织为一个字符串输出（这只是一个简化的例子。更健壮的版本参见 <strong>Douglas Crockford</strong> 的 JSON 库 (<a href="//json.org/json.js" target="_blank" rel="noopener" title="http://json.org/json.js">http://json.org/json.js</a>) 中的 toJSONString 方法）。这种方法可能在许多不同类型的类中都会用到，但没有必要让这些类都继承 Mixin，把这个方法的代码复制到这些类中也并不明智。最好还是用 augment 函数把这个方法添加到每一个需要它的类中：</p><pre class=" language-js"><code class="language-js"><span class="token function">augment</span><span class="token punctuation">(</span>Author<span class="token punctuation">,</span> Mixin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> author <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token string">'Ross Harmes'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'JavaScript Design Patterns'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> serializedString <span class="token operator">=</span> author<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在此我们用 Mixin 类中的所有方法扩充了 Author 类。Author 类的实例现在就可以调用 serialize 方法了。这可以被视为多亲继承 (multiple inheritance) 在 JavaScript 中的一种实现方式。C++ 和 Python 这类语言允许子类继承多个超类。这在 JavaScript 中是不允许的，因为一个对象只能拥有一个原型对象。不过，由于一个类可以用多个掺元类加以扩充，所以这实际上实现了多继承的效果。</p><p>augment 函数很简单。它用一个 for…in 循环遍访予类 (giving class) 的 prototype 中的每一个成员，并将其添加到受类 (receiving class) 的 prototype 中。如果受类中已经存在同名成员，则跳过这个成员，转而处理下一个。受类中的成员不会被改写</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Augment 函数</span><span class="token keyword">function</span> <span class="token function">augment</span><span class="token punctuation">(</span>receivingClass<span class="token punctuation">,</span> givingClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> methodName <span class="token keyword">in</span> givingClass<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>receivingClass<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      receivingClass<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span> <span class="token operator">=</span> givingClass<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个函数还可以再改进一下。如果掺元类中包含许多方法，但你只想复制其中的一两个，那么上面这个版本的 augment 函数是无法满足需要的。下面的新版本会检查是否存在额外的可选参数，如果存在，则只复制那些名称与这些参数匹配的方法</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 改进版 Augment 函数</span><span class="token keyword">function</span> <span class="token function">augment</span><span class="token punctuation">(</span>receivingClass<span class="token punctuation">,</span> givingClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      receivingClass<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> givingClass<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> methodName <span class="token keyword">in</span> givingClass<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>receivingClass<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        receivingClass<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span> <span class="token operator">=</span> givingClass<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>现在就可以用 augment(Author, Mixin, ‘serialize’);这条语句来达到只为 Author 类添加一个 serialize 方法的目的了。如果想添加更多方法，只要把它们的名称作为参数传入即可。</p><p>用一些方法来扩充一个类有时比让这个类继承另一个类更合适。这是一种避免出现重复性代码的轻便的解决方法。不过适合这种方案的场合并不是很多。只有那些通用到足以使其在彼此大不相同的各种类中都能派上用场的方法才适合于共享（要是那些类彼此的差异不是那么大，那么普通的继承往往更合适）。</p><h2 id="继承的使用场合"><a href="#继承的使用场合" class="headerlink" title="继承的使用场合"></a>继承的使用场合</h2><p>继承会使代码变得更加复杂、更难被 JavaScript 新手理解，所以只应该用在其带来的好处胜过缺点的那些场合。它的主要好处表现在代码的重用方面。通过建立类或对象之间的继承关系，有些方法我们只需要定义一次即可。同样，如果需要修改这些方法或排查其中的错误，那么由于其定义只出现在一个位置，所以非常有利于节省时间和精力。</p><p>各种继承范型都有自己的优缺点。在内存效率比较重要的场合原型式继承是最佳选择。如果与对象打交道的都是些只熟悉其他面向对象语言中的继承机制的程序员，那么最好使用类式继承。这两种方法都适合于类间差异较小的类层次体系 (hierarchy)。如果类之间的差异较大，那么用掺元类中的方法来扩充这些类往往是一种更合理的选择。</p><p>比较简单的JavaScript程序员很少需要用到这种程度的抽象。只有那些有许多程序员参与的大型项目才需要这种代码组织手段。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>类式继承试图模仿 C++ 和 Java 等面向对象语言中类的继承方式。它最适合于内存效率要求不高或程序员不熟悉那种不太知名的原型式继承的场合。子类派生过程中大多数令人困惑的步骤可以用 extend 函数封装起来。</p><p>原型式继承的工作机制是先创建一些对象然后再对其进行克隆，从而得到创建子类和实例的等效结果。一旦你明白了其中的道理，这种继承方式用起来会非常顺手，而且用这种办法创建的对象往往有较高的内存效率，这是因为它们会共享那些未被改写的属性和方法。那些包含着数组或对象类型成员的对象的克隆会有一些麻烦之处，但这个问题可以通过使用一个方法来设置那些属性的默认值加以解决。创建一个克隆对象的所有事宜由 clone 函数负责处理。</p><p>掺元类提供了一条既能让对象和类共享一些方法又不需要让它们结成父子关系的途径。如果你想让各种彼此有着较大差异的类共享一些通用方法，那么这正是掺元类的用武之地。augment 函数允许你选择共享掺元类中的全部方法还是部分方法。</p><p>使用这三种技术可以创建出复杂的对象层次体系，其简练性堪与任何别的面向对象语言媲美。对于编程新手来说，JavaScript 中的继承不那么好懂或直观。它是一种通过研究这种语言的低层特性而发展起来的高级技术，但是它可以通过使用几个便利函数而得以简化。这种技术非常适用于创建供其他程序员使用的API。</p><h2 id="在线演示和下载示例代码"><a href="#在线演示和下载示例代码" class="headerlink" title="在线演示和下载示例代码"></a>在线演示和下载示例代码</h2><ul><li><a href="http://cntanglijun.github.io/demo/js-inheritance/classical.html" target="_blank" rel="noopener" title="JavaScript类式继承">JavaScript类式继承</a></li><li><a href="http://cntanglijun.github.io/demo/js-inheritance/prototypal.html" target="_blank" rel="noopener" title="JavaScript原型继承">JavaScript原型继承</a></li><li><a href="http://cntanglijun.github.io/demo/js-inheritance/mixin.html" target="_blank" rel="noopener" title="JavaScript掺元类">JavaScript掺元类</a></li><li><a href="http://cntanglijun.github.io/demo/js-inheritance/js-inheritance.7z" target="_blank" rel="noopener" title="下载实例代码">下载实例代码</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题汇总</title>
      <link href="/2015/09/09/exam-of-interview/"/>
      <url>/2015/09/09/exam-of-interview/</url>
      
        <content type="html"><![CDATA[<p>搜集和整理一些常见的前端面试题</p><a id="more"></a><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>超文本标记语言(HyperText Markup Language)，用于构造网页的结构</p><h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><p>DOM 中的元素具有内容(content)、内边距(padding)、边框(board)、外边距(margin)，就像我们日常生活中用来装物品的盒子，所以我们形象的将这四个组成部分称之为盒模型</p><h2 id="行元素，块元素，空元素"><a href="#行元素，块元素，空元素" class="headerlink" title="行元素，块元素，空元素"></a>行元素，块元素，空元素</h2><ul><li>行元素: input a button label span</li><li>块元素: div ul ol li p</li><li>空元素: hr br</li></ul><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p>层叠样式表(Cascading Style Sheets)，用于对 HTML 表现形式的描述和显示规则，级设置样式</p><h2 id="元素在容器内垂直水平居中"><a href="#元素在容器内垂直水平居中" class="headerlink" title="元素在容器内垂直水平居中"></a>元素在容器内垂直水平居中</h2><p>利用 <code>display: table</code> 和 <code>display: table-cell</code></p><p>示例：<a href="http://runjs.cn/code/ozhihu0n" target="_blank" rel="noopener">http://runjs.cn/code/ozhihu0n</a></p><p>利用 <code>position: absolute</code> <code>top: 50%</code> <code>right: 50%</code> <code>margin-top: -(元素高 / 2)</code> <code>margin-left: -(元素宽 / 2)</code></p><p>示例：<a href="http://runjs.cn/code/9637pzrc" target="_blank" rel="noopener">http://runjs.cn/code/9637pzrc</a></p><p>利用 <code>display: flex</code> <code>align-items: center</code></p><p>示例：<a href="http://runjs.cn/code/hwv0ilbk" target="_blank" rel="noopener">http://runjs.cn/code/hwv0ilbk</a></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><strong>左边定宽，右边自适应</strong></p><p><a href="http://runjs.cn/code/pfqjbsxl" target="_blank" rel="noopener">http://runjs.cn/code/pfqjbsxl</a></p><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>一种基于浏览器的动态、弱类型、基于原型的解释性脚本</p><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>现代浏览器都有同源策略，为了保证用户信息的安全，防止恶意的网站窃取数据，营造安全和谐的互联网环境。所以同源策略的存在是必须的也是必要的。但是作为开发者，我们有必要了解一些跨域的技巧来满足日常业务的需求。</p><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>JSONP(JSON with Padding)，利用 <code>&lt;script&gt;</code> 支持跨域的特性，其本质是 JavaScript 而不是 JSON</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xxx.com/get/data?callback<span class="token punctuation">=</span>jsonp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">function</span> <span class="token function">jsonp</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>后端只需稍作处理</p><pre><code>server.response(get(&#39;callback&#39;) + &#39;(&#39; + responseData + &#39;)&#39;)</code></pre><p>优点</p><ul><li>兼容性好</li></ul><p>缺点</p><ul><li>只能 GET 请求，不能 POST 以及其他 HTTP 请求</li><li>只能跨域 HTTP 数据请求，无法在页面中进行 JavaScript 的跨域通信</li><li>没有相对应的 HTTP 状态码</li><li>不够安全，容易被劫持和攻击</li></ul><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS 是一个 W3C 标准，全称是”跨域资源共享”(Cross Origin Resource Sharing)</p><p>其核心为 <code>Access-Control-Allow-Origin</code></p><p>CORS 与 JSONP 的使用目的相同，但是比 JSONP 更强大。JSONP 只支持 GET 请求，CORS 支持所有类型的 HTTP 请求。JSONP 的优势在于支持老式浏览器，以及可以向不支持 CORS 的网站请求数据</p><p>优点</p><ul><li>它是 W3C 标准，体制比较完善，安全验证到位</li><li>学习成本，服务器 API 重构成本较小</li></ul><p>缺点</p><ul><li>老版本的浏览器不支持</li><li>只能跨域 HTTP 数据请求，无法在页面中进行 JavaScript 的跨域通信</li></ul><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>简单的说，闭包是一种具有状态的函数。也可以理解为其相关的局部变量在函数调用结束之后将会继续存在。创建闭包的常见方式，就是在一个函数内部创建另一个函数。</p><p>闭包实现计数器：<a href="http://runjs.cn/code/iyqrqqor" target="_blank" rel="noopener">http://runjs.cn/code/iyqrqqor</a></p><p>闭包实现存取器：<a href="http://runjs.cn/code/3xrx6ojg" target="_blank" rel="noopener">http://runjs.cn/code/3xrx6ojg</a></p><p>闭包实现实现私有属性：<a href="http://runjs.cn/code/26uhwfvq" target="_blank" rel="noopener">http://runjs.cn/code/26uhwfvq</a></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h2 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h2><p><strong>实现 <code>var a = (10).add(20).reduce(2).add(10);</code></strong><br>示例：<a href="http://runjs.cn/code/umje8kcg" target="_blank" rel="noopener">http://runjs.cn/code/umje8kcg</a></p><p><strong>jQuery 中 &amp;.fn.extend &amp;.extend 的区别</strong><br>$.extend 添加的是 jQuery 类方法，$.fn.extend 添加的是 jQuery 实例方法</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">浏览器同源政策及其规避方法</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a></li></ul><h1 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h1><ul><li>HTML、CSS、JS 进行合并、打包、压缩</li><li>图片压缩、css sprites、svg sprites、小图标进行 base64 处理</li><li>尽可能减少 HTTP 请求</li><li>将不需要在 DOM 渲染前加载的脚本放在上方</li><li>开启 GZIP 压缩，开启缓存</li><li>使用 CDN 资源</li></ul><h1 id="Web-安全"><a href="#Web-安全" class="headerlink" title="Web 安全"></a>Web 安全</h1><p>作为 Web 工程师对于 Web 安全方面我觉得有必要有所了解</p><h2 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h2><p>通过把 SQL 命令用表单提交的方式传给后端，达到欺骗服务器执行恶意的 SQL 操作。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>假设有一个表单页面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xxx.com/login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span> or 1<span class="token punctuation">=</span>1--<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>点击提交，后台执行 SQL</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">Table</span> <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">'张三'</span> <span class="token operator">and</span> password<span class="token operator">=</span><span class="token string">''</span> <span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true">--'</span></code></pre><p>导致任何人都可以登录系统</p><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><ul><li>校验用户输入的内容的合法性</li><li>对敏感数据进行加密</li><li>避免把服务器错误信息暴露给用户</li><li>对代码进行安全评审</li></ul><h2 id="CSRF-攻击"><a href="#CSRF-攻击" class="headerlink" title="CSRF 攻击"></a>CSRF 攻击</h2><p>跨站请求伪造，全称 <code>Cross Site Request Forgery</code>，攻击者盗用用户身份，以用户名义发送恶意请求，可能造成用户个人隐私泄露、财产损失</p><h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3><p>通过简单示例理解 CSRF 攻击</p><p>假设用户登录某银行网站，在本地生成 cookies， 随后用户进行转账，调用一下 API</p><pre><code>http://xxx.com/pay/?money=1000</code></pre><p>此时，网页中弹出一个领红包窗口，用户点了进去，这个页面里包含</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xxx.com/pay/?money<span class="token punctuation">=</span>1000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>导致用户损失 1000 元</p><h3 id="防御-1"><a href="#防御-1" class="headerlink" title="防御"></a>防御</h3><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><ul><li>避免在 url 中暴露用户隐私信息</li><li>用户修改，删除等敏感操作使用 post 方式</li><li>严格设置 cookies 的域或者不使用 cookies</li></ul><h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><ul><li>通过 referer、token 或验证码检测用户提交</li><li>提供加密规则给前端进行授权操作</li></ul><h4 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h4><ul><li>不要随便点击来历不明的邮件以及网页中的不可信的广告链接</li><li>定期更改所拥有账户的密码</li><li>在登录情况下尽可能不去打开 tab 浏览其它网页</li></ul><h2 id="XSS-攻击"><a href="#XSS-攻击" class="headerlink" title="XSS 攻击"></a>XSS 攻击</h2><p>跨站脚本攻击，全称 <code>Cross Site Scripting</code>。为了区别于层叠样式表 <code>CSS(Cascading Style Sheets)</code>，所以将第一个字母 <code>C</code> 写成 <code>X</code>，攻击者通过在网页中的输入区域输入要攻击的 HTML 内容，当用户访问该网页时嵌入的 HTML 内容会被执行，从而达到恶意攻击用户的目的</p><h3 id="举例-2"><a href="#举例-2" class="headerlink" title="举例"></a>举例</h3><p>通过一些例子更好的理解 XSS 攻击</p><h4 id="反射型-XSS"><a href="#反射型-XSS" class="headerlink" title="反射型 XSS"></a>反射型 XSS</h4><p>反射型 XSS(Reflected XSS) 即非持久型 XSS，需要欺骗用户去点击链接才能触发 XSS 攻击，服务器中不存储这样的页面和内容，一般容易出现在搜索页面</p><pre><code>http://www.xxx.com/s?search=&lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;</code></pre><h4 id="存储型-XSS"><a href="#存储型-XSS" class="headerlink" title="存储型 XSS"></a>存储型 XSS</h4><p>存储型 XSS(Stored XSS) 即持久性 XSS，它会在服务器中存储恶意内容，相比反射型 XSS 更危险</p><pre class=" language-html"><code class="language-html">&lt;input type="text" name="XSS" value="<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'XSS'</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>"/></code></pre><h4 id="DOM-型-XSS"><a href="#DOM-型-XSS" class="headerlink" title="DOM 型 XSS"></a>DOM 型 XSS</h4><p>DOM 型 XSS 是由于 JavaScript 代码的缺陷所导致的 XSS 攻击，所以作为 Web 前端工程尤其要注意，比较常见从 url 参数中取值并把相关内容添加到 DOM 时发生</p><pre><code>http://www.xxx.com/index.html#msg=&lt;img src=&quot;xss&quot; onerror=&quot;alert(1)&quot; /&gt;</code></pre><pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token function">getHashParam</span><span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">)</span></code></pre><h3 id="防御-2"><a href="#防御-2" class="headerlink" title="防御"></a>防御</h3><p>对非信任的输入数据进行必要的内容过滤。攻击者输入 XSS 内容 &gt; 前端脚本过滤 &gt; Web 服务器过滤 &gt; 后端脚本过滤 &gt; 前端脚本过滤</p><h2 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://www.cnblogs.com/tester-l/p/6045466.html" target="_blank" rel="noopener">SQL注入全过程</a></li><li><a href="http://www.cnblogs.com/shytong/p/5308667.html" target="_blank" rel="noopener">从开发角度浅谈CSRF攻击及防御</a></li><li><a href="https://security.tencent.com/index.php/blog/msg/107" target="_blank" rel="noopener">DOM XSS 典型场景分析与修复指南</a></li><li><a href="http://www.freebuf.com/articles/web/110583.html" target="_blank" rel="noopener">如何用前端防御 XSS 及建立 XSS 报警机制</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用requirejs</title>
      <link href="/2015/09/07/beginning-requirejs/"/>
      <url>/2015/09/07/beginning-requirejs/</url>
      
        <content type="html"><![CDATA[<p>RequireJS 是一个 JavaScript 文件和模块加载器。它既可以在浏览器环境中使用也可以在其他 JavaScript 环境中使用，例如 Rhino 和 Node。使用模块化脚本加载器如 RequireJS 将提升你们代码的执行速度和质量。</p><p>RequireJS 兼容 <strong>IE6+<strong>，</strong>Firefox 2+<strong>，</strong>Safari 3.2+<strong>，</strong>Chrome 3+<strong>，</strong>Opera 10+</strong> 。</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> requirejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>富有表现力的 javascript</title>
      <link href="/2015/08/19/attractive-javascript/"/>
      <url>/2015/08/19/attractive-javascript/</url>
      
        <content type="html"><![CDATA[<p>Javascript 是现在最流行、应用最广泛的语言之一。由于所有现代浏览器都嵌入了 Javascript 解释器，所以在大多数地方都能见到其身影。作为一种语言，它在我们的日常生活中起着非常重要的作用，支持着我们访问的网站，帮助Web呈现出多姿多彩的界面。</p><p>那为什么有些人还把它看作一种玩具式的语言，认为它不值得职业程序员关注呢？我们认为其原因在于，人们没有认清这种语言的全部能力及其在当今的编程世界中的独特性。Javascript 是一种极富表现力的语言，它具有一些C家族语言所罕见的特性。</p><p>Javascript 允许你用各种方式完成同样的任务，还允许你在面向对象编程的过程中借用函数式编程中的概念来丰富其实现方式。</p><a id="more"></a><h2 id="Javascript-的灵活性"><a href="#Javascript-的灵活性" class="headerlink" title="Javascript 的灵活性"></a>Javascript 的灵活性</h2><p>Javascript 最强大的特性是其灵活性。作为 Javascript 程序员，只要你愿意，可以把程序写得很简单，也可以写得很复杂。这种语言也支持不同的编程风格。你既可以才用函数式编程风格，也可以采用更复杂一点的面向对象编程风格。即使你根本不懂函数式编程或面向对象编程，也能写出较为复杂的程序。使用这种语言，哪怕只采用编写一个个简单的函数的方式，你也能高效的完成任务。这可能是某些人把 Javascript 视同玩具的原因之一，但我们却认为这是一个优点。程序员只要使用这种语言的一个很小的、易于学习的子集就能完成一些有用的任务。这也意味着当你成长为一个更高级的程序员时，Javascript 在你手中的威力也在增长。</p><p>Javascript 允许你模仿其他语言的编程模式和惯用法。它也形成了自己的一些编程模式和惯用法。那些较为传统的服务器端编程语言具有的面向对象特性，Javascript 都有。</p><p>我们来看一个用不同方法完成同样任务的例子：启动和停止一个动画。</p><p>如果你习惯于过程式的程序设计，那么可以这样做</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">startAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">stopAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>这种做法很简单，但你无法创建可以保存状态并且具有一些仅对其内部状态进行操作的方法的动画对象。下面的代码定义了一个类，你可以用它创建这种对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Anim <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Anim<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Anim<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>stop <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> myAnim <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Anim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myAnim<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myAnim<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上述代码的定义了一个名为 Anim 的类，并把两个方法赋给该类的 prototype 属性。如果你更喜欢把类的定义封装在一条声明中，则可以改用下面的代码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Anim <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Anim<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  start<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  stop<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这在传统的面向对象程序员看来可能更眼熟一点，它们习惯于看到类的方法声明内嵌在类的声明之中。要是你以前用过这样的编程风格，可能想尝试一下下面的例子</p><pre class=" language-js"><code class="language-js">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> fn<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> Anim <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Anim<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Anim<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'stop'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Function.prototype.method 用于为类添加新方法。它有两个参数。第一个是字符串，表示新方法的名称;第二个是用作新方法的函数。</p><p>你可以进一步修改 Function.prototype.method，使其可被链式调用。这只需要让它返回 this 值即可</p><pre class=" language-js"><code class="language-js">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> fn<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> Anim <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Anim<span class="token punctuation">.</span>  <span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>  <span class="token function">method</span><span class="token punctuation">(</span><span class="token string">'stop'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>你已经见识了完成同一项任务的5种不同方法，它们的风格略有差异。基于自己的编程背景，你可能觉得其中的某种方法比别的方法更为合意。这是件好事：Javascript 允许你用最合适于手头项目的编程风格进行工作。不同的风格在代码篇幅、编码效率和执行性能方面各有特点。</p><h2 id="弱类型语言"><a href="#弱类型语言" class="headerlink" title="弱类型语言"></a>弱类型语言</h2><p>在 Javascript 中，定义变量时不必声明其类型。但这并不意味变量没有类型。一个变量可以属于几种类型之一，这取决于其包含的数据。Javascript 中有3种原始类型：布尔型、数值型和字符串类型(不区分整数和浮点数是 Javascript 与大多数其他主流语言的一个不同之处)。此外，还有对象类型和包含可执行代码的函数类型，前者是一种复合数据类型(数组是一种特殊的对象，它包含着一批值的有序集合)。最后，还有空类型 (null) 和未定义类型 (undefined) 这两种数据类型。原始数据类型按值传递，而其他数据类型则按引用传递。如果不了解这一点的话，你可能会碰到一些意想不到的问题。</p><p>与其他弱类型语言一样，Javascript 中的变量可以根据所赋的值改变类型。原始类型之间也可以进行类型转换。toString 方法可以把数值或布尔值转变为字符串。parseFloat 和 parseInt 函数可以把字符串转变为数值。双重“非”操作可以把字符串或数值转变为布尔值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> bool <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">;</span></code></pre><p>弱类型的变量带来了极大的灵活性。因为 Javascript 会根据需要进行类型转换，所以一般来说，你不用为类型错误操心。</p><h2 id="函数是一等对象"><a href="#函数是一等对象" class="headerlink" title="函数是一等对象"></a>函数是一等对象</h2><p>在 Javascript 中，函数是一等对象。它们可以存储在变量中，可以作为参数传给其他函数，可以作为返回值从其他函数传出，还可以在运行时进行构造。在与函数打交道时，这些特性带来了极大的灵活性和极强的表达能力。这正是用以构建传统的面向对象框架的基础。</p><p>可以用 function() {} 这样的语法创建<strong>匿名函数</strong>。它们没有函数名，但可以被赋给变量。下面是一个匿名函数的示例</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span>foo <span class="token operator">*</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个函数在定义之后便立即执行，甚至不用赋给一个变量。出现在函数声明之后的一对括号立即对函数进行了调用。括号中空无一物，但也并不是非得如此;</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span>foo <span class="token operator">*</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个匿名函数与前一个等价，只不过变量没有在函数内部var声明，而是作为参数从外部传入而已。这个函数也可以返回一个值。这个返回值可以被赋给一个变量</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> baz <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> foo <span class="token operator">*</span> bar<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>匿名函数最有趣的用途是用来创建闭包。闭包是一个受到保护的变量空间，有内嵌函数生成。Javascript 具有函数级的作用域。这意味着定义在函数内部的变量在函数外部不能被访问。Javascript 的作用域又是词法性质的 (lexically scoped) 。这意味着函数运行在定义它的作用域中，而不是在调用它的作用域中。把这两个因素结合起来，就能通过把变量包裹在匿名函数中而对其加以保护。你可以这样创建类的私用 (private) 变量</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> baz<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  baz <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> foo <span class="token operator">*</span> bar<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>变量 foo 和 bar 定义在匿名函数中。因为函数 baz 定义在这个闭包中，所以它能访问这两个变量，即使是在该闭包执行结束后。</p><h2 id="对象的易变性"><a href="#对象的易变性" class="headerlink" title="对象的易变性"></a>对象的易变性</h2><p>在 Javascript 中，一切都是对象(除了那三种原始数据类型。即便是这些类型，在必要的时候也会被自动包装为对象)，而且所有对象都是易变的 (mutable) 。这意味着你能使用一些在大多数别的语言中不允许的技术，例如为函数添加属性</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">displayError</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>  displayError<span class="token punctuation">.</span>numTimesExecuted<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>displayError<span class="token punctuation">.</span>numTimesExecuted <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><p>这也意味着你可以对先前定义的类和实例化的对象进行修改</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  getName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getAge<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> alice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> bill <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Bill'</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getGreeting <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">'Hi'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'!'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>alice<span class="token punctuation">.</span>displayGreeting <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getGreeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这个例子中，类的 getGreeting 方法是在已经创建了类的两个实例之后才添加的，但这两个实例仍然能获得这个方法，其原因在于 prototype 对象的工作机制。对象 alice 还得到了displayGreeting 方法，而别的实例却没有。</p><p>与对象的易变性相关的还有内省 (introspection) 的概念。你可以在运行时检查对象所具有的属性和方法，还可以使用这种信息动态实例化类和执行其方法(这种技术成为反射 (reflection) )，甚至不需要在开发时知道它们的名称。这些技术在动态脚本编程中发挥着重要作用，而静态语言(例如 C++ )则缺乏这样的特性。</p><p>如果你习惯使用 C++ 或 Java 这类语言，可能会觉得这很奇怪，因为在那些语言中，不能对已经实例化的对象进行扩展，也不能对已经定义好的类进行修改。而在 Javascript 中，任何东西都可以在运行时修改。这是一个强有力的工具，许多别的语言中无法办到的事都能借助于它而办到。当然，这也有其不利之处。你可以定义一个具有一套方法的类，却不能肯定这些方法在以后总是完好如初。这是 Javascript 中很少进行类型检查的原因之一。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承在 Javascript 中不像在别的面向对象语言中那样简单。Javascript 使用的是基于对象的(原型式 (prototypal) )继承，它可以用来模仿基于类的(类式 (classical) )继承。两种方式都可以，根据手头任务的实际情况，有时其中的某种会更合适一些。它们在性能上也有不同的表现，这也是在进行选择时需要考虑的重要因素。</p><h2 id="Javascript-中的设计模式"><a href="#Javascript-中的设计模式" class="headerlink" title="Javascript 中的设计模式"></a>Javascript 中的设计模式</h2><p>1995 年，GoF 合作出版了一本名为《设计模式》的书。这本书整理记录了对象间相互作用的各种方式，并针对不同类型的对象创造了一套通用术语。用以创建这些不同类型的对象的套路被称为设计模式 (design pattern) 。</p><p>Javascript 的强大的表现力赋予了程序员在运用设计模式编写代码时极大的创造性。在 Javascript 中使用设计模式主要有如下3原因</p><ul><li>可维护性。设计模式有助于降低模块间的耦合程度。这使对代码进行重构和换用不同模块变得更容易，也使程序员在大型团队中的工作以及与其他程序员的合作变得更容易。</li><li>沟通。设计模式为处理不同类型的对象提供了一套通用的术语。程序员因此可以更简明地描述自己的系统的工作方法。你不用进行冗长的说明，往往这样一句话就足够了：“它使用了工厂模式”。每个模式都有自己的名称，这意味着你可以在较高层面上对其进行讨论，而不必涉足过多的细节。</li><li>性能。某些模式是起优化作用的模式。它们可以大幅提高程序的运行速度，并减少需要传送到客户端的代码量。这方面最重要的例子是享元模式和代理模式。</li></ul><p>你也可能出于如下两个理由而不使用设计模式。</p><ul><li>复杂性。获得可维护性往往要付出代价，那就是代码可能会变得更加复杂、更难被程序设计新手理解。</li><li>性能。尽管某些模式能提升性能，但多数模式对代码的性能都有所拖累。这种拖累可能微不足道，也可能完全不能接受，这取决于项目的具体需求。</li></ul><p>实现设计模式比较容易，而懂得应该在什么时候使用什么模式则较为困难。未搞懂设计模式的用途就盲目套用，是一种不安全的做法。你应该尽量保证所选用的模式就是最恰当的那种，并且不要过度牺牲性能。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Javascript 的丰富表现力是其力量之源。即使这种语言缺少一些有用的内置特性，拜其灵活性所赐，你也能自己加入这些特性。完成一项任务可以有多种方式，你可以根据自己的技术背景和喜好选择编写代码的方式。</p><p>Javascript 是弱类型语言。程序员在定义变量时并不指定其类型。函数是一等对象，并且可以动态创建，因此你可以创建闭包。所有对象和类都是易变的，可以在运行时修改。可供使用的继承范型有两种，即原型式继承和类式继承，它们各有其优缺点。</p><p>Javascript 中的设计模式颇有助益，但其不当应用也会产生负面效果。在 Javascript 这类轻灵的语言中，过度复杂的架构会很快把应用程序拖入泥沼。你使用的编程风格和选择的设计模式应该与所要完成的具体工作相称。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初学Javascript</title>
      <link href="/2015/08/18/beginning-javascript/"/>
      <url>/2015/08/18/beginning-javascript/</url>
      
        <content type="html"><![CDATA[<p>你否是了解 javascript 呢？那你是否对这些知识了如指掌呢？</p><a id="more"></a><h2 id="简化代码"><a href="#简化代码" class="headerlink" title="简化代码"></a>简化代码</h2><p>过去，当我们需要创建一个对象时，我们会这样写</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>car<span class="token punctuation">.</span>colour <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>car<span class="token punctuation">.</span>wheels <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>car<span class="token punctuation">.</span>hubcaps <span class="token operator">=</span> <span class="token string">'spinning'</span><span class="token punctuation">;</span>car<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></code></pre><p>现在也可以写成</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> car <span class="token operator">=</span> <span class="token punctuation">{</span>  colour<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>  wheels<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>  hubcaps<span class="token punctuation">:</span> <span class="token string">'spinning'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span></code></pre><p>这样写更加简洁，并且不用重复写对象名。现在，car 运行良好，你也许会遇到 invalidUserInSession ，这个问题主要是出现在 IE 中。不过只要我们在第二个大括号前不写逗号，就可以避免，否则你将会遇到麻烦。</p><p>另一个使用缩略标记的地方是定义数组。老的定义方法是这样的：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> moviesThatNeedBetterWriters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>  <span class="token string">'Transformers'</span><span class="token punctuation">,</span> <span class="token string">'Transformers2'</span><span class="token punctuation">,</span> <span class="token string">'Avatar'</span><span class="token punctuation">,</span> <span class="token string">'Indiana Jones 4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>更简洁的版本是这样的</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> moviesThatNeedBetterWriters <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">'Transformers'</span><span class="token punctuation">,</span> <span class="token string">'Transformers2'</span><span class="token punctuation">,</span> <span class="token string">'Avatar'</span><span class="token punctuation">,</span> <span class="token string">'Indiana Jones 4'</span><span class="token punctuation">]</span></code></pre><p>对于数组，还有关联数组这样一个特别的东西。 你会发现很多代码是这样定义对象的：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>car<span class="token punctuation">[</span><span class="token string">'colour'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>car<span class="token punctuation">[</span><span class="token string">'wheels'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>car<span class="token punctuation">[</span><span class="token string">'hubcaps'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'spinning'</span><span class="token punctuation">;</span>car<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></code></pre><p>这太疯狂了，不要觉得困惑，“关联数组”只是对象的一个别名而已。</p><p>另一种简化代码的方法是使用三元运算符</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> direction<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  direction <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  direction <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用三元运算符</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> direction <span class="token operator">=</span> x <span class="token operator">&lt;</span> <span class="token number">200</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>条件为 ture 执行 ‘<strong>?</strong>‘ 后面的内容，否则执行 ‘<strong>:</strong>‘ 后面的内容。</p><h2 id="JSON-数据格式"><a href="#JSON-数据格式" class="headerlink" title="JSON 数据格式"></a>JSON 数据格式</h2><p>JSON 是 Javascript Object Notation 的缩写，是 Douglas Crockford 发明的一种轻量级数据交换格式。使用 JSON ，我们可以存储各种复杂的数据并且不需要进行额外的转换。</p><p>例如，想要存储一个乐队的信息</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> band <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"The Red Hot Chili Peppers"</span><span class="token punctuation">,</span>  <span class="token string">"members"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Anthony kiedis"</span><span class="token punctuation">,</span>      <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"lead vocals"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Michael Flea Balzary"</span><span class="token punctuation">,</span>      <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"bass guitar, trumpet, backing vocals"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Chad Smith"</span><span class="token punctuation">,</span>      <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"drums, percussion"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"John Frusciante"</span><span class="token punctuation">,</span>      <span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"Lead Guitar"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"year"</span><span class="token punctuation">:</span> <span class="token string">"2009"</span><span class="token punctuation">}</span></code></pre><p>可以在 javascript 中直接使用 JSON 。因此利用 JSON 原生支持 javascript ，我们可以解决跨域问题。这种技术叫做 JSON-P</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delicious<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">function</span> <span class="token function">delicious</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> out <span class="token operator">=</span> <span class="token string">'&lt;ul>'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> o<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      out <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;li>&lt;a href="'</span> <span class="token operator">+</span> o<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>u <span class="token operator">+</span> <span class="token string">'">'</span> <span class="token operator">+</span> o<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>d <span class="token operator">+</span> <span class="token string">'&lt;/a>&lt;/li>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    out <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&lt;/ul>'</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'delicious'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> out<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://feeds.delicious.com/v2/json/codepo8/javascript?count<span class="token punctuation">=</span>15&amp;callback<span class="token punctuation">=</span>delicious<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这里请求了 Delicious Web 服务器上的数据，然后将其显示为无序列表。</p><h2 id="尽量使用原生函数"><a href="#尽量使用原生函数" class="headerlink" title="尽量使用原生函数"></a>尽量使用原生函数</h2><p>例如：在一个数组中查找最大值时，我们可能需要遍历整个数组。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">342</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>    max <span class="token operator">=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => 342</span></code></pre><p>可以不用循环，使用数组的 sort 来完成同样是任务。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">342</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => 342</span></code></pre><p>我们也可以使用 Math.max()</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">342</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span>max<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => 342</span></code></pre><p>Math.max() 甚至可以用来检测浏览器支持哪个属性</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> scrollTop <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">,</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果你想给元素添加 class，你可能会这样写</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">addClass</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> currentClass <span class="token operator">=</span> element<span class="token punctuation">.</span>className<span class="token punctuation">;</span>  element<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token punctuation">(</span>currentClass <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">class</span> <span class="token punctuation">:</span> currentClass <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">class</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>也可以使用 split() 和 join() 来实现</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">addClass</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> currentClasses <span class="token operator">=</span> element<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  currentClasses<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  element<span class="token punctuation">.</span>className <span class="token operator">=</span> currentClasses<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样做可以保证类与空格自动分离并且新加的类是显示在最后面的。</p><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>事件是 JavaScript 非常重要的一部分。我们想给一个列表中的链接绑定点击事件，一般的做法是写一个循环，给每个链接对象绑定事件，HTML 代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Great Web resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>resources<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://opera.com/wsc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Opera Web Standards Curriculuma<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://sitepoint.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sitepointa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://alistapart.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A List Aparta<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://yuiblog.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>YUI Bloga<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://blameitonthevoices.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Blame it on the voicesa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://oddlyspecific.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Oddly specifica<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span></code></pre><p>脚本如下：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> resources <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'resources'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> links <span class="token operator">=</span> resources<span class="token punctuation">.</span><span class="token function">getElementByTagName</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> len <span class="token operator">=</span> links<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    links<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>更合理的写法是只给列表的父对象绑定事件，这样可行的原理在于事件是支持冒泡的，代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> resources <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'resources'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  resources<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>nodeName<span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Event delegation: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>Javascript 最令人烦恼的事情是变量的范围没有定义。任何在函数外定义的变量、函数、数组和对象都是全局的，这意味着相同页中的其他脚本都可以进行调用，因而经常出现参数被覆盖的现象。解决方法就是将变量封装在一个匿名函数中，在定义完函数后立即调用。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Chris'</span><span class="token punctuation">;</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token string">'34'</span><span class="token punctuation">;</span><span class="token keyword">var</span> status <span class="token operator">=</span> <span class="token string">'single'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">createMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getMemberDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>该页中其他的脚本语句如果含有名为 status 的变量的话就会出现问题。如果将它们封装在名为 myApplication 的匿名函数中，就可以解决这个问题了。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> myApplication <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Chris'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token string">'34'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> status <span class="token operator">=</span> <span class="token string">'single'</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">createMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">getMemberDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但是这样定义使得参数在函数外部不起作用，如果这正是所需要的，没有问题。另外可以省略定义的名字。</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Chris'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token string">'34'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> status <span class="token operator">=</span> <span class="token string">'single'</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">createMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">getMemberDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但如果需要部分变量或函数可被外部调用，则需要这样改写程序：为了可以调用 createMember() 和 getMemberDetails() 函数，将它们作为 myApplication 的属性返回。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> myApplication <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Chris'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token string">'34'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> status <span class="token operator">=</span> <span class="token string">'single'</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    createMember<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    getMemberDetails<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样的用法被称为模块模式或单例模式。Douglas Crockford 多次提到过这个概念，Yahoo YUI 中经常使用它。为了使函数和变量可以被外部调用，需要改变定义的语法，这很令人烦恼。而且，如果要从一个方法中调用另一个方法，还必须在调用时加上 myApplication 前缀。因此，下面这种模式更好。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> myApplication <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Chris'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token string">'34'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> status <span class="token operator">=</span> <span class="token string">'single'</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">createMember</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">getMemberDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    create<span class="token punctuation">:</span> createMember<span class="token punctuation">,</span>    <span class="token keyword">get</span><span class="token punctuation">:</span> getMemberDetails  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这种模式我们称作“揭示模块模式”。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在 Javascript 程序中添加配置文件的几个要点</p><ul><li>在整个脚本文件中添加一个对象作为配置文件。</li><li>在配置文件中加入使用该脚本程序可能需要改变的所有信息：<ul><li>CSS 的 ID 和类的名称</li><li>生成按钮的字符串</li><li>数据：比如要展示的图片张数，地图的尺寸等</li><li>地点、区域和语言设置</li></ul></li><li>将其作为全局属性返回该对象以便人们可以将其重载。大多数时候这一步放在编程的最后阶段。</li></ul><p>其实，配置文件就是为了使代码更易于被其他开发人员使用和更改。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript 闭包</title>
      <link href="/2015/08/17/javascript-closure/"/>
      <url>/2015/08/17/javascript-closure/</url>
      
        <content type="html"><![CDATA[<p>简单的说，闭包是一种具有状态的函数。也可以理解为其相关的局部变量在函数调用结束之后将会继续存在。创建闭包的常见方式，就是在一个函数内部创建另一个函数。</p><a id="more"></a><h2 id="初识闭包"><a href="#初识闭包" class="headerlink" title="初识闭包"></a>初识闭包</h2><p>和其他大多数编程语言一样，javascript 也采用词法作用域，也就是说，函数的执行依赖于变量作用域，这个作用域是在函数定义时决定的，而不是函数调用时决定的。为了实现这种词法作用域，javascript 函数对象的内部状态不仅包含函数的代码逻辑，还必须引用当前的作用域链。函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性在计算机科学文献中称为“闭包”。</p><p>从技术角度讲，所有 javascript 函数都是闭包：它们都是对象它们都关联到作用域链。定义大多数函数时的作用域链在调用函数时依然有效，但这并不影响闭包。当调用函数时闭包所指向的作用域链和定义函数时的作用域链不是同一个作用域链时，事情就变得非常微妙。当一个函数嵌套了另外一个函数，外部函数将嵌套的函数对象作为返回值返回的时候往往会发生这种事情。有很多强大的编程技术都利用到了这类嵌套的函数闭包，以至于这种编程模式在 javascript 中非常常见。当你第一次碰到闭包时可能会觉得非常让人费解，一旦你掌握了闭包之后，就能非常自如地使用它了，了解这一点至关重要。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//全局变量</span><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'global scope'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//局部变量</span>  <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'local scope'</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> scope<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">checkScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => local scope;</span></code></pre><p>checkScope() 函数声明了一个局部变量，并定义了一个函数 f() ，函数 f() 返回这个局部变量的值，最后返回函数 f() 执行的结果。你应当非常清楚为什么调用 checkScope 会返回 “local scope” 。我们稍作修改，你知道这段代码会返回什么吗？</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'global scope'</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">checkScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//局部变量</span>    <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">'local scope'</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> scope<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> f<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">checkScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回值是什么？</span></code></pre><p>这段代码中，我们将函数内的一对圆括号移动到了 checkScope() 后面。checkScope() 现在返回的是函数内嵌的一个函数对象，而不是返回结果。在定义函数的作用域外面，调用这个嵌套的函数会发生什么事呢？回想一下词法作用域的基本规则：javascript 函数执行到了作用域链，这个作用域链是函数定义的时候创建的。嵌套的函数 f() 定义在这个作用域里，其中的变量 scope 一定是局部变量，不管在何时何地执行函数 f()，这种绑定在执行函数 f() 时依然有效。因此最后一行代码返回 “local scope” 而不是 “global scope”。</p><h2 id="利用闭包实现计数器"><a href="#利用闭包实现计数器" class="headerlink" title="利用闭包实现计数器"></a>利用闭包实现计数器</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    count<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> n<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    reset<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//创建两个计数器</span><span class="token keyword">var</span> counter1 <span class="token operator">=</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    counter2 <span class="token operator">=</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>counter1<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => 0</span>counter2<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => 0</span>counter1<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重置counter1</span>counter1<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => 0</span>counter2<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => 1</span></code></pre><p>counter() 函数返回了一个计数器对象，这个对象包含两个方法: count() 返回下一个整数，reset() 函数将计数器重置为内部状态。首先要理解，这两个方法都可以访问私有变量 n。再者，每次调用 counter() 都会创建一个新的作用域链和一个新的私有变量。因此，如果调用 counter() 两次就会创建2个计数器对象，而且彼此包含不同的私有变量，调用其中一个计数器对象的 count() 或者 reset() 不会影响到另外一个对象。</p><h2 id="利用闭包实现存取器"><a href="#利用闭包实现存取器" class="headerlink" title="利用闭包实现存取器"></a>利用闭包实现存取器</h2><p>从技术角度看，其实可以将这个闭包合并为属性存取器方法 getter 和 setter。我们把 counter() 函数稍作修改。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">counter</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//属性getter方法返回并给私有计数器n递增1</span>    <span class="token keyword">get</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> n<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//属性setter确保设置的值大于等于n</span>    <span class="token keyword">set</span> <span class="token function">count</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">>=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        n <span class="token operator">=</span> m<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'count can only be set to a larger value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> counter1 <span class="token operator">=</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>counter1<span class="token punctuation">.</span>count<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => 1000</span>counter1<span class="token punctuation">.</span>count<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => 1001</span>counter1<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>counter1<span class="token punctuation">.</span>count<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => 2000</span>counter1<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => Error</span></code></pre><p>需要注意的是，这个版本的 counter() 函数并未声明局部变量，而只是使用参数 n 来保存私有状态，属性存取器方法可以访问 n。这样的话，调用 counter() 的函数就可以指定私有变量的初始值了。</p><h2 id="利用闭包实现私有属性"><a href="#利用闭包实现私有属性" class="headerlink" title="利用闭包实现私有属性"></a>利用闭包实现私有属性</h2><p>在 javascript 面向对象开发中，我们需要一些属性和方法只在内部访问，对外则提供存取器作特权方法。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Cat <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newName<span class="token punctuation">,</span> newArea<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//私有属性</span>  <span class="token keyword">var</span> name<span class="token punctuation">,</span> area<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//私有方法</span>  <span class="token keyword">function</span> <span class="token function">checkSpecies</span><span class="token punctuation">(</span>newName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">typeof</span> newName <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">checkArea</span><span class="token punctuation">(</span>newArea<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">typeof</span> newArea <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//特权方法</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>setName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkSpecies</span><span class="token punctuation">(</span>newName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    name <span class="token operator">=</span> newName <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>getArea <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> area<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>setArea <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newArea<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkArea</span><span class="token punctuation">(</span>newArea<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    area <span class="token operator">=</span> newArea <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//构造</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>newName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setArea</span><span class="token punctuation">(</span>newArea<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//公共属性</span>Cat<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>publicProperty <span class="token operator">=</span> <span class="token string">'public property'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//公共方法</span>Cat<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>publicMethod <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'public method'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试</span><span class="token keyword">var</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'加菲猫'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat1<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => undefined;</span>cat1<span class="token punctuation">.</span>area<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => undefined;</span>cat1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => 加菲猫</span>cat1<span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => 上海</span>cat1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">'土猫'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat1<span class="token punctuation">.</span><span class="token function">setArea</span><span class="token punctuation">(</span><span class="token string">'北京'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => 土猫</span>cat1<span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => 北京</span>cat1<span class="token punctuation">.</span>publicProperty<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => public property</span>cat1<span class="token punctuation">.</span><span class="token function">publicMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => public method</span></code></pre><p>这里定义了一个 Cat 类，由于属性 name，area 设置为私有属性，从外部是无法访问它们的。只有通过特权方法才能访问它们。而定义在类原型对象上的属性和方法则是公共的，可以被所有的实例在外部访问。</p><h2 id="闭包的副作用"><a href="#闭包的副作用" class="headerlink" title="闭包的副作用"></a>闭包的副作用</h2><p>请看下面这个例子</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createFunctions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个函数返回一个函数数组。表面上看，似乎每个函数都应该返回自己的索引值，也就是位置 0 的函数返回 0，位置 1 的函数返回 1，依次类推。实际上，每个函数都返回 10。因为每个函数的作用域中都保存着 createFunctions() 函数的活动对象，所以它们引用的都是同一个变量i。当 createFunctions() 函数返回后，变量i的值都是 10，此时每个函数都引用着保存变量 i 的同一个变量对象，所以在每个函数内部 i 的值都是 10。</p><p>如何让 createFunctions() 正常工作呢？</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createFunctions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在重写了 createFunctions() 函数后，每个函数就会返回各自不同的索引值了。这个版本中，我们没有直接把闭包赋值给数组，而是定义了一个匿名函数，并将立即执行该匿名函数的结果赋值给数组。这里的匿名函数有一个参数 num，也就是最终的函数要返回的值。在调用每个匿名函数时，我们传入了变量 i。由于函数参数是按值传递的，所以就会将变量i的当前值复制给参数 num。而在这个匿名函数内部，又创建并返回了一个访问 num 的闭包。这样一来，result 数组中的每个函数都有自己 num 变量的一个副本，因此就可以返回各自不同的数值了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>当在函数内部定义了其他函数时，就创建了闭包。闭包有权访问包含函数内部的所有变量，原理如下：</p><ul><li>在后台执行环境中，闭包的作用域链包含着它自己的作用域、包含函数的作用域和全局作用域。</li><li>通常，函数的作用域及其所有变量都会在函数执行结束后被销毁。</li><li>但是，当函数数返回了一个闭包时，这个函数的作用域将会一直在内存中保存到闭包不存在为止。使用闭包可以在 javascript 中模仿块级作用域( javascript 本身没有块级作用域的概念)，要点如下。<ul><li>创建并立即调用一个函数，这样既可以执行其中的代码，有不会在内存中留下对该函数的引用。</li><li>结果就是函数内部的所有变量都会被立即销毁–除非将某些变量赋值给了包含作用域(即外部作用域)中的变量。</li></ul></li></ul><p>闭包还可以用于在对象中创建私有变量，相关概念和要点如下。</p><ul><li>即使 javascript 中没有正式的私有对象属性的概念，但可以使用闭包来实现共有方法，而通过公有方法可以访问在包含作用域中定义的变量。</li><li>有权访问私有变量的公有方法叫做特权方法。</li><li>可以使用构造函数模式、原型模式来实现自定义类型的特权方法，也可以使用模块模式、增强的模块模式来实现单例的特权方法。</li></ul><p>闭包是 javascript 中极其有用的特性，利用它可以实现很多功能。不过，因为创建闭包必须维护额外的作用域，所以过度使用它们可能会占用大量内存。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《javascript编程全解》 井上诚一郎 土江拓郎 滨边将太</li><li>《javascript权威指南》 David Flanagan</li><li>《javascript高级程序设计》 Nicholas C.Zakas</li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo 搭建 github 博客</title>
      <link href="/2015/07/30/hexo-github-blog/"/>
      <url>/2015/07/30/hexo-github-blog/</url>
      
        <content type="html"><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。由台北的 <strong><a href="https://github.com/tommy351" target="_blank" rel="noopener" title="Tommy Chen">Tommy Chen</a></strong> 创建并维护。</p><a id="more"></a><h2 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h2><p>hexo 基于 nodejs ，首先我们需要安装 nodejs 。**<a href="https://nodejs.org/download/" target="_blank" rel="noopener" title="官网下载">官网下载</a>**</p><p><img src="./img/install-nodejs.jpg" alt="安装 nodejs " title="安装 nodejs "></p><p>安装成功，打开 cmd 终端，检测 nodejs</p><pre class=" language-bash"><code class="language-bash">node -v</code></pre><p><img src="./img/check-nodejs.jpg" alt="检测 nodejs " title="检测 nodejs"></p><p><strong>恭喜你，nodejs 安装成功！</strong></p><h2 id="安装-hexo-cli"><a href="#安装-hexo-cli" class="headerlink" title="安装 hexo-cli"></a>安装 hexo-cli</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p><img src="./img/install-hexo-cli.jpg" alt="安装 hexo-cli" title="安装 hexo-cli"></p><p><strong>恭喜你，hexo-cli 安装成功</strong></p><h2 id="初始化站点"><a href="#初始化站点" class="headerlink" title="初始化站点"></a>初始化站点</h2><pre class=" language-bash"><code class="language-bash">hexo init <span class="token operator">&lt;</span>folder<span class="token operator">></span><span class="token function">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span><span class="token function">npm</span> i</code></pre><p><img src="./img/init-hexo-site.jpg" alt="初始化站点" title="初始化站点"></p><p><strong>不错，你的第一个 hexo 站点已经初始化</strong></p><h2 id="开启本地服务器"><a href="#开启本地服务器" class="headerlink" title="开启本地服务器"></a>开启本地服务器</h2><pre class=" language-bash"><code class="language-bash">hexo serve --port 8888</code></pre><p><img src="./img/start-serve.jpg" alt="开启本地服务器" title="开启本地服务器"></p><p><img src="./img/view-hexo-site.jpg" alt="默认站点" title="默认站点"></p><p><strong>至此，你的博客搭建完毕</strong></p><h2 id="部署到-github"><a href="#部署到-github" class="headerlink" title="部署到 github"></a>部署到 github</h2><p>部署之前我们需要安装一个 hexo 插件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-deployer-git --save</code></pre><p><img src="./img/install-hexo-deployer-git.jpg" alt="安装 hexo-deployer-git" title="安装 hexo-deployer-git"></p><p>修改 <code>_config</code> 配置</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Deployment</span><span class="token comment" spellcheck="true">## Docs: http://hexo.io/docs/deployment.html</span>deploy:  type: <span class="token function">git</span>  repo:    github: git@github.com:<span class="token operator">&lt;</span>name<span class="token operator">></span>/<span class="token operator">&lt;</span>proj<span class="token operator">></span>.git,gh-pages</code></pre><p>打开 package.json 设置部署命令</p><pre class=" language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"deploy"</span><span class="token operator">:</span> <span class="token string">"hexo clean &amp;&amp; hexo deploy &amp;&amp; rm -rf .deploy_git &amp;&amp; hexo clean"</span><span class="token punctuation">,</span>  <span class="token property">"serve"</span><span class="token operator">:</span> <span class="token string">"hexo clean &amp;&amp; hexo generate &amp;&amp; hexo serve"</span><span class="token punctuation">}</span></code></pre><p>执行部署命令</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> run deploy</code></pre><p><img src="./img/deploy-site.jpg" alt="发布网站" title="发布网站"></p><p><strong>恭喜你，你已经学会使用 hexo 来搭建 github 博客了</strong></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><strong><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener" title="hexo 官方文档">hexo 官方文档</a></strong></li><li><strong><a href="https://nodejs.org/" target="_blank" rel="noopener" title="nodejs">nodejs</a></strong></li><li><strong><a href="https://pages.github.com/" target="_blank" rel="noopener" title="github pages">github pages</a></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> starting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Jekyll 搭建 github 博客</title>
      <link href="/2015/07/14/jekyll-github-blog/"/>
      <url>/2015/07/14/jekyll-github-blog/</url>
      
        <content type="html"><![CDATA[<p><a href="http://jekyllrb.com/" target="_blank" rel="noopener" title="Jekyll">Jekyll</a> 是一个简单的博客形态的静态站点生产机器。它有一个模版目录，其中包含原始文本格式的文档，通过 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener" title="Markdown">Markdown</a> 以及 <a href="https://docs.shopify.com/themes/liquid-documentation/basics" target="_blank" rel="noopener" title="Liquid">Liquid</a> 转化成一个完整的可发布的静态网站，你可以发布在任何你喜爱的服务器上。Jekyll也可以运行在 <a href="https://pages.github.com/" target="_blank" rel="noopener" title="GitHub Page">GitHub Page</a> 上，也就是说，你可以使用 <a href="https://github.com/" target="_blank" rel="noopener" title="GitHub">GitHub</a> 的服务来搭建你的项目页面、博客或者网站，而且是完全免费的。</p><a id="more"></a><h2 id="Windows-系统中安装-Jekyll，High-起来，yeah"><a href="#Windows-系统中安装-Jekyll，High-起来，yeah" class="headerlink" title="Windows 系统中安装 Jekyll，High 起来，yeah!"></a>Windows 系统中安装 Jekyll，High 起来，yeah!</h2><h3 id="安装-Ruby-和-Ruby-DevKit"><a href="#安装-Ruby-和-Ruby-DevKit" class="headerlink" title="安装 Ruby 和 Ruby DevKit"></a>安装 Ruby 和 Ruby DevKit</h3><p><a href="http://rubyinstaller.org/downloads/archives" target="_blank" rel="noopener" title="下载Ruby">下载Ruby2.0.0-p481 x86/x64</a></p><p>安装 Ruby, 勾选 Add Ruby executable to your PATH</p><p><img src="./img/install_ruby.jpg" alt="安装Ruby" title="安装Ruby"></p><p><a href="http://rubyinstaller.org/downloads/" target="_blank" rel="noopener" title="下载Ruby DevKit">下载Ruby DevKit x86/x64</a></p><p>安装 Ruby DevKit</p><p><img src="./img/install_ruby_devkit.jpg" alt="安装 Ruby DevKit" title="安装 Ruby DevKit"></p><p>打开命令行工具 cmd</p><pre class=" language-bash"><code class="language-bash">win + R and input cmd</code></pre><p>进入 RubyDevKit 目录</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> c:/RubyDevKit</code></pre><p>自动检测 Ruby installations 并把它们添加到配置文件</p><pre class=" language-bash"><code class="language-bash">ruby dk.rb init</code></pre><p>安装 DevKit, 绑定到你的 Ruby installation</p><pre class=" language-bash"><code class="language-bash">ruby dk.rb <span class="token function">install</span></code></pre><p><strong>很好！你已经完成了安装 jekyll 的准备工作。敢不敢继续挑战下一步，安装jekyll? : )</strong></p><h3 id="安装-jekyll"><a href="#安装-jekyll" class="headerlink" title="安装 jekyll"></a>安装 jekyll</h3><p>确认 gem 正确安装</p><pre class=" language-bash"><code class="language-bash">gem -v</code></pre><p><img src="./img/ensure_gem_installed.jpg" alt="确认 gem 正确安装" title="确认 gem 正确安装"></p><p>如果正确显示版本号则继续, 否则请重新安装 Ruby</p><pre class=" language-bash"><code class="language-bash">gem <span class="token function">install</span> jekyll</code></pre><p>确认 jekyll 正确安装</p><pre class=" language-bash"><code class="language-bash">jekyll -v</code></pre><p><img src="./img/ensure_jekyll_installed.jpg" alt="确认 jekyll 正确安装" title="确认 jekyll 正确安装"></p><p><strong>恭喜你！你已经成功安装了 jekyll, 是不是兴奋起来了，我们继续 high!</strong></p><h3 id="创建你的-github-帐号"><a href="#创建你的-github-帐号" class="headerlink" title="创建你的 github 帐号"></a>创建你的 github 帐号</h3><p>进入 [GitHub] 官网</p><p><img src="./img/sign_up_for_github.jpg" alt="注册 github 帐号" title="注册 github"></p><p>输入你的注册信息并创建 github 帐号 <strong>(注意: 帐号名请使用小写，因为 blog 的用户名将用作二级域名使用，如果存在大写将导致你的 blog 无法打开)</strong></p><p><img src="./img/create_github_account.jpg" alt="创建 github 帐号" title="创建 github 帐号"></p><p>选择新建仓库</p><p><img src="./img/select_new_repository.jpg" alt="新建仓库" title="选择创建新仓库"></p><p>创建你的仓库 <strong>(注意: 仓库名的命名格式为 username_of_github_account.github.io)</strong></p><p>![创建仓库]<a href="./img/create_repository.jpg" title="创建仓库">create_repository</a></p><p><strong>当你按下按钮的那刻起，你的博客托管服务器便成功建立了，是不是热血沸腾了呢？加油，好戏还在后面。</strong></p><h3 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h3><p><a href="http://msysgit.github.io/" target="_blank" rel="noopener" title="下载 git">下载 git</a></p><p>安装 git</p><p><img src="./img/install_git.jpg" alt="安装 git" title="安装 git"></p><p>确认 git 正确安装</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> --version</code></pre><p><img src="./img/ensure_git_installed.jpg" alt="确认 git 正确安装" title="确认 git 正确安装"></p><p>设置 git 用户信息</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">'your name'</span><span class="token function">git</span> config --global user.email <span class="token string">'you email address'</span></code></pre><p>查看 git 配置信息</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --list</code></pre><p><img src="./img/check_git_config_list.jpg" alt="查看 git 配置信息" title="查看 git 配置信息"></p><p><strong>能来到这里说明你是个有实力的家伙，不过别得意，后面的任务你能完成吗？</strong></p><h3 id="添加-SSH-Keys-到-github-帐号"><a href="#添加-SSH-Keys-到-github-帐号" class="headerlink" title="添加 SSH Keys 到 github 帐号"></a>添加 SSH Keys 到 github 帐号</h3><p>打开你的 git bash 终端, 检查 SSH Keys 是否存在</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ls</span> -al ~/.ssh</code></pre><p><img src="./img/check_ssh_keys_existed.jpg" alt="查看 ssh_keys 是否存在" title="查看 ssh_keys 是否存在"></p><p>如果不存在也没关系，下面我们来创建它</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -b 4096 -C <span class="token string">"your_email@example.com"</span></code></pre><p><img src="./img/create_a_new_ssh_key.jpg" alt="生成一个新的 ssh_key" title="生成一个新的 ssh_key"></p><p>确认 ssh-agent 开启</p><pre class=" language-bash"><code class="language-bash"><span class="token function">eval</span> <span class="token variable"><span class="token variable">$(</span>ssh-agent -s<span class="token variable">)</span></span></code></pre><p><img src="./img/ensure_ssh_agent_enabled.jpg" alt="确认 ssh-agent 开启" title="确认 ssh-agent 开启"></p><p>把 key 添加到 ssh-agent</p><pre class=" language-bash"><code class="language-bash">ssh-add ~/.ssh/id_rsa</code></pre><p><img src="./img/add_key_to_agent.jpg" alt="把 key 添加到 ssh-agent" title="把 key 添加到 ssh-agent"></p><p>复制 key</p><pre class=" language-bash"><code class="language-bash">clip <span class="token operator">&lt;</span> ~/.ssh/id_rsa.pub</code></pre><p><img src="./img/clip_key.jpg" alt="复制 key" title="复制 key"></p><p>进入 github, 选择 settings</p><p><img src="./img/select_settings.jpg" alt="选择 settings" title="选择 settings"></p><p>选择左侧导航 SSH keys</p><p><img src="./img/select_ssh_keys.jpg" alt="选择左侧导航 SSH keys" title="选择左侧导航 SSH keys"></p><p>点击 Add SSH key</p><p><img src="./img/select_add_ssh_key.jpg" alt="点击 Add SSH key" title="点击 Add SSH key"></p><p>添加 SSh key 到 github 帐号</p><p><img src="./img/add_ssh_key_to_github_account.jpg" alt="添加 SSh key 到 github 帐号" title="添加 SSh key 到 github 帐号"></p><p>添加成功</p><p><img src="./img/add_ssh_key_success.jpg" alt="添加成功" title="添加成功"></p><p>测试 git 连接</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com</code></pre><p><img src="./img/test_git_connection.jpg" alt="测试 git 连接" title="测试 git 连接"></p><p><strong>伸个懒腰，休息一下。轮到我们的 jekyll 上场，好戏才刚刚开始！</strong></p><h3 id="创建-jekyll-博客"><a href="#创建-jekyll-博客" class="headerlink" title="创建 jekyll 博客"></a>创建 jekyll 博客</h3><p>首先把你的 username_of_github_account.github.io 克隆一份到你的本机上</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:username_of_github_account/username_of_github_account.github.io.gif</code></pre><p><img src="./img/clone_github_io_repository.jpg" alt="克隆一份到本机" title="克隆一份到本机"></p><p>初始化一个默认的 jekyll 博客模版</p><pre class=" language-bash"><code class="language-bash">jekyll new username_of_github_account.github.io</code></pre><p><img src="./img/init_default_jekyll_template.jpg" alt="初始化 jekyll 博客模版" title="初始化 jekyll 博客模版"></p><p>进入该目录</p><p><img src="./img/into_the_repository.jpg" alt="进入该目录" title="进入该目录"></p><p>本地运行 blog <strong>(注意：默认是 4000 端口)</strong></p><pre class=" language-bash"><code class="language-bash">jekyll serve --port 5000</code></pre><p><img src="./img/run_local_jekyll_serve.jpg" alt="本地运行 blog" title="本地运行 blog"></p><p>默认样式看起来是这样的</p><p><img src="./img/jekyll_default_theme.jpg" alt="默认样式看起来是这样的" title="默认样式看起来是这样的"></p><p>暂存所有文件到git</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add -A</code></pre><p><img src="./img/add_all_to_git.jpg" alt="暂存所有文件到 git" title="暂存所有文件到 git"></p><p>提交所有文件到 git</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> commit -a -m <span class="token string">'update my blog'</span></code></pre><p><img src="./img/commit_all_files_to_git.jpg" alt="提交所有文件到 git" title="提交所有文件到 git"></p><p>提交至 github 仓库</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> push -u origin master</code></pre><p><img src="./img/push_to_github_repository.jpg" alt="提交至 github 仓库" title="提交至 github 仓库"></p><p><strong>热烈祝贺你！你已经成功创建自己的 github 博客了！你可以通过 username_of_github_account.github.io 访问你的博客了！</strong></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><strong><a href="http://daringfireball.net/projects/markdown/syntax#link/" target="_blank" rel="noopener" title="Markdown语法">Markdown 语法</a></strong></li><li><strong><a href="https://pages.github.com/" target="_blank" rel="noopener" title="创建github网站">创建 github 网站</a></strong></li><li><strong><a href="http://jekyllrb.com/docs/home/" target="_blank" rel="noopener" title="jekyll文档">jekyll 文档</a></strong></li><li><strong><a href="http://jekyll-windows.juthilo.com/" target="_blank" rel="noopener" title="window上安装jekyll">window 上安装jekyll</a></strong></li><li><strong><a href="http://jekyllthemes.org/" target="_blank" rel="noopener" title="jekyll主题">jekyll 主题下载</a></strong></li><li><strong><a href="http://yaml.org/" target="_blank" rel="noopener" title="YAML标记语言">YAML 标记语言</a></strong></li><li><strong><a href="https://docs.shopify.com/themes/liquid-documentation/basics/" target="_blank" rel="noopener" title="Liquid模版语法文档">Liquid 模版语法文档</a></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> jekyll </category>
          
      </categories>
      
      
        <tags>
            
            <tag> starting </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="我的语录"><a href="#我的语录" class="headerlink" title="我的语录"></a>我的语录</h1><ul><li>WEB 前端工程师，这个新型职业，在未来将是主流的职业。互联网是未来社会必不可少的，各种黑科技将接踵而至而人类又将迎来下一个里程碑式的跨越</li><li>人类总是保持着不断探索新事物的好奇心，这也是我们不停前进的动力</li><li>新时代，努力学习，努力健身，跟随祖国实现中国梦</li></ul><h1 id="我的学习之旅"><a href="#我的学习之旅" class="headerlink" title="我的学习之旅"></a>我的学习之旅</h1><ul><li><a href="/categories/psychology">心理学学习</a></li><li><a href="/categories/japanese">日语学习</a></li><li><a href="/categories/english">英语学习</a></li><li><a href="/categories/html">HTML 学习</a></li><li><a href="/categories/css">CSS 学习</a></li><li><a href="/categories/javascript">JavaScript 学习</a></li><li><a href="/categories/git">Git 学习</a></li><li><a href="/tags/android">Android 学习</a></li><li><a href="/categories/electron">Electron 学习</a></li><li><a href="/categories/essay">随笔</a></li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/links/index.html"/>
      <url>/links/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
